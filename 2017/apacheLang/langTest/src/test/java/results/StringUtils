====================
org.apache.commons.lang3.StringUtils.StringUtils():::EXIT
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
return == orig(str)
return == null
orig(offset) one of { 0, 7, 10 }
orig(maxWidth) one of { 10, 12, 14 }
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
str.toString > return.toString
orig(offset) < orig(maxWidth)
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
str.toString == "abcdefghijklmno"
return.toString == "...ijklmno"
orig(str) has only one value
orig(maxWidth) == 10
str.toString > return.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::ENTER
str.toString > middle.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::EXIT
return == orig(str)
str.toString one of { "a", "abc" }
middle.toString == "."
orig(middle) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::EXIT
str.toString > middle.toString
str.toString >= return.toString
str.toString == orig(str.toString)
middle.toString < return.toString
middle.toString == orig(middle.toString)
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
return == orig(str)
str.toString one of { "abc", "abcXYZ", "abcxyz" }
suffixes[] elements has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
orig(suffix) has only one value
str.toString < return.toString
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
suffix.getClass().getName() == java.lang.String.class
suffixes.getClass().getName() == java.lang.CharSequence[].class
size(suffixes[]) one of { 0, 1 }
suffix.getClass().getName() != suffixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.appendIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
suffix.getClass().getName() == java.lang.String.class
suffixes.getClass().getName() == java.lang.CharSequence[].class
size(suffixes[]) one of { 0, 1 }
suffix.getClass().getName() != suffixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.capitalize(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.capitalize(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int):::ENTER
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::ENTER
size >= -1
padChar one of { 32, 120 }
size < padChar
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::EXIT
return == orig(str)
str.toString one of { "ab", "abcd" }
orig(size) one of { 1, 2 }
orig(padChar) == 32
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::EXIT
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
str.toString == "ab"
padStr.toString == " "
orig(size) one of { -1, 0, 4 }
str.toString == orig(str.toString)
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, java.lang.String):::EXIT
orig(size) one of { 4, 7 }
return.toString != orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::EXIT
str.toString one of { "\n", "\r" }
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.commonPrefixLength(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::ENTER
seq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
(return == false)  <==>  (orig(searchChar) one of { 32, 122 })
(return == true)  <==>  (orig(searchChar) one of { 97, 98, 99 })
(return == true)  ==>  (orig(seq) has only one value)
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
return == false
orig(searchChar) one of { 32, 122 }
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
return == true
orig(size(searchChars[])) one of { 1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars.getClass().getName() == java.lang.String.class
cs.getClass().getName() == searchChars.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchCharSequences[] elements has only one value
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
orig(size(searchCharSequences[])) one of { 0, 1 }
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
orig(size(searchCharSequences[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
orig(size(searchCharSequences[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchCharSequences[] == orig(searchCharSequences[])
(return == false)  ==>  (orig(searchCharSequences.getClass().getName()) == java.lang.String[].class)
(return == false)  ==>  (orig(size(searchCharSequences[])) one of { 0, 1, 2 })
(return == true)  ==>  (orig(size(searchCharSequences[])) == 2)
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == []
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == [55360]
searchChars[] elements == 55360
return == false
orig(cs) has only one value
orig(size(searchChars[])) == 1
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 55360, 56320, 56321 }
searchChars[] one of { [55360, 56320], [55360, 56321] }
return == false
orig(size(searchChars[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] one of { [44, 34, 13, 10], [46], [98] }
searchChars[] sorted by >
return == false
orig(size(searchChars[])) one of { 1, 4 }
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
(return == false)  ==>  (orig(size(searchChars[])) one of { 1, 2, 4 })
searchChars[] elements > orig(size(searchChars[]))
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
return == false
orig(size(searchChars[])) one of { 1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
invalidChars.toString == ""
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
valid[] elements one of { 97, 98 }
valid[] sorted by <
size(valid[]) one of { 0, 1, 2 }
valid[] elements > size(valid[])
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
valid[] == orig(valid[])
(return == false)  ==>  (orig(size(valid[])) one of { 0, 1 })
(return == false)  ==>  (valid[] one of { [], [97], [98] })
(return == true)  ==>  (orig(size(valid[])) one of { 0, 1, 2 })
valid[] elements one of { 97, 98 }
valid[] sorted by <
valid[] elements > orig(size(valid[]))
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
valid[] one of { [], [97], [98] }
return == false
orig(size(valid[])) one of { 0, 1 }
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
validChars.toString == ""
return == false
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
(return == false)  ==>  (validChars.toString one of { "", "a", "b" })
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::ENTER
seq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, char):::ENTER
str.getClass().getName() == java.lang.String.class
ch one of { 32, 68, 111 }
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, char):::EXIT
return one of { 5, 6 }
orig(str) has only one value
orig(ch) one of { 32, 111 }
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == java.lang.String.class
sub.getClass().getName() == java.lang.String.class
str.getClass().getName() == sub.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.defaultIfBlank(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == defaultStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.defaultIfEmpty(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == defaultStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String):::ENTER
str.toString one of { "", "abc" }
====================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "abc" }
defaultStr has only one value
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::EXIT
return == orig(str)
str.toString one of { "\000\001\002\003\004\005\006\007\010\016\017\020\021\022\023\024\025\026\027\030\031\032\033!\"#$%&'", "\302\240\342\200\257" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
return == orig(str2)
str2.toString == "i am a robot"
orig(str1) == null
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
orig(str1) == orig(str2)
str1.toString one of { "", "abc" }
str1.toString == str2.toString
str1.toString == orig(str2.toString)
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
str1.toString == orig(str1.toString)
str2.toString == orig(str2.toString)
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
(return == false)  ==>  (orig(str.getClass().getName()) == java.lang.String.class)
(return == false)  ==>  (orig(suffix.getClass().getName()) == java.lang.String.class)
(return == true)  ==>  (orig(str) == null)
(return == true)  ==>  (orig(str) == orig(suffix))
(return == true)  ==>  (orig(suffix) == null)
orig(str.getClass().getName()) == java.lang.String.class
orig(suffix.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
orig(size(searchStrings[])) == 1
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchStrings[] == orig(searchStrings[])
(return == false)  ==>  (orig(string.getClass().getName()) == java.lang.String.class)
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(cs1) == orig(cs2)
return == true
orig(cs1.getClass().getName()) == orig(cs2.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
(return == true)  ==>  (orig(cs1) has only one value)
(return == true)  ==>  (orig(cs2) has only one value)
orig(cs1.getClass().getName()) == java.lang.String.class
orig(cs1.getClass().getName()) == orig(cs2.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
(return == false)  ==>  (orig(str1.getClass().getName()) == java.lang.String.class)
(return == false)  ==>  (orig(str2.getClass().getName()) == java.lang.String.class)
(return == true)  ==>  (orig(str1) == null)
(return == true)  ==>  (orig(str1) == orig(str2))
(return == true)  ==>  (orig(str2) == null)
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
strs[] == []
strs[].toString == []
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
strs[] elements are equal
strs[].toString elements one of { "", "abc" }
return.toString one of { "", "abc" }
orig(size(strs[])) one of { 1, 2 }
return in strs[]
strs[] elements == return
return.toString in strs[].toString
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
orig(size(strs[])) == 2
====================
org.apache.commons.lang3.StringUtils.getFuzzyDistance(java.lang.CharSequence, java.lang.CharSequence, java.util.Locale):::ENTER
term.getClass().getName() == java.lang.String.class
locale has only one value
term.getClass().getName() == query.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getJaroWinklerDistance(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::ENTER
s.getClass().getName() == java.lang.String.class
s.getClass().getName() == t.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == 7
orig(s) has only one value
orig(t) has only one value
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return == orig(threshold)
orig(s) == orig(t)
return == 0
orig(s) has only one value
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(threshold) == 1
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(threshold) one of { 0, 2, 6 }
====================
org.apache.commons.lang3.StringUtils.getSetOfMatchingCharacterWithin(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
first.getClass().getName() == java.lang.String.class
limit one of { 2, 3, 5 }
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int):::ENTER
searchChar one of { 32, 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int):::EXIT
return one of { 0, 2 }
orig(searchChar) one of { 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int, int):::ENTER
searchChar one of { 32, 97, 98 }
searchChar > startPos
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int, int):::EXIT
orig(searchChar) one of { 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence):::ENTER
searchSeq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
searchSeq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
size(searchChars[]) one of { 0, 1, 2 }
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 55360, 56320, 56321 }
searchChars[] one of { [55360, 56320], [55360, 56321] }
return one of { 0, 2 }
orig(size(searchChars[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 122, 55360, 56321 }
searchChars[] one of { [122], [55360, 56321] }
orig(size(searchChars[])) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
str.getClass().getName() == java.lang.String.class
searchStrs.getClass().getName() == java.lang.String[].class
size(searchStrs[]) one of { 0, 1, 2 }
str.getClass().getName() != searchStrs.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.String):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
size(searchChars[]) one of { 0, 1, 2 }
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::EXIT
return >= 0
orig(size(searchChars[])) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
searchChars[] elements > return
searchChars[] elements > orig(size(searchChars[]))
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 3 }
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(cs1) == orig(cs2)
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 7 }
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.String[].class
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
css[] elements are equal
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
return one of { 1, 2, 8 }
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
css[] == orig(css[])
return >= -1
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(startPos) == 0
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return == orig(startPos)
return one of { 0, 5 }
orig(searchStr) has only one value
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
return == true
orig(cs) has only one value
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
return == true
orig(cs) has only one value
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNoneBlank(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isNoneBlank(java.lang.CharSequence[]):::EXIT
css[] contains no nulls and has only one value, of length 2
return == true
orig(css) has only one value
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.isNoneEmpty(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isNoneEmpty(java.lang.CharSequence[]):::EXIT
return == true
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.isNotBlank(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNotBlank(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.join(byte[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(byte[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(char[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(char[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [49, 50])
(return has only one value)  ==>  (array[] elements one of { 49, 50 })
(return has only one value)  ==>  (return.toString == "1;2")
array[] == [49, 50]
array[] elements one of { 49, 50 }
return.toString == "1;2"
====================
org.apache.commons.lang3.StringUtils.join(char[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(char[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
return.toString one of { "1;2", "2" }
orig(array) has only one value
orig(endIndex) == 2
array[orig(endIndex)-1] == 50
====================
org.apache.commons.lang3.StringUtils.join(double[], char):::ENTER
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
separator one of { 44, 59 }
size(array[]) == 2
====================
org.apache.commons.lang3.StringUtils.join(double[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::ENTER
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::EXIT
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
return.toString one of { "", "1.0;2.0", "2.0" }
====================
org.apache.commons.lang3.StringUtils.join(float[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(float[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [1.0, 2.0])
(return has only one value)  ==>  (array[] elements one of { 1.0, 2.0 })
(return has only one value)  ==>  (return.toString == "1.0;2.0")
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
return.toString == "1.0;2.0"
====================
org.apache.commons.lang3.StringUtils.join(float[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(float[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
return.toString one of { "1.0;2.0", "2.0" }
orig(array) has only one value
orig(endIndex) == 2
====================
org.apache.commons.lang3.StringUtils.join(int[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(int[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, char):::EXIT
return == null
orig(iterable) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, char):::EXIT
(orig(separator) == 44)  ==>  (orig(iterable) == null)
(orig(separator) == 44)  ==>  (return == null)
(orig(separator) one of { 59, 120 })  ==>  (return.toString one of { "", "foo", "foo;bar;baz" })
return.toString one of { "", "foo", "foo;bar;baz" }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, java.lang.String):::EXIT
return == orig(separator)
return == null
orig(iterable) == null
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, java.lang.String):::EXIT
separator.toString one of { "", ",", "x" }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[]):::EXIT
elements[] == orig(elements[])
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char):::EXIT
array[] == orig(array[])
(orig(separator) == 44)  ==>  (orig(array) == null)
(orig(separator) == 44)  ==>  (return == null)
(orig(separator) one of { 46, 59 })  ==>  (orig(separator) > orig(size(array[])))
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int):::EXIT
orig(startIndex) == orig(size(array[]))
orig(startIndex) one of { 0, 2 }
orig(endIndex) one of { 0, 1 }
orig(size(array[])) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int):::EXIT
array[] == orig(array[])
orig(endIndex) >= size(array[])-1
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String):::EXIT
return == orig(separator)
return == null
orig(array) == null
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String):::EXIT
array[] == orig(array[])
separator.toString one of { "", "," }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int):::EXIT
orig(startIndex) == orig(size(array[]))
orig(startIndex) one of { 0, 2 }
orig(endIndex) one of { 0, 1 }
orig(size(array[])) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int):::EXIT
array[] == orig(array[])
orig(endIndex) >= size(array[])-1
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return == null
orig(iterator) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return.toString one of { "", "foo" }
orig(separator) one of { 59, 120 }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return.toString one of { "", "foo", "foo;bar;baz" }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
return == orig(separator)
return == null
orig(iterator) == null
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
separator.toString one of { ",", "x" }
return.toString one of { "", "foo" }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
separator.toString one of { "", ",", "x" }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(long[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(long[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [1, 2])
(return has only one value)  ==>  (array[] elements one of { 1, 2 })
(return has only one value)  ==>  (orig(size(array[])) in array[])
(return has only one value)  ==>  (return.toString == "1;2")
(return has only one value)  ==>  (size(array[])-1 in array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString == "1;2"
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(long[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(long[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
orig(size(array[])) == array[orig(endIndex)-1]
orig(size(array[])) == orig(array[post(endIndex)-1])
orig(size(array[])) == orig(array[endIndex-1])
return.toString one of { "1;2", "2" }
orig(array) has only one value
orig(endIndex) == 2
orig(endIndex) in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchChar) == 32
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int):::EXIT
(orig(searchChar) == 32)  ==>  (orig(seq.getClass().getName()) == java.lang.String.class)
(return one of { 5, 7 })  <==>  (orig(searchChar) one of { 97, 98 })
return one of { -1, 5, 7 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchChar) == 32
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int, int):::EXIT
(orig(searchChar) == 32)  ==>  (orig(seq.getClass().getName()) == java.lang.String.class)
(orig(searchChar) == 32)  ==>  (orig(startPos) one of { -1, 0 })
return < orig(searchChar)
return <= orig(startPos)
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchSeq) == null
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return <= orig(startPos)
====================
org.apache.commons.lang3.StringUtils.lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchStrs[] == orig(searchStrs[])
return >= -1
return != orig(size(searchStrs[]))
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return one of { 0, 3, 8 }
orig(searchStr) has only one value
orig(startPos) one of { 0, 8, 9 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(str) has only one value
orig(searchStr) has only one value
orig(startPos) == 0
====================
org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
str.getClass().getName() == java.lang.String.class
searchStr.getClass().getName() == java.lang.String.class
ordinal one of { 1, 2, 42 }
str.getClass().getName() == searchStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::ENTER
str.toString one of { "", "foobar" }
len >= -1
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::EXIT
str.toString == "foobar"
return.toString one of { "", "foo" }
orig(str) has only one value
orig(len) one of { 0, 3 }
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int):::ENTER
str.toString one of { "", "abc" }
size one of { 2, 5 }
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::ENTER
size >= 2
size != padChar
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
return == orig(str)
str.toString == "abc"
return has only one value
orig(size) == 2
orig(padChar) == 32
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
orig(size) one of { 2, 3, 5 }
orig(padChar) one of { 32, 120, 65535 }
str.toString != return.toString
orig(size) < orig(padChar)
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::ENTER
str.toString != padStr.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
str.toString == "abc"
return has only one value
orig(size) one of { -1, 2 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
str.toString == "abc"
padStr.toString == "-+~"
return has only one value
return.toString == "-+~abc"
orig(str) has only one value
orig(size) == 6
orig(padStr) has only one value
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
str.toString one of { "a", "aaa", "abc" }
padStr.toString one of { "-+", "a", "yz" }
return.toString one of { "-+-+abc", "", "yzya" }
orig(size) one of { 4, 7, 10000 }
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.length(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String):::ENTER
str.toString one of { "", "fOo test THING" }
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String, java.util.Locale):::ENTER
str.toString one of { "", "fOo test THING" }
locale has only one value
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String, java.util.Locale):::EXIT
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::ENTER
str.toString one of { "", "foobar" }
len >= -1
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::EXIT
orig(pos) one of { 0, 3, 9 }
orig(len) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::EXIT
str.toString == "foobar"
return.toString one of { "", "b", "foo" }
orig(str) has only one value
orig(pos) one of { -1, 0, 3 }
orig(len) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
orig(ordinal) one of { 1, 10, 2147483647 }
orig(lastIndex) == false
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.overlay(java.lang.String, java.lang.String, int, int):::EXIT
return == orig(str)
return == orig(overlay)
return == null
orig(start) one of { -2, 2 }
orig(end) one of { -4, 4 }
====================
org.apache.commons.lang3.StringUtils.overlay(java.lang.String, java.lang.String, int, int):::EXIT
str.toString one of { "", "abcdef" }
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
return == orig(str)
str.toString one of { "XYZabc", "abc", "xyzabc" }
prefixes[] elements has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
orig(prefix) has only one value
str.toString < return.toString
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
prefix.getClass().getName() == java.lang.String.class
prefixes.getClass().getName() == java.lang.CharSequence[].class
size(prefixes[]) one of { 0, 1 }
prefix.getClass().getName() != prefixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.prependIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
prefix.getClass().getName() == java.lang.String.class
prefixes.getClass().getName() == java.lang.CharSequence[].class
size(prefixes[]) one of { 0, 1 }
prefix.getClass().getName() != prefixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, char):::ENTER
str.toString one of { "", "queued" }
remove one of { 97, 117, 122 }
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, char):::EXIT
str.toString == "queued"
return has only one value
return.toString == "qeed"
orig(str) has only one value
orig(remove) == 117
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "a", "queued" }
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, java.lang.String):::EXIT
str.toString == "queued"
remove.toString one of { "ue", "zz" }
return.toString one of { "qd", "queued" }
orig(str) has only one value
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
remove.toString == orig(remove.toString)
====================
org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "domain.com" }
remove.toString one of { "", "a" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "www.domain", "www.domain.com." }
remove.toString == ".com"
orig(remove) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "domain.com", "www.domain.com" }
remove.toString one of { "", "a", "www." }
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::EXIT
str.toString == "www.domain.com"
remove.toString == "www."
return has only one value
return.toString == "domain.com"
orig(str) has only one value
orig(remove) has only one value
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "domain.com", "www.domain.com" }
remove.toString one of { "", "a", "www." }
return.toString one of { "", "domain.com" }
str.toString >= return.toString
str.toString == orig(str.toString)
remove.toString == orig(remove.toString)
====================
org.apache.commons.lang3.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "domain.com" }
remove.toString one of { "", "a" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString == "domain.com"
remove.toString == "www."
return has only one value
orig(remove) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.repeat(char, int):::ENTER
ch != repeat
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::ENTER
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString one of { "a", "ab" }
orig(repeat) one of { -2, 0 }
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString one of { "a", "x" }
return.toString one of { "aaa", "xxx" }
orig(repeat) == 3
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString == "ab"
return has only one value
return.toString == "ababab"
orig(str) has only one value
orig(repeat) == 3
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, java.lang.String, int):::EXIT
return == orig(str)
str.toString == ""
separator.toString == "x"
orig(repeat) == 2
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, java.lang.String, int):::EXIT
str.toString one of { "", "?", "ab" }
separator.toString one of { "", ", ", "x" }
return.toString one of { "", "?, ?, ?", "xx" }
str.toString == orig(str.toString)
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String):::EXIT
text.toString != searchString.toString
text.toString != replacement.toString
text.toString == orig(text.toString)
searchString.toString != return.toString
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
return == orig(text)
text.toString one of { "", "FOO", "oofoo" }
replacement.toString one of { "", "any" }
text.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
text.toString > replacement.toString
text.toString != return.toString
searchString.toString != replacement.toString
replacement.toString <= return.toString
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, char, char):::ENTER
replaceChar one of { 116, 122 }
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, char, char):::EXIT
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString != searchChars.toString
str.toString < return.toString
str.toString != orig(replaceChars.toString)
searchChars.toString != return.toString
searchChars.toString != orig(replaceChars.toString)
return.toString != orig(replaceChars.toString)
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
searchChars.toString == orig(searchChars.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[]):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString <= return.toString
text.toString == orig(text.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
return == orig(text)
text.toString one of { "", "aba" }
searchList[] elements has only one value
searchList[].toString elements == "a"
searchList[].toString one of { [], [a] }
replacementList[] elements has only one value
replacementList[].toString elements == "b"
replacementList[].toString one of { [], [b] }
orig(timeToLive) one of { 0, 1 }
orig(size(searchList[])) one of { 0, 1 }
orig(size(replacementList[])) one of { 0, 1 }
text.toString == return.toString
orig(timeToLive) >= size(searchList[])-1
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
orig(repeat) == false
orig(timeToLive) == 0
orig(size(searchList[])) one of { 1, 2, 61 }
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString <= return.toString
text.toString == orig(text.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[]):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString one of { "", "aba", "abcde" }
text.toString <= return.toString
text.toString == orig(text.toString)
size(replacementList[])-1 == size(searchList[])-1**2
size(searchList[])-1 == size(replacementList[])-1**2
====================
org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String):::EXIT
text.toString one of { "", "FOO", "foofoofoo" }
replacement.toString one of { "", "any" }
return.toString one of { "", "FOO", "foofoo" }
text.toString >= return.toString
text.toString == orig(text.toString)
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
====================
org.apache.commons.lang3.StringUtils.reverse(java.lang.String):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.reverse(java.lang.String):::EXIT
str.toString one of { "", "backwards" }
return.toString one of { "", "sdrawkcab" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.reverseDelimited(java.lang.String, char):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.reverseDelimited(java.lang.String, char):::EXIT
str.toString one of { "", "a b c", "a.b.c" }
return.toString one of { "", "a b c", "c.b.a" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
return == orig(str)
return == null
orig(len) one of { -1, 0, 2 }
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
return == orig(str)
orig(len) one of { 0, 2, 80 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
str.toString one of { "", "foobar" }
return.toString one of { "", "bar", "foobar" }
str.toString >= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int):::EXIT
str.toString one of { "", "abc" }
return.toString one of { "     ", "abc", "abc  " }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
return == orig(str)
return == null
orig(size) == 5
orig(padChar) == 32
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
str.toString == "aaa"
return has only one value
return.toString == ""
orig(str) has only one value
orig(size) == 10000
orig(padChar) == 97
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
padStr.toString == "-+"
return == null
orig(size) one of { 5, 8 }
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
orig(size) one of { 4, 5, 7 }
orig(padStr.toString) one of { "", " " }
str.toString < return.toString
return.toString > orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
str.toString == "abc"
padStr.toString == "-+~"
return has only one value
return.toString == "abc-+"
orig(str) has only one value
orig(size) == 5
orig(padStr) has only one value
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
str.toString != orig(padStr.toString)
return.toString != orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.score(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == 0.0
orig(first) has only one value
orig(second) has only one value
====================
org.apache.commons.lang3.StringUtils.score(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, char):::EXIT
return.getClass().getName() == java.lang.String[].class
size(return[]) one of { 0, 1, 3 }
str.toString == orig(str.toString)
orig(separatorChar) > size(return[])
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[]) one of { 0, 1, 3 }
str.toString != separatorChars.toString
str.toString == orig(str.toString)
separatorChars.toString == orig(separatorChars.toString)
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String, int):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
str.toString != separatorChars.toString
str.toString == orig(str.toString)
separatorChars.toString == orig(separatorChars.toString)
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String, boolean):::EXIT
return == null
orig(str) == null
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String):::ENTER
separator.toString one of { ".", ":", "aeiouy" }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int):::ENTER
str.toString one of { "", "ab   de fg", "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously" }
separator.toString one of { ".", "aeiouy" }
max one of { 2, 3 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int):::ENTER
separator.toString one of { ".", ":", "::" }
max one of { -1, 4 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::ENTER
str.toString != separator.toString
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separator.toString == "."
return has only one value
return[] == []
return[].toString == []
orig(separator) has only one value
orig(max) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separator.toString one of { ":", "::", "aeiouy" }
orig(max) one of { -1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, char):::ENTER
separatorChar one of { 32, 46 }
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String):::ENTER
str.toString != separatorChars.toString
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int):::ENTER
max >= -1
str.toString != separatorChars.toString
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::ENTER
separatorChar one of { 32, 46 }
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::EXIT
return has only one value
return[] == []
return[].toString == []
orig(separatorChar) == 46
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
str.toString == orig(str.toString)
orig(separatorChar) > size(return[])
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separatorChars.toString == "."
return == null
orig(str) == null
orig(max) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
size(return[]) >= 1
orig(max) <= size(return[])
orig(max) != size(return[])-1
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::ENTER
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
orig(str) == orig(prefix)
orig(str) == null
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == false
orig(str.getClass().getName()) == java.lang.String.class
orig(str.getClass().getName()) == orig(prefix.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
string.getClass().getName() != searchStrings.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
orig(size(searchStrings[])) one of { 1, 2, 3 }
====================
org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == java.lang.String.class
prefix.getClass().getName() == java.lang.String.class
str.getClass().getName() == prefix.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String, java.lang.String):::EXIT
stripChars.toString != return.toString
stripChars.toString != orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.stripAccents(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripAccents(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[]):::ENTER
strs.getClass().getName() == java.lang.String[].class
size(strs[]) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[], java.lang.String):::ENTER
strs.getClass().getName() == java.lang.String[].class
stripChars.toString == "."
size(strs[]) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[], java.lang.String):::EXIT
return[].toString one of { [null], [foo, foo, foo] }
size(return[]) one of { 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "\t\n\013\014\r\034\035\036\037 \341\232\200\341\240\216\342\200\200\342\200\201\342\200\202\342\200\203\342\200\204\342\200\205\342\200\206\342\200\210\342\200\211\342\200\212\342\200\250\342\200\251\342\201\237\343\200\200", "        ", "  abc  " }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
stripChars.toString == orig(stripChars.toString)
====================
org.apache.commons.lang3.StringUtils.stripStart(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString == ""
stripChars.toString one of { "", " ", "ab" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.stripStart(java.lang.String, java.lang.String):::EXIT
stripChars.toString one of { " ", ".", "ab" }
str.toString != stripChars.toString
stripChars.toString != return.toString
====================
org.apache.commons.lang3.StringUtils.stripToEmpty(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripToNull(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripToNull(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::ENTER
str.toString one of { "", "abc", "foo bar baz" }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::EXIT
orig(start) one of { 2, 4, 80 }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::EXIT
str.toString one of { "", "abc", "foo bar baz" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int, int):::EXIT
return == orig(str)
return == null
orig(start) one of { 0, 1 }
orig(end) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::EXIT
str.toString == "foo"
orig(str) has only one value
orig(separator) == null
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::EXIT
str.toString one of { "abc", "foo" }
separator.toString == ""
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::EXIT
str.toString == "abc"
orig(str) has only one value
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "abc\r\n", "foo" }
separator.toString one of { "b", "d" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String):::EXIT
return.toString one of { "", "bar", "bc" }
str.toString == orig(str.toString)
tag.toString == orig(tag.toString)
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "abc" }
open.toString one of { "", "tag" }
close.toString one of { "", "tag" }
return == null
str.toString == open.toString
str.toString == close.toString
open.toString == close.toString
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "abc", "foo" }
close.toString one of { "]", "a", "abc" }
return == null
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::ENTER
open.toString one of { "", "[", "ab" }
close.toString one of { "", "]", "ba" }
str.toString != open.toString
str.toString != close.toString
open.toString <= close.toString
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
open.toString == "["
close.toString == "]"
return has only one value
return[] == []
return[].toString == []
orig(open) has only one value
orig(close) has only one value
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
open.toString one of { "[", "ab" }
close.toString one of { "]", "ba" }
size(return[]) one of { 1, 2, 3 }
====================
org.apache.commons.lang3.StringUtils.swapCase(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.swapCase(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.toEncodedString(byte[], java.nio.charset.Charset):::ENTER
bytes[] one of { [-2, -1, 0, 84, 0, 104, 0, 101, 0, 32, 0, 113, 0, 117, 0, 105, 0, 99, 0, 107, 0, 32, 0, 98, 0, 114, 0, 111, 0, 119, 0, 110, 0, 32, 0, 102, 0, 111, 0, 120, 0, 32, 0, 106, 0, 117, 0, 109, 0, 112, 0, 101, 0, 100, 0, 32, 0, 111, 0, 118, 0, 101, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 108, 0, 97, 0, 122, 0, 121, 0, 32, 0, 100, 0, 111, 0, 103, 0, 46], [84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 101, 100, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121, 32, 100, 111, 103, 46] }
size(bytes[]) one of { 45, 92 }
====================
org.apache.commons.lang3.StringUtils.toString(byte[], java.lang.String):::ENTER
bytes[] one of { [-2, -1, 0, 84, 0, 104, 0, 101, 0, 32, 0, 113, 0, 117, 0, 105, 0, 99, 0, 107, 0, 32, 0, 98, 0, 114, 0, 111, 0, 119, 0, 110, 0, 32, 0, 102, 0, 111, 0, 120, 0, 32, 0, 106, 0, 117, 0, 109, 0, 112, 0, 101, 0, 100, 0, 32, 0, 111, 0, 118, 0, 101, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 108, 0, 97, 0, 122, 0, 121, 0, 32, 0, 100, 0, 111, 0, 103, 0, 46], [84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 101, 100, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121, 32, 100, 111, 103, 46] }
charsetName.toString one of { "UTF-16", "UTF-8" }
size(bytes[]) one of { 45, 92 }
====================
org.apache.commons.lang3.StringUtils.transpositions(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.trim(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.trimToEmpty(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.trimToNull(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::EXIT
return == orig(str)
str.toString one of { "cat", "foo" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String):::EXIT
str.toString one of { "", "fOo test THING" }
return.toString one of { "", "FOO TEST THING" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String, java.util.Locale):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String, java.util.Locale):::EXIT
str.toString one of { "", "fOo test THING" }
return.toString one of { "", "FOO TEST THING" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, char):::EXIT
return == orig(str)
str.toString == ""
orig(wrapWith) one of { 0, 49 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, char):::EXIT
(orig(wrapWith) one of { 0, 49 })  <==>  (str.toString == return.toString)
(orig(wrapWith) one of { 0, 49 })  ==>  (return == orig(str))
(orig(wrapWith) one of { 0, 49 })  ==>  (return.toString == "")
(orig(wrapWith) one of { 0, 49 })  ==>  (str.toString == "")
(orig(wrapWith) one of { 34, 39, 120 })  <==>  (str.toString != return.toString)
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "ab" }
wrapWith.toString one of { "", "1" }
str.toString == wrapWith.toString
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, java.lang.String):::EXIT
(wrapWith.toString one of { "", "1" })  <==>  (str.toString == return.toString)
(wrapWith.toString one of { "", "1" })  <==>  (str.toString == wrapWith.toString)
(wrapWith.toString one of { "", "1" })  <==>  (wrapWith.toString == return.toString)
(wrapWith.toString one of { "", "1" })  ==>  (return == orig(str))
(wrapWith.toString one of { "", "1" })  ==>  (return.toString one of { "", "ab" })
(wrapWith.toString one of { "", "1" })  ==>  (str.toString one of { "", "ab" })
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (str.toString != return.toString)
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (str.toString != wrapWith.toString)
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (wrapWith.toString < return.toString)
str.toString == orig(str.toString)
wrapWith.toString <= return.toString
wrapWith.toString == orig(wrapWith.toString)

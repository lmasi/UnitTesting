===========================================================================
org.apache.commons.lang3.StringUtils:::CLASS
org.apache.commons.lang3.StringUtils.SPACE has only one value
org.apache.commons.lang3.StringUtils.SPACE.toString == " "
org.apache.commons.lang3.StringUtils.EMPTY has only one value
org.apache.commons.lang3.StringUtils.EMPTY.toString == ""
org.apache.commons.lang3.StringUtils.LF has only one value
org.apache.commons.lang3.StringUtils.LF.toString == "\n"
org.apache.commons.lang3.StringUtils.CR has only one value
org.apache.commons.lang3.StringUtils.CR.toString == "\r"
org.apache.commons.lang3.StringUtils.SPACE.toString > org.apache.commons.lang3.StringUtils.EMPTY.toString
org.apache.commons.lang3.StringUtils.SPACE.toString > org.apache.commons.lang3.StringUtils.LF.toString
org.apache.commons.lang3.StringUtils.SPACE.toString > org.apache.commons.lang3.StringUtils.CR.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < org.apache.commons.lang3.StringUtils.LF.toString
org.apache.commons.lang3.StringUtils.EMPTY.toString < org.apache.commons.lang3.StringUtils.CR.toString
org.apache.commons.lang3.StringUtils.LF.toString < org.apache.commons.lang3.StringUtils.CR.toString
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.StringUtils.SPACE == orig(org.apache.commons.lang3.StringUtils.SPACE)
org.apache.commons.lang3.StringUtils.EMPTY == orig(org.apache.commons.lang3.StringUtils.EMPTY)
org.apache.commons.lang3.StringUtils.LF == orig(org.apache.commons.lang3.StringUtils.LF)
org.apache.commons.lang3.StringUtils.CR == orig(org.apache.commons.lang3.StringUtils.CR)
(return == true)  ==>  (orig(cs) has only one value)
org.apache.commons.lang3.StringUtils.SPACE.toString == orig(org.apache.commons.lang3.StringUtils.SPACE.toString)
org.apache.commons.lang3.StringUtils.EMPTY.toString == orig(org.apache.commons.lang3.StringUtils.EMPTY.toString)
org.apache.commons.lang3.StringUtils.LF.toString == orig(org.apache.commons.lang3.StringUtils.LF.toString)
org.apache.commons.lang3.StringUtils.CR.toString == orig(org.apache.commons.lang3.StringUtils.CR.toString)
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="return == true"
return == true
orig(cs) has only one value
===========================================================================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.test:::CLASS
===========================================================================
org.apache.commons.lang3.test.main(java.lang.String[]):::ENTER
org.apache.commons.lang3.test.c == null
arg0 has only one value
arg0.getClass().getName() == java.lang.String[].class
arg0[] == []
arg0[].toString == []
===========================================================================
org.apache.commons.lang3.test.main(java.lang.String[]):::EXIT
arg0[] == orig(arg0[])
org.apache.commons.lang3.test.c has only one value
arg0[] == []
arg0[].toString == []
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader:::OBJECT
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
this.pos >= 0
this.mark one of { 0, 1 }
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.size == 9
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 41
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] one of { 111, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 116
this.pos >= this.mark
this.pos < org.apache.commons.lang3.text.StrBuilder.CAPACITY
this.pos < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
this.pos <= org.apache.commons.lang3.text.StrBuilder.this.size
this.pos < size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1
this.pos != org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
this.pos < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
this.pos >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.pos < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
this.mark < org.apache.commons.lang3.text.StrBuilder.CAPACITY
this.mark < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
this.mark < org.apache.commons.lang3.text.StrBuilder.this.size
this.mark < size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1
this.mark <= org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
this.mark < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
this.mark >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.mark < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.size != org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
org.apache.commons.lang3.text.StrBuilder.this.size < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) != org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1 != org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] <= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] > org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.StrBuilderReader(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.size == 9
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 41
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.StrBuilderReader(org.apache.commons.lang3.text.StrBuilder):::EXIT
this.pos == this.mark
this.pos == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
this.pos == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 115
this.pos in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.close():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
this has only one value
this.pos == 5
this.mark == 1
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 32
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 111
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.close():::EXIT
this.pos == orig(this.pos)
this.mark == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
this.pos == 5
this.mark == 1
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 32
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 111
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark-1] == 115
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.mark(int):::ENTER
this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark]
this has only one value
this.pos == 1
this.mark == 0
readAheadLimit == -1
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 111
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.mark(int):::EXIT
this.pos == this.mark
this.pos == orig(this.pos)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
orig(this.mark) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.mark)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
this.pos == 1
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 111
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 115
orig(this.mark) in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.markSupported():::ENTER
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this has only one value
this.pos == 9
this.mark == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.markSupported():::EXIT
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.pos == orig(this.pos)
this.pos == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
this.mark == orig(this.mark)
this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
this.pos == 9
this.mark == 0
return == true
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.markSupported():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read():::ENTER
this.pos one of { 0, 4, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 32, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read():::EXIT3007
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.pos == orig(this.pos)
this.pos == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
this.pos == 9
this.mark == 0
return == -1
orig(this) has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read():::EXIT3009
return == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
this.pos one of { 1, 5 }
return one of { 32, 115 }
orig(this) has only one value
orig(this.pos) one of { 0, 4 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 111, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 32, 115 }
return in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read():::EXIT
this.mark == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] == 0)
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116)
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 0)
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(this.pos == 9)  <==>  (orig(this.pos) == 9)
(this.pos == 9)  <==>  (return == -1)
(this.pos == 9)  <==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(this.pos == 9)  <==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
(this.pos == 9)  <==>  (this.pos == org.apache.commons.lang3.text.StrBuilder.this.size)
(this.pos == 9)  <==>  (this.pos == orig(this.pos))
(this.pos == 9)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)-1] == 116)
(this.pos == 9)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115)
(this.pos == 9)  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]) == 116)
(this.pos == 9)  ==>  (this.mark == 0)
(this.pos == 9)  ==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(this.pos == 9)  ==>  (this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[])
(this.pos one of { 1, 5 })  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 32, 115 })
(this.pos one of { 1, 5 })  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(this.pos one of { 1, 5 })  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 32, 115 })
(this.pos one of { 1, 5 })  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 111, 116 })
(this.pos one of { 1, 5 })  <==>  (orig(this.pos) one of { 0, 4 })
(this.pos one of { 1, 5 })  <==>  (return == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(this.pos one of { 1, 5 })  <==>  (return == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1])
(this.pos one of { 1, 5 })  <==>  (return one of { 32, 115 })
(this.pos one of { 1, 5 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] one of { 111, 115 })
(this.pos one of { 1, 5 })  ==>  (return in org.apache.commons.lang3.text.StrBuilder.this.buffer[])
(this.pos one of { 1, 5 })  ==>  (this.mark one of { 0, 1 })
this.pos one of { 1, 5, 9 }
return one of { -1, 32, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 111, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 32, 115, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 0, 32, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read(char[], int, int):::ENTER
b[this.mark] == b[off]
this.pos one of { 0, 1, 9 }
b[] elements >= 0
off one of { 0, 1 }
size(b[]) one of { 3, 30, 40 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 111, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[off] one of { 111, 115 }
b[off] one of { 0, 109 }
b[off] in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] % org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read(char[], int, int):::EXIT3020
this.pos == return
this.mark == return
b[] == orig(b[])
return == orig(this.pos)
return == orig(this.mark)
return == orig(off)
return == orig(len)
return == b[return]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == b[return]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == b[return]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)]) == b[return]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) == b[return]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] == b[return]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] == b[return]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)]) == b[return]
b[return] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
b[] == [0, 0, 0]
b[] elements == 0
return == 0
orig(this) has only one value
orig(b) has only one value
orig(size(b[])) == 3
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == 115
return in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
b[] elements == return
return in b[]
b[] elements == b[return]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read(char[], int, int):::EXIT3023
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.pos == orig(this.pos)
this.pos == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
this.mark == orig(off)
this.mark == b[this.mark]
b[] == orig(b[])
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == b[this.mark]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)]) == b[this.mark]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len-1])
b[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
b[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
b[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
b[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
b[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
b[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
b[this.mark] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
b[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
b[this.mark] == b[orig(len)]
b[this.mark] == b[orig(len)-1]
b[this.mark] == orig(b[post(len)])
b[this.mark] == orig(b[post(len)-1])
b[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
b[this.mark] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
b[this.mark] == orig(b[len])
b[this.mark] == orig(b[len-1])
this.pos == 9
this.mark == 0
b[] == [0, 0, 0]
b[] elements == 0
return == -1
orig(this) has only one value
orig(b) has only one value
orig(len) == 1
orig(size(b[])) == 3
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == 111
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
b[] elements == this.mark
this.mark in b[]
b[] elements == b[this.mark]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read(char[], int, int):::EXIT3030
this.mark == orig(this.pos)
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == b[return-1]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)-1]) == b[return-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == b[orig(off)]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.mark)]) == b[orig(off)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == b[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] == b[orig(off)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.mark)] == b[orig(off)]
b[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
b[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark])
orig(b[post(len)-1]) == orig(b[len-1])
orig(b[post(return)-1]) == orig(b[len-1])
orig(b[this.pos]) == orig(b[off])
this.pos one of { 2, 4, 9 }
return one of { 1, 3, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 32, 109 }
b[this.mark] one of { 109, 111, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] one of { 0, 101, 111 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[return-1] one of { 109, 115, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1] one of { 0, 109, 115 }
b[return-1] one of { 101, 111, 116 }
b[orig(off)] one of { 111, 115 }
orig(b[len-1]) one of { 0, 111 }
orig(b[len-1]) in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.read(char[], int, int):::EXIT
this.mark == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
orig(b[post(this.mark)]) == orig(b[off])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)])
b[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 0, 111, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] one of { 111, 115 }
b[orig(off)] one of { 0, 111, 115 }
b[this.mark] in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
b[orig(off)] in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
orig(b[off]) in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] % org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 0
b[orig(off)] % org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.ready():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.ready():::EXIT
this.pos == orig(this.pos)
this.mark == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 0)
(this.pos == 9)  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(this.pos == 9)  <==>  (return == false)
(this.pos == 9)  <==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
(this.pos == 9)  <==>  (this.pos == org.apache.commons.lang3.text.StrBuilder.this.size)
(this.pos == 9)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)-1] == 116)
(this.pos == 9)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115)
(this.pos == 9)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116)
(this.pos == 9)  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)-1]) == 116)
(this.pos == 9)  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]) == 116)
(this.pos == 9)  ==>  (orig(this) has only one value)
(this.pos == 9)  ==>  (this.mark == 0)
(this.pos == 9)  ==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(this.pos == 9)  ==>  (this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[])
(this.pos one of { 0, 4, 5 })  <==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 32, 115, 116 })
(this.pos one of { 0, 4, 5 })  <==>  (return == true)
(this.pos one of { 0, 4, 5 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] one of { 111, 115 })
(this.pos one of { 0, 4, 5 })  ==>  (this.mark one of { 0, 1 })
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.ready():::EXIT;condition="return == true"
this.pos one of { 0, 4, 5 }
return == true
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 32, 115, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.ready():::EXIT;condition="not(return == true)"
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.pos == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
this.pos == 9
this.mark == 0
return == false
orig(this) has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115
this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.reset():::ENTER
this.pos one of { 4, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 32 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 101, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.reset():::EXIT
this.pos == this.mark
this.pos == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
this.pos one of { 0, 1 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 111, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 0, 32 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)-1] one of { 101, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.skip(long):::ENTER
this.pos one of { 0, 2, 9 }
n one of { -1, 2, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 109, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.skip(long):::EXIT3040
this.pos == org.apache.commons.lang3.text.StrBuilder.this.size
this.pos == orig(this.pos)
this.pos == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
this.mark == return
return == orig(this.mark)
return == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.pos)]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
this.pos == 9
return == 0
orig(this) has only one value
orig(n) == -1
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == 115
return in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.skip(long):::EXIT3043
orig(n) one of { 2, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(n)] one of { 0, 109 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(n)-1] one of { 111, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.skip(long):::EXIT
this.mark == orig(this.mark)
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
(n == -1)  <==>  (orig(n) == -1)
(n == -1)  ==>  (n == orig(n))
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)-1] == 116)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] == 0)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[return] == 115)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] == 115)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] == 116)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == 0)
(n == -1)  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(n == -1)  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1]) == 116)
(n == -1)  ==>  (orig(this) has only one value)
(n == -1)  ==>  (orig(this.pos) == 9)
(n == -1)  ==>  (return == 0)
(n == -1)  ==>  (return == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(n == -1)  ==>  (return == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(n == -1)  ==>  (return == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
(n == -1)  ==>  (return in org.apache.commons.lang3.text.StrBuilder.this.buffer[])
(n == -1)  ==>  (this.mark == 0)
(n == -1)  ==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY])
(n == -1)  ==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)])
(n == -1)  ==>  (this.mark == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos])
(n == -1)  ==>  (this.mark == return)
(n == -1)  ==>  (this.mark in org.apache.commons.lang3.text.StrBuilder.this.buffer[])
(n == -1)  ==>  (this.pos == 9)
(n == -1)  ==>  (this.pos == org.apache.commons.lang3.text.StrBuilder.this.size)
(n == -1)  ==>  (this.pos == orig(this.pos))
(n one of { 0, 2, 9 })  <==>  (n == return)
(n one of { 0, 2, 9 })  <==>  (orig(n) one of { 2, 9 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[n] one of { 0, 109, 115 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(n)-1] one of { 111, 116 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(n)] one of { 0, 109 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 0, 109, 115 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[return] one of { 0, 109, 115 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.mark] one of { 111, 115 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 101, 116 })
(n one of { 0, 2, 9 })  ==>  (org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 32 })
(n one of { 0, 2, 9 })  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[n-1]) one of { 111, 116 })
(n one of { 0, 2, 9 })  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[n]) one of { 0, 109 })
(n one of { 0, 2, 9 })  ==>  (orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(n)]) one of { 0, 109, 115 })
(n one of { 0, 2, 9 })  ==>  (orig(this.pos) one of { 0, 2, 9 })
(n one of { 0, 2, 9 })  ==>  (return one of { 0, 2, 9 })
(n one of { 0, 2, 9 })  ==>  (this.mark one of { 0, 1 })
(n one of { 0, 2, 9 })  ==>  (this.pos one of { 4, 9 })
this.pos one of { 4, 9 }
return one of { 0, 2, 9 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos] one of { 0, 32 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.pos-1] one of { 101, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[return] one of { 0, 109, 115 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.pos)] one of { 0, 109, 115 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer:::CLASS
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == 0
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == false
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer:::OBJECT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == this.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == this.emptyAsNull
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokenPos == size(this.tokens[])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
this has only one value
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.size one of { 4, 8 }
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
this.tokens.getClass().getName() == java.lang.String[].class
this.tokens[] contains no nulls and has only one value, of length 4
this.tokens[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tokens[].getClass().getName() elements == java.lang.String.class
this.tokens[].toString == [a, b, c, d]
this.tokenPos one of { 0, 4 }
this.ignoreEmptyTokens == true
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 32
size(this.tokens[]) == 4
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos] one of { 97, 99 }
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] has only one value
this.tokens[this.tokenPos-1] has only one value
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY > org.apache.commons.lang3.text.StrBuilder.this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.tokenPos
org.apache.commons.lang3.text.StrBuilder.CAPACITY < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.tokenPos
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.this.size > org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos
org.apache.commons.lang3.text.StrBuilder.this.size > this.tokenPos
org.apache.commons.lang3.text.StrBuilder.this.size < size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.this.size > org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.this.size < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos]
org.apache.commons.lang3.text.StrBuilder.this.size < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos <= this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
this.tokenPos < size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1
this.tokenPos >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.tokenPos < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos]
this.tokenPos < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] <= org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.StrBuilderTokenizer(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.size == 4
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 32
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.StrBuilderTokenizer(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 4
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) (elementwise)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos in orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.getContent():::ENTER
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 8
this.tokens has only one value
this.tokenPos == 4
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.getContent():::EXIT2974
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.getContent():::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens == orig(this.tokens)
this.tokenPos == orig(this.tokenPos)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(this.tokenPos)-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(this.tokenPos)-1])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 8
this.tokens has only one value
this.tokenPos == 4
return has only one value
return.toString == "a b c d "
org.apache.commons.lang3.text.StrBuilder.this.buffer[this.tokenPos] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.tokenize(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == offset
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == count
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.tokenize(char[], int, int):::EXIT2964
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer.tokenize(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(offset)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(count)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 2, 4 }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter:::OBJECT
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this has only one value
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 36
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] one of { 0, 105, 108 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > org.apache.commons.lang3.text.StrBuilder.this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.size < size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] % org.apache.commons.lang3.text.StrBuilder.this.size == 0
org.apache.commons.lang3.text.StrBuilder.this.size > org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] % org.apache.commons.lang3.text.StrBuilder.this.size == 0
org.apache.commons.lang3.text.StrBuilder.this.size != org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.size < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) != org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[])-1 != org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] != org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.StrBuilderWriter(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.newLine == org.apache.commons.lang3.text.StrBuilder.this.nullText
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer has only one value
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] elements >= 0
org.apache.commons.lang3.text.StrBuilder.this.size == 4
org.apache.commons.lang3.text.StrBuilder.this.newLine == null
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == 36
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 101
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.StrBuilderWriter(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 4
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.close():::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 17
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 103
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.close():::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 17
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 103
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.flush():::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 17
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 103
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.flush():::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
org.apache.commons.lang3.text.StrBuilder.this.size == orig(org.apache.commons.lang3.text.StrBuilder.this.size)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 17
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 103
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 5
cbuf has only one value
cbuf[] == [105, 110]
cbuf[] elements one of { 105, 110 }
size(cbuf[]) == 2
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 108
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
cbuf[] == orig(cbuf[])
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]))
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 7
cbuf[] == [105, 110]
cbuf[] elements one of { 105, 110 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 110
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] == 105
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == 108
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] in cbuf[]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] in cbuf[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(char[], int, int):::ENTER
len == size(cbuf[])-1
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == cbuf[off-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[off] == org.apache.commons.lang3.text.StrBuilder.this.buffer[len-1]
cbuf[off] == cbuf[len-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 7
cbuf has only one value
cbuf[] == [110, 101, 114]
cbuf[] elements one of { 101, 110, 114 }
off == 1
len == 2
size(cbuf[]) == 3
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 110
org.apache.commons.lang3.text.StrBuilder.this.buffer[off] == 97
org.apache.commons.lang3.text.StrBuilder.this.buffer[off-1] == 98
org.apache.commons.lang3.text.StrBuilder.this.buffer[len] == 115
cbuf[off] == 101
cbuf[len] == 114
cbuf[off] in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
cbuf[] == orig(cbuf[])
orig(len) == size(cbuf[])-1
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]))
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == cbuf[orig(len)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] == cbuf[orig(off)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == cbuf[orig(off)-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(off)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[off])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(off)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[off-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len])
cbuf[orig(off)] == cbuf[orig(len)-1]
cbuf[orig(off)] == orig(cbuf[post(len)-1])
cbuf[orig(off)] == orig(cbuf[len-1])
cbuf[orig(off)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 9
cbuf[] == [110, 101, 114]
cbuf[] elements one of { 101, 110, 114 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == 97
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == 98
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == 115
cbuf[orig(off)] == 101
cbuf[orig(off)-1] == 110
cbuf[orig(len)] == 114
cbuf[orig(off)] in orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(int):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[] one of { [98, 97, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 32, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.lang3.text.StrBuilder.this.size == 4
c one of { 100, 108 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] one of { 0, 108 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 101
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
orig(c) == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1]
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]))
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1]) == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] one of { [98, 97, 115, 101, 100, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 32, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 115, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.lang3.text.StrBuilder.this.size == 5
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size] one of { 0, 105 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] one of { 100, 108 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == 101
orig(c) in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] one of { [98, 97, 115, 101, 108, 105, 110, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.lang3.text.StrBuilder.this.size one of { 9, 17 }
str.toString one of { " hi", " rout" }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] one of { 103, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)]
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]))
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] one of { [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 32, 104, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
org.apache.commons.lang3.text.StrBuilder.this.size one of { 14, 20 }
str.toString one of { " hi", " rout" }
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] one of { 105, 116 }
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] == 32
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] one of { 103, 114 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(java.lang.String, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 14
str has only one value
str.toString == "ping that server"
off == 1
len == 3
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[off] == 97
org.apache.commons.lang3.text.StrBuilder.this.buffer[off-1] == 98
org.apache.commons.lang3.text.StrBuilder.this.buffer[len] == 101
org.apache.commons.lang3.text.StrBuilder.this.buffer[len-1] == 115
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.write(java.lang.String, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.this == orig(org.apache.commons.lang3.text.StrBuilder.this)
org.apache.commons.lang3.text.StrBuilder.this.buffer == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.newLine)
org.apache.commons.lang3.text.StrBuilder.this.newLine == orig(org.apache.commons.lang3.text.StrBuilder.this.nullText)
size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]) == orig(size(org.apache.commons.lang3.text.StrBuilder.this.buffer[]))
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size]
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(org.apache.commons.lang3.text.StrBuilder.this.size)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(off)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[off])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(off)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[off-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[post(len)-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1] == orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[len-1])
org.apache.commons.lang3.text.StrBuilder.this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
org.apache.commons.lang3.text.StrBuilder.this.size == 17
str.toString == "ping that server"
org.apache.commons.lang3.text.StrBuilder.this.buffer[org.apache.commons.lang3.text.StrBuilder.this.size-1] == 103
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] == 105
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)-1] == 116
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)] == 97
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(off)-1] == 98
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)] == 101
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(len)-1] == 115
org.apache.commons.lang3.text.StrBuilder.CAPACITY in org.apache.commons.lang3.text.StrBuilder.this.buffer[]
org.apache.commons.lang3.text.StrBuilder.this.buffer[orig(org.apache.commons.lang3.text.StrBuilder.this.size)] in orig(org.apache.commons.lang3.text.StrBuilder.this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::CLASS
===========================================================================
org.apache.commons.lang3.text.StrBuilder:::OBJECT
this.buffer != null
this.buffer[] elements >= 0
this.size >= 0
this.newLine.toString one of { "", "#" }
this.nullText.toString one of { "NULL", "null" }
this.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > size(this.buffer[])
this.size <= size(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::EXIT
this.size == this.buffer[this.size]
this.newLine == this.nullText
this.buffer[] elements == 0
this.buffer[] one of { [0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 0
this.newLine == null
size(this.buffer[]) one of { 1, 32 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= orig(initialCapacity)
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(initialCapacity)
this.buffer[] elements == this.size
this.size <= size(this.buffer[])-1
orig(initialCapacity) <= size(this.buffer[])
orig(initialCapacity) != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::EXIT
this.newLine == this.nullText
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 32 }
this.buffer[this.size] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] elements >= this.buffer[this.size]
this.size - size(this.buffer[]) + 32 == 0
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= this.buffer[this.size]
str.toString == orig(str.toString)
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] >= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
value == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(boolean):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.newLine == null
return has only one value
this.buffer[this.size-1] == 101
this.buffer[orig(this.size)] == 116
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::ENTER
this.newLine == this.nullText
this.size one of { 0, 4 }
this.newLine == null
size(this.buffer[]) one of { 32, 36 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < ch
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > ch
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < ch
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
ch > size(this.buffer[])
ch > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
ch != this.buffer[this.size]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(ch) == this.buffer[this.size-1]
orig(ch) == this.buffer[return.size-1]
orig(ch) == this.buffer[orig(this.size)]
orig(ch) == return.buffer[this.size-1]
orig(ch) == return.buffer[return.size-1]
orig(ch) == return.buffer[orig(this.size)]
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
orig(this.buffer[post(this.size)-1]) == orig(this.buffer[this.size])
orig(this.buffer[post(return.size)-1]) == orig(this.buffer[this.size])
this.size one of { 1, 5 }
this.newLine == null
size(this.buffer[]) one of { 32, 36 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 105 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > orig(this.size)
this.size < orig(ch)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size != orig(this.buffer[this.size])
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(ch) > size(this.buffer[])
orig(ch) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(ch) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[this.size] <= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
this.newLine == null
chars has only one value
chars[] == [105, 110]
chars[] elements one of { 105, 110 }
size(this.buffer[]) == 36
size(chars[]) == 2
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 108
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT847
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[]):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 7
this.newLine == null
chars[] == [105, 110]
chars[] elements one of { 105, 110 }
return has only one value
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 110
this.buffer[orig(this.size)] == 105
this.buffer[orig(this.size)-1] == 108
this.buffer[this.size-1] in chars[]
this.buffer[orig(this.size)] in chars[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::ENTER
this.newLine == this.nullText
length == size(chars[])-1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[this.size-1] == chars[startIndex-1]
this.buffer[startIndex] == this.buffer[length-1]
chars[startIndex] == chars[length-1]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 7
this.newLine == null
chars has only one value
chars[] == [110, 101, 114]
chars[] elements one of { 101, 110, 114 }
startIndex == 1
size(this.buffer[]) == 36
size(chars[]) == 3
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 110
this.buffer[startIndex] == 97
this.buffer[startIndex-1] == 98
this.buffer[length] == 115
chars[startIndex] == 101
chars[length] == 114
chars[startIndex] in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT875
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(char[], int, int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
chars[] == orig(chars[])
return == orig(this)
orig(length) == size(chars[])-1
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[this.size-1] == chars[orig(length)]
this.buffer[return.size-1] == chars[orig(length)]
this.buffer[orig(this.size)] == chars[orig(startIndex)]
this.buffer[orig(this.size)-1] == chars[orig(startIndex)-1]
this.buffer[orig(startIndex)] == this.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(this.buffer[post(length)-1])
this.buffer[orig(startIndex)] == return.buffer[orig(length)-1]
this.buffer[orig(startIndex)] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)] == orig(this.buffer[length-1])
this.buffer[orig(startIndex)-1] == orig(this.buffer[post(startIndex)-1])
this.buffer[orig(startIndex)-1] == orig(this.buffer[startIndex-1])
this.buffer[orig(length)] == orig(this.buffer[post(length)])
this.buffer[orig(length)] == orig(this.buffer[length])
return.buffer[this.size-1] == chars[orig(length)]
chars[orig(startIndex)] == chars[orig(length)-1]
chars[orig(startIndex)] == orig(chars[post(length)-1])
chars[orig(startIndex)] == return.buffer[orig(this.size)]
chars[orig(startIndex)] == orig(chars[length-1])
chars[orig(startIndex)-1] == return.buffer[orig(this.size)-1]
chars[orig(startIndex)-1] == orig(this.buffer[this.size-1])
chars[orig(length)] == return.buffer[return.size-1]
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
chars[] == [110, 101, 114]
chars[] elements one of { 101, 110, 114 }
return has only one value
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[orig(startIndex)] == 97
this.buffer[orig(startIndex)-1] == 98
this.buffer[orig(length)] == 115
chars[orig(startIndex)] == 101
chars[orig(startIndex)-1] == 110
chars[orig(length)] == 114
chars[orig(startIndex)] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.newLine == null
seq.getClass().getName() == java.lang.String.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT540
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.CharSequence):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 32, 109, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.newLine == null
obj.getClass().getName() == java.lang.String.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT510
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.newLine == null
return has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 32, 109, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::ENTER
this.newLine == this.nullText
this.newLine == null
str != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT579
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.newLine == null
return != null
this.buffer[this.size] one of { 0, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.size >= orig(this.size)
this.size < size(this.buffer[])-1
this.size != orig(size(this.buffer[]))
this.size != orig(size(this.buffer[]))-1
str.toString == orig(str.toString)
orig(this.size) < size(this.buffer[])-1
orig(this.size) <= this.buffer[orig(this.size)]
size(this.buffer[]) >= orig(size(this.buffer[]))
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 != orig(size(this.buffer[]))
size(this.buffer[])-1 >= orig(size(this.buffer[]))-1
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
orig(size(this.buffer[]))-1 != this.buffer[this.size]
orig(size(this.buffer[]))-1 != this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 14
this.newLine == null
str has only one value
str.toString == "ping that server"
startIndex == 1
length == 3
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
this.buffer[startIndex] == 97
this.buffer[startIndex-1] == 98
this.buffer[length] == 101
this.buffer[length-1] == 115
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT608
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, int, int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer[orig(startIndex)] == orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] == orig(this.buffer[startIndex])
this.buffer[orig(startIndex)-1] == orig(this.buffer[post(startIndex)-1])
this.buffer[orig(startIndex)-1] == orig(this.buffer[startIndex-1])
this.buffer[orig(length)] == orig(this.buffer[post(length)])
this.buffer[orig(length)] == orig(this.buffer[length])
this.buffer[orig(length)-1] == orig(this.buffer[post(length)-1])
this.buffer[orig(length)-1] == orig(this.buffer[length-1])
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 108, 105, 110, 101, 114, 32, 114, 111, 117, 116, 105, 110, 103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 17
this.newLine == null
str.toString == "ping that server"
return has only one value
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 103
this.buffer[orig(this.size)] == 105
this.buffer[orig(this.size)-1] == 116
this.buffer[orig(startIndex)] == 97
this.buffer[orig(startIndex)-1] == 98
this.buffer[orig(length)] == 101
this.buffer[orig(length)-1] == 115
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
this.buffer[orig(this.size)] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
buf has only one value
buf.getClass().getName() == java.nio.HeapCharBuffer.class
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer):::EXIT645
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
return has only one value
this.buffer[this.size-1] == 57
this.buffer[orig(this.size)] == 48
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer, int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[startIndex]
this.size == this.buffer[startIndex-1]
this.size == this.buffer[length]
this.size == this.buffer[length-1]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
buf has only one value
buf.getClass().getName() == java.nio.HeapCharBuffer.class
startIndex == 1
length == 8
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer, int, int):::EXIT677
===========================================================================
org.apache.commons.lang3.text.StrBuilder.append(java.nio.CharBuffer, int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == this.buffer[orig(length)]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(this.buffer[post(startIndex)])
orig(this.size) == orig(this.buffer[post(startIndex)-1])
orig(this.size) == orig(this.buffer[post(length)])
orig(this.size) == orig(this.buffer[post(length)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == return.buffer[orig(length)]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer[orig(this.size)] == this.buffer[orig(startIndex)-1]
this.buffer[orig(this.size)] == return.buffer[orig(startIndex)-1]
this.buffer has only one value
this.buffer[] == [49, 50, 51, 52, 53, 54, 55, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 8
this.newLine == null
return has only one value
this.buffer[this.size-1] == 56
this.buffer[orig(this.size)] == 49
this.buffer[orig(startIndex)] == 50
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.newLine == this.nullText
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
array has only one value
array.getClass().getName() == java.lang.String[].class
array[] contains no nulls and has only one value, of length 5
size(array[]) == 5
array[this.size] has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendAll(java.lang.Object[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
array[] == orig(array[])
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [76, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 32, 100, 111, 108, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 17
this.newLine == null
array[] contains no nulls and has only one value, of length 5
return has only one value
this.buffer[this.size-1] == 114
this.buffer[orig(this.size)] == 76
array[orig(this.size)] has only one value
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[width]
this.size == this.buffer[width-1]
this.newLine == this.nullText
this.newLine == obj
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
obj == null
width == 10
padChar == 42
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadLeft(java.lang.Object, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(width)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(obj)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == this.buffer[orig(width)]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(this.buffer[post(width)])
orig(this.size) == orig(this.buffer[post(width)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == return.buffer[orig(width)]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(padChar) == this.buffer[this.size-1]
orig(padChar) == this.buffer[return.size-1]
orig(padChar) == this.buffer[orig(this.size)]
orig(padChar) == this.buffer[orig(width)-1]
orig(padChar) == return.buffer[this.size-1]
orig(padChar) == return.buffer[return.size-1]
orig(padChar) == return.buffer[orig(this.size)]
orig(padChar) == return.buffer[orig(width)-1]
this.buffer has only one value
this.buffer[] == [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 42 }
this.size == 10
this.newLine == null
return has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[width]
this.size == this.buffer[width-1]
this.newLine == this.nullText
this.newLine == obj
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
obj == null
width == 10
padChar == 42
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendFixedWidthPadRight(java.lang.Object, int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(width)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(obj)
return == orig(this)
orig(this.size) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) == this.buffer[this.size]
orig(this.size) == this.buffer[return.size]
orig(this.size) == this.buffer[orig(width)]
orig(this.size) == return.buffer[this.size]
orig(this.size) == orig(this.buffer[post(this.size)])
orig(this.size) == orig(this.buffer[post(this.size)-1])
orig(this.size) == orig(this.buffer[post(width)])
orig(this.size) == orig(this.buffer[post(width)-1])
orig(this.size) == return.buffer[return.size]
orig(this.size) == return.buffer[orig(width)]
orig(this.size) == orig(this.buffer[post(return.size)])
orig(this.size) == orig(this.buffer[post(return.size)-1])
orig(padChar) == this.buffer[this.size-1]
orig(padChar) == this.buffer[return.size-1]
orig(padChar) == this.buffer[orig(this.size)]
orig(padChar) == this.buffer[orig(width)-1]
orig(padChar) == return.buffer[this.size-1]
orig(padChar) == return.buffer[return.size-1]
orig(padChar) == return.buffer[orig(this.size)]
orig(padChar) == return.buffer[orig(width)-1]
this.buffer has only one value
this.buffer[] == [42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 42 }
this.size == 10
this.newLine == null
return has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendTo(java.lang.Appendable):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[] == [49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 48
===========================================================================
org.apache.commons.lang3.text.StrBuilder.appendTo(java.lang.Appendable):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[] == [49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 48
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asReader():::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
size(this.buffer[]) == 41
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asReader():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 9
this.newLine == null
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilder$StrBuilderReader.class
size(this.buffer[]) == 41
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asTokenizer():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[this.size-1]
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asTokenizer():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[post(this.size)-1])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == return.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == return.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == return.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.buffer[this.size]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.buffer[this.size])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == return.emptyAsNull
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
return.delimMatcher == org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.trimmerMatcher
this.buffer has only one value
this.buffer[] == [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.newLine == null
return has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == 0
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == false
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return.ignoreEmptyTokens == true
this.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asWriter():::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.newLine == null
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
===========================================================================
org.apache.commons.lang3.text.StrBuilder.asWriter():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [98, 97, 115, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 4
this.newLine == null
return has only one value
return.getClass().getName() == org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter.class
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
===========================================================================
org.apache.commons.lang3.text.StrBuilder.build():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [76, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 32, 100, 111, 108, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 17
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 114
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.build():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [76, 111, 114, 101, 109, 32, 105, 112, 115, 117, 109, 32, 100, 111, 108, 111, 114, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 17
this.newLine == null
return has only one value
return.toString == "Lorem ipsum dolor"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 114
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.capacity():::ENTER
this.newLine == this.nullText
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.capacity():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == size(this.buffer[])
return == orig(size(this.buffer[]))
this.newLine == null
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
this.size <= return
===========================================================================
org.apache.commons.lang3.text.StrBuilder.charAt(int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
size(this.buffer[]) one of { 32, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 111, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.charAt(int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == this.buffer[orig(index)]
return == orig(this.buffer[post(index)])
return == orig(this.buffer[index])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[] one of { [102, 111, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 3, 9 }
this.newLine == null
size(this.buffer[]) one of { 32, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 111, 116 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 1, 32, 64 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.clear():::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.size == 0
this.newLine == null
return != null
size(this.buffer[]) one of { 1, 32, 64 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.size
this.size <= orig(this.size)
this.size <= size(this.buffer[])-1
this.size <= this.buffer[this.size]
orig(this.size) <= size(this.buffer[])
orig(this.size) != size(this.buffer[])-1
orig(this.size) <= this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 26 }
this.newLine == null
size(this.buffer[]) one of { 43, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 111, 122 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT2366
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 26
return == true
orig(this) has only one value
orig(ch) one of { 97, 111, 122 }
size(this.buffer[]) == 58
this.buffer[this.size-1] == 122
orig(ch) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT2366;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT2369
return == false
orig(ch) one of { 49, 104 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT2369;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
(return == false)  <==>  (orig(ch) one of { 49, 104 })
(return == false)  ==>  (size(this.buffer[]) one of { 43, 58 })
(return == false)  ==>  (this.buffer[] one of { [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == false)  ==>  (this.buffer[this.size-1] one of { 111, 122 })
(return == false)  ==>  (this.buffer[this.size] one of { 0, 116 })
(return == false)  ==>  (this.size one of { 6, 26 })
(return == true)  <==>  (orig(ch) one of { 97, 111, 122 })
(return == true)  ==>  (orig(ch) in this.buffer[])
(return == true)  ==>  (orig(this) has only one value)
(return == true)  ==>  (size(this.buffer[]) == 58)
(return == true)  ==>  (this.buffer has only one value)
(return == true)  ==>  (this.buffer[] == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == true)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size])
(return == true)  ==>  (this.buffer[this.size-1] == 122)
(return == true)  ==>  (this.buffer[this.size] == 0)
(return == true)  ==>  (this.size == 26)
this.buffer[] one of { [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 26 }
this.newLine == null
size(this.buffer[]) one of { 43, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 111, 122 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT;condition="return == true"
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 26
return == true
orig(this) has only one value
orig(ch) one of { 97, 111, 122 }
size(this.buffer[]) == 58
this.buffer[this.size-1] == 122
orig(ch) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(char):::EXIT;condition="not(return == true)"
return == false
orig(ch) one of { 49, 104 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 26
this.newLine == null
size(this.buffer[]) == 58
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 122
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(java.lang.String):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
(str.toString == "zyx")  <==>  (return == false)
(str.toString one of { "a", "pq", "z" })  <==>  (return == true)
this.buffer has only one value
this.buffer[] == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 26
this.newLine == null
size(this.buffer[]) == 58
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 122
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(java.lang.String):::EXIT;condition="return == true"
str.toString one of { "a", "pq", "z" }
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(java.lang.String):::EXIT;condition="not(return == true)"
str.toString == "zyx"
return == false
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(org.apache.commons.lang3.text.StrMatcher):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [66, 32, 65, 49, 32, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 6, 26 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(org.apache.commons.lang3.text.StrMatcher):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(return == false)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == false)  ==>  (this.size one of { 0, 26 })
(return == true)  ==>  (orig(this.buffer[post(this.size)-1]) one of { 67, 122 })
(return == true)  ==>  (orig(this.buffer[this.size-1]) one of { 67, 122 })
(return == true)  ==>  (this.buffer[] one of { [66, 32, 65, 49, 32, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.buffer[orig(this.size)-1] one of { 67, 122 })
(return == true)  ==>  (this.buffer[this.size-1] one of { 67, 122 })
(return == true)  ==>  (this.size one of { 6, 26 })
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [66, 32, 65, 49, 32, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 6, 26 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(org.apache.commons.lang3.text.StrMatcher):::EXIT;condition="return == true"
this.buffer[] one of { [66, 32, 65, 49, 32, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 6, 26 }
return == true
this.buffer[this.size-1] one of { 67, 122 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.contains(org.apache.commons.lang3.text.StrMatcher):::EXIT;condition="not(return == true)"
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 26 }
return == false
===========================================================================
org.apache.commons.lang3.text.StrBuilder.delete(int, int):::ENTER
this.newLine == this.nullText
this.newLine == null
startIndex >= 0
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY != endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= startIndex
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size < this.buffer[startIndex]
startIndex < endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
startIndex < this.buffer[startIndex]
endIndex != size(this.buffer[])
endIndex != size(this.buffer[])-1
endIndex > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
endIndex != this.buffer[this.size]
endIndex != this.buffer[startIndex]
size(this.buffer[]) <= this.buffer[startIndex]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[startIndex]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.delete(int, int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] >= orig(this.buffer[]) (lexically)
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.newLine == null
size(this.buffer[]) one of { 32, 35 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 32, 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(endIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(endIndex)])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(endIndex)]) in this.buffer[]
this.size <= orig(this.size)
this.size >= orig(startIndex)
this.size != orig(endIndex)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size]
this.size < this.buffer[orig(startIndex)]
this.size < orig(this.buffer[startIndex])
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[orig(startIndex)] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < this.buffer[this.size]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(startIndex)]
orig(this.size) != orig(this.buffer[post(endIndex)])
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < this.buffer[this.size]
orig(startIndex) < this.buffer[orig(startIndex)]
orig(endIndex) != size(this.buffer[])
orig(endIndex) != size(this.buffer[])-1
orig(endIndex) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(endIndex) != this.buffer[this.size]
orig(endIndex) != this.buffer[orig(this.size)]
orig(endIndex) != this.buffer[orig(startIndex)]
orig(endIndex) != orig(this.buffer[post(endIndex)])
size(this.buffer[]) <= this.buffer[this.size]
size(this.buffer[]) <= this.buffer[orig(startIndex)]
size(this.buffer[]) != orig(this.buffer[post(endIndex)])
size(this.buffer[]) <= orig(this.buffer[startIndex])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < orig(this.buffer[startIndex])
this.buffer[this.size] >= this.buffer[orig(startIndex)]
this.buffer[this.size] >= orig(this.buffer[startIndex])
this.buffer[orig(this.size)] <= orig(this.buffer[post(endIndex)])
this.buffer[orig(startIndex)] >= orig(this.buffer[startIndex])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(char):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 32, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97, 99 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.newLine == null
size(this.buffer[]) one of { 32, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 97, 99 }
orig(this.buffer[post(this.size)]) one of { 0, 98, 99 }
orig(this.buffer[post(this.size)]) in this.buffer[]
this.buffer[this.size] in orig(this.buffer[])
this.buffer[this.size] % orig(ch) == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(java.lang.String):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 32, 40, 77 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 32 }
this.buffer[this.size] one of { 0, 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.newLine == null
size(this.buffer[]) one of { 32, 40, 77 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 37 }
this.buffer[orig(this.size)] one of { 0, 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)])
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) in this.buffer[]
this.size <= orig(this.size)
this.size < size(this.buffer[])-1
str.toString == orig(str.toString)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.buffer[])
this.buffer[this.size] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) != orig(this.buffer[post(this.size)])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] >= orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) <= this.buffer[this.size]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) <= orig(this.buffer[post(this.size)])
this.buffer[this.size] >= this.buffer[orig(this.size)]
this.buffer[orig(this.size)] <= orig(this.buffer[post(this.size)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(org.apache.commons.lang3.text.StrMatcher):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 48, 120, 65, 49, 65, 50, 121, 65, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 120, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 10 }
this.newLine == null
matcher.getClass().getName() == org.apache.commons.lang3.text.StrBuilderTest$1.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 35, 42 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteAll(org.apache.commons.lang3.text.StrMatcher):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 35, 42 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 65 }
orig(this.buffer[post(this.size)]) one of { 0, 120 }
orig(this.buffer[post(this.size)]) in this.buffer[]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
this.buffer[this.size] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteCharAt(int):::ENTER
this.newLine == this.nullText
index == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
this.newLine == null
size(this.buffer[]) == 35
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 99
this.buffer[index] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteCharAt(int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(index) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(index) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(index) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(index) == this.buffer[orig(this.size)]
orig(index) == return.buffer[orig(this.size)]
orig(index) == orig(this.buffer[this.size])
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[this.size] == this.buffer[this.size-1]
this.buffer[this.size] == this.buffer[return.size-1]
this.buffer[this.size] == this.buffer[orig(this.size)-1]
this.buffer[this.size] == return.buffer[this.size-1]
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == return.buffer[return.size-1]
this.buffer[this.size] == return.buffer[orig(this.size)-1]
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[this.size-1])
this.buffer[orig(index)] == orig(this.buffer[post(this.size)-1])
this.buffer[orig(index)] == orig(this.buffer[post(return.size)-1])
this.buffer has only one value
this.buffer[] == [98, 99, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 98, 99 }
this.size == 2
this.newLine == null
return has only one value
orig(index) == 0
size(this.buffer[]) == 35
this.buffer[this.size] == 99
this.buffer[orig(index)] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(char):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 32, 37 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.newLine == null
size(this.buffer[]) one of { 32, 37 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97 }
this.buffer[orig(this.size)] one of { 0, 97 }
97 * this.size - 97 * orig(this.size) + this.buffer[this.size] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(java.lang.String):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 32, 40, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.newLine == null
size(this.buffer[]) one of { 32, 40, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(this.size)] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size <= orig(this.size)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.toString == orig(str.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[this.size] >= this.buffer[orig(this.size)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(org.apache.commons.lang3.text.StrMatcher):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 48, 120, 65, 49, 65, 50, 121, 65, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 120, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3, 10 }
this.newLine == null
matcher.getClass().getName() == org.apache.commons.lang3.text.StrBuilderTest$1.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 35, 42 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteFirst(org.apache.commons.lang3.text.StrMatcher):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 35, 42 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 65 }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteImpl(int, int, int):::ENTER
this.newLine == this.nullText
this.newLine == null
startIndex >= 0
endIndex >= 1
len >= 1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 32, 37 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY != endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY > len
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[endIndex]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[endIndex-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[len-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > len
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[len]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[len-1]
this.size > startIndex
this.size >= endIndex
this.size >= len
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size != this.buffer[this.size-1]
this.size != this.buffer[startIndex]
this.size != this.buffer[endIndex]
this.size != this.buffer[endIndex-1]
this.size != this.buffer[len]
this.size != this.buffer[len-1]
startIndex < endIndex
startIndex < size(this.buffer[])-1
startIndex != this.buffer[this.size-1]
startIndex != this.buffer[startIndex]
startIndex < this.buffer[endIndex-1]
startIndex <= this.buffer[len]
startIndex < this.buffer[len-1]
endIndex >= len
endIndex < size(this.buffer[])-1
endIndex != this.buffer[this.size-1]
endIndex != this.buffer[startIndex]
endIndex != this.buffer[endIndex]
endIndex <= this.buffer[endIndex-1]
endIndex != this.buffer[len]
endIndex < this.buffer[len-1]
len < size(this.buffer[])-1
len != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
len != this.buffer[this.size]
len < this.buffer[this.size-1]
len < this.buffer[startIndex]
len != this.buffer[endIndex]
len < this.buffer[endIndex-1]
len != this.buffer[len]
len < this.buffer[len-1]
size(this.buffer[]) != this.buffer[endIndex]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[this.size-1]
size(this.buffer[])-1 != this.buffer[startIndex]
size(this.buffer[])-1 != this.buffer[endIndex]
size(this.buffer[])-1 != this.buffer[endIndex-1]
size(this.buffer[])-1 != this.buffer[len]
size(this.buffer[])-1 != this.buffer[len-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[endIndex-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[len-1]
this.buffer[this.size] <= this.buffer[len]
startIndex - endIndex + len == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.deleteImpl(int, int, int):::EXIT
this.buffer == orig(this.buffer)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 37 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[orig(endIndex)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(len)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(len)-1]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) in this.buffer[]
orig(this.buffer[endIndex]) in this.buffer[]
this.size < orig(this.size)
this.size >= orig(startIndex)
this.size < size(this.buffer[])-1
this.size != this.buffer[this.size]
this.size != this.buffer[orig(this.size)-1]
this.size != this.buffer[orig(startIndex)]
this.size < this.buffer[orig(endIndex)-1]
this.size <= this.buffer[orig(len)]
this.size < this.buffer[orig(len)-1]
this.size != orig(this.buffer[startIndex])
this.size != orig(this.buffer[endIndex-1])
this.size != orig(this.buffer[len-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(this.buffer[])
this.buffer[orig(startIndex)] in orig(this.buffer[])
this.buffer[orig(endIndex)] in orig(this.buffer[])
this.buffer[orig(endIndex)-1] in orig(this.buffer[])
this.buffer[orig(len)] in orig(this.buffer[])
this.buffer[orig(len)-1] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.size) != this.buffer[this.size]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) != this.buffer[orig(this.size)-1]
orig(this.size) != this.buffer[orig(startIndex)]
orig(this.size) != this.buffer[orig(endIndex)]
orig(this.size) != this.buffer[orig(endIndex)-1]
orig(this.size) != this.buffer[orig(len)]
orig(this.size) < this.buffer[orig(len)-1]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) < this.buffer[this.size]
orig(startIndex) != this.buffer[orig(this.size)-1]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) < this.buffer[orig(endIndex)-1]
orig(startIndex) <= this.buffer[orig(len)]
orig(startIndex) < this.buffer[orig(len)-1]
orig(endIndex) < size(this.buffer[])-1
orig(endIndex) <= this.buffer[this.size]
orig(endIndex) != this.buffer[orig(this.size)-1]
orig(endIndex) != this.buffer[orig(startIndex)]
orig(endIndex) != this.buffer[orig(endIndex)]
orig(endIndex) <= this.buffer[orig(endIndex)-1]
orig(endIndex) != this.buffer[orig(len)]
orig(endIndex) < this.buffer[orig(len)-1]
orig(len) < size(this.buffer[])-1
orig(len) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(len) < this.buffer[this.size]
orig(len) != this.buffer[orig(this.size)]
orig(len) < this.buffer[orig(this.size)-1]
orig(len) < this.buffer[orig(startIndex)]
orig(len) != this.buffer[orig(endIndex)]
orig(len) < this.buffer[orig(endIndex)-1]
orig(len) != this.buffer[orig(len)]
orig(len) < this.buffer[orig(len)-1]
size(this.buffer[]) <= this.buffer[orig(len)-1]
size(this.buffer[]) != orig(this.buffer[endIndex])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(this.size)-1]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != this.buffer[orig(endIndex)]
size(this.buffer[])-1 != this.buffer[orig(endIndex)-1]
size(this.buffer[])-1 != this.buffer[orig(len)]
size(this.buffer[])-1 != orig(this.buffer[startIndex])
size(this.buffer[])-1 != orig(this.buffer[endIndex])
size(this.buffer[])-1 != orig(this.buffer[endIndex-1])
size(this.buffer[])-1 != orig(this.buffer[len])
size(this.buffer[])-1 != orig(this.buffer[len-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] >= orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] % this.buffer[this.size] == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(endIndex)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(len)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(len)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] % orig(this.buffer[endIndex-1]) == 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[endIndex-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[len-1])
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) <= this.buffer[this.size]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) != this.buffer[orig(this.size)-1]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) != this.buffer[orig(startIndex)]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) <= this.buffer[orig(endIndex)-1]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) <= this.buffer[orig(len)]
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) < this.buffer[orig(len)-1]
this.buffer[orig(this.size)] <= this.buffer[orig(len)]
this.buffer[orig(this.size)] <= orig(this.buffer[len])
this.buffer[orig(len)-1] >= orig(this.buffer[len-1])
this.size - orig(this.size) + orig(len) == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2216
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.newLine == orig(str)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == false
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2216;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2220
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str.toString == ""
return == true
orig(str) has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2220;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2223
return == false
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2223;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2228
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
str.toString == "cba"
return == false
orig(str) has only one value
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2228;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2231
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
str.toString one of { "abc", "bc", "c" }
return == true
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT2231;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.endsWith(java.lang.String):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[])-1 != 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > capacity
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::EXIT
this.buffer == return.buffer
this.buffer[] == return.buffer[]
this.buffer[] >= orig(this.buffer[]) (lexically)
this.size == return.size
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.newLine == null
return != null
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.size < size(this.buffer[])-1
this.size <= orig(size(this.buffer[]))
this.size != orig(size(this.buffer[]))-1
orig(capacity) <= size(this.buffer[])
size(this.buffer[]) >= orig(size(this.buffer[]))
size(this.buffer[])-1 != orig(size(this.buffer[]))
size(this.buffer[])-1 >= orig(size(this.buffer[]))-1
size(this.buffer[])-1 != this.buffer[this.size]
orig(size(this.buffer[]))-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT2845
(return == false)  ==>  (orig(this.buffer[post(this.size)-1]) == 99)
(return == false)  ==>  (orig(this.buffer[this.size-1]) == 99)
(return == false)  ==>  (this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.buffer[orig(this.size)-1] == 99)
(return == false)  ==>  (this.buffer[this.size-1] == 99)
(return == false)  ==>  (this.size == 3)
(return == true)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.size one of { 0, 3 })
orig(obj) has only one value
orig(obj.getClass().getName()) == org.apache.commons.lang3.text.StrBuilder.class
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT2845;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT2845;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT2847
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
return == false
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT2847;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(return == false)  ==>  (orig(this.buffer[post(this.size)-1]) == 99)
(return == false)  ==>  (orig(this.buffer[this.size-1]) == 99)
(return == false)  ==>  (this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.buffer[orig(this.size)-1] == 99)
(return == false)  ==>  (this.buffer[this.size-1] == 99)
(return == false)  ==>  (this.size == 3)
(return == true)  ==>  (orig(obj) has only one value)
(return == true)  ==>  (orig(obj.getClass().getName()) == org.apache.commons.lang3.text.StrBuilder.class)
(return == true)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.size one of { 0, 3 })
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
orig(obj) has only one value
orig(obj.getClass().getName()) == org.apache.commons.lang3.text.StrBuilder.class
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(java.lang.Object):::EXIT;condition="not(return == true)"
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
return == false
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(other.buffer[])
this.newLine == this.nullText
this.newLine == other.newLine
this.newLine == other.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[other.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
other.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
other.buffer[] elements >= 0
other.size one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[other.size] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[other.size]
other.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > other.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[other.size]
this.buffer[] >= other.buffer[] (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= other.size
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size < size(this.buffer[])-1
other.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[other.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2820
this.buffer == other.buffer
this.buffer == orig(other.buffer)
this.buffer[] == other.buffer[]
this.buffer[] == orig(other.buffer[])
this.size == other.size
this.size == orig(other.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[other.size]
this.size == this.buffer[orig(this.size)]
this.size == this.buffer[orig(other.size)]
this.size == other.buffer[this.size]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(other.buffer[post(this.size)])
this.size == other.buffer[other.size]
this.size == other.buffer[orig(this.size)]
this.size == other.buffer[orig(other.size)]
this.size == orig(this.buffer[post(other.size)])
this.size == orig(other.buffer[post(other.size)])
this.size == orig(this.buffer[this.size])
this.size == orig(this.buffer[other.size])
this.size == orig(other.buffer[this.size])
this.size == orig(other.buffer[other.size])
orig(this) == orig(other)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == true
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2820;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2823
other.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == this.buffer[this.size]
other.size == this.buffer[orig(this.size)]
other.size == other.buffer[this.size]
other.size == other.buffer[this.size-1]
other.size == orig(this.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)-1])
other.size == other.buffer[other.size]
other.size == other.buffer[orig(this.size)]
other.size == other.buffer[orig(this.size)-1]
other.size == other.buffer[orig(other.size)]
other.size == orig(other.buffer[post(other.size)])
other.size == orig(this.buffer[this.size])
other.size == orig(other.buffer[this.size])
other.size == orig(other.buffer[this.size-1])
other.size == orig(other.buffer[other.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
other.buffer has only one value
other.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
other.buffer[] elements == 0
other.size == 0
return == false
orig(this) has only one value
orig(other) has only one value
this.buffer[this.size-1] == 99
this.buffer[other.size] == 97
other.buffer[] elements == other.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2823;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2829
this.size == other.size
this.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
other.buffer has only one value
other.buffer[] == [65, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
return == false
orig(this) has only one value
orig(other) has only one value
this.buffer[this.size-1] == 99
other.buffer[this.size-1] == 67
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2829;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2832
this.buffer[] == other.buffer[]
this.buffer[] == orig(other.buffer[])
this.size == other.size
this.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
this.buffer has only one value
other.buffer has only one value
return == true
orig(this) has only one value
orig(other) has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT2832;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(other.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == other.newLine
this.newLine == other.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(other.newLine)
this.newLine == orig(other.nullText)
other.buffer == orig(other.buffer)
other.buffer[] == orig(other.buffer[])
other.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[other.size])
(return == false)  ==>  (orig(other) has only one value)
(return == false)  ==>  (orig(other.buffer[post(this.size)-1]) one of { 0, 67 })
(return == false)  ==>  (orig(other.buffer[this.size-1]) one of { 0, 67 })
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(this.buffer[post(this.size)-1]) == 99)
(return == false)  ==>  (orig(this.buffer[this.size-1]) == 99)
(return == false)  ==>  (other.buffer has only one value)
(return == false)  ==>  (other.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == false)  ==>  (other.buffer[orig(this.size)-1] one of { 0, 67 })
(return == false)  ==>  (other.buffer[this.size-1] one of { 0, 67 })
(return == false)  ==>  (this.buffer has only one value)
(return == false)  ==>  (this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.buffer[orig(this.size)-1] == 99)
(return == false)  ==>  (this.buffer[other.size] one of { 0, 97 })
(return == false)  ==>  (this.buffer[this.size-1] == 99)
(return == false)  ==>  (this.size == 3)
(return == true)  ==>  (other.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.buffer[] == other.buffer[])
(return == true)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size])
(return == true)  ==>  (this.buffer[other.size] == 0)
(return == true)  ==>  (this.size == other.size)
(return == true)  ==>  (this.size one of { 0, 3 })
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
other.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
other.buffer[] elements >= 0
other.size one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[other.size] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[other.size]
other.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > other.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[other.size]
this.buffer[] >= other.buffer[] (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= other.size
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size < size(this.buffer[])-1
other.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[other.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT;condition="return == true"
this.buffer[] == other.buffer[]
this.buffer[] == orig(other.buffer[])
this.size == other.size
this.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equals(org.apache.commons.lang3.text.StrBuilder):::EXIT;condition="not(return == true)"
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
other.buffer has only one value
other.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 66, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
return == false
orig(this) has only one value
orig(other) has only one value
this.buffer[this.size-1] == 99
other.buffer[this.size-1] one of { 0, 67 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(other.buffer[])
this.newLine == this.nullText
this.newLine == other.newLine
this.newLine == other.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[other.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
other.buffer[] elements >= 0
other.size one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[other.size] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[other.size]
other.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > other.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[other.size]
this.buffer[] >= other.buffer[] (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= other.size
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size < size(this.buffer[])-1
other.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[other.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2794
this.buffer == other.buffer
this.buffer == orig(other.buffer)
this.buffer[] == other.buffer[]
this.buffer[] == orig(other.buffer[])
this.size == other.size
this.size == orig(other.size)
orig(this) == orig(other)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2794;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2797
other.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == this.buffer[this.size]
other.size == this.buffer[orig(this.size)]
other.size == other.buffer[this.size]
other.size == other.buffer[this.size-1]
other.size == orig(this.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)-1])
other.size == other.buffer[other.size]
other.size == other.buffer[orig(this.size)]
other.size == other.buffer[orig(this.size)-1]
other.size == other.buffer[orig(other.size)]
other.size == orig(other.buffer[post(other.size)])
other.size == orig(this.buffer[this.size])
other.size == orig(other.buffer[this.size])
other.size == orig(other.buffer[this.size-1])
other.size == orig(other.buffer[other.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
other.buffer has only one value
other.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
other.buffer[] elements == 0
other.size == 0
return == false
orig(this) has only one value
orig(other) has only one value
this.buffer[this.size-1] == 99
this.buffer[other.size] == 97
other.buffer[] elements == other.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2797;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2808
this.size == other.size
this.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
this.buffer has only one value
other.buffer has only one value
return == true
orig(this) has only one value
orig(other) has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT2808;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(other.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == other.newLine
this.newLine == other.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == orig(other.newLine)
this.newLine == orig(other.nullText)
other.buffer == orig(other.buffer)
other.buffer[] == orig(other.buffer[])
other.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == other.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(other.buffer[other.size])
(return == false)  <==>  (this.buffer[other.size] == 97)
(return == false)  ==>  (orig(other) has only one value)
(return == false)  ==>  (orig(other.buffer[post(this.size)-1]) == 0)
(return == false)  ==>  (orig(other.buffer[this.size-1]) == 0)
(return == false)  ==>  (orig(this) has only one value)
(return == false)  ==>  (orig(this.buffer[post(this.size)-1]) == 99)
(return == false)  ==>  (orig(this.buffer[this.size-1]) == 99)
(return == false)  ==>  (other.buffer has only one value)
(return == false)  ==>  (other.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (other.buffer[] elements == 0)
(return == false)  ==>  (other.buffer[] elements == orig(other.buffer[post(this.size)-1]))
(return == false)  ==>  (other.buffer[] elements == orig(other.buffer[this.size-1]))
(return == false)  ==>  (other.buffer[] elements == other.buffer[orig(this.size)-1])
(return == false)  ==>  (other.buffer[] elements == other.buffer[this.size-1])
(return == false)  ==>  (other.buffer[] elements == other.size)
(return == false)  ==>  (other.buffer[] elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(return == false)  ==>  (other.buffer[orig(this.size)-1] == 0)
(return == false)  ==>  (other.buffer[this.size-1] == 0)
(return == false)  ==>  (other.size == 0)
(return == false)  ==>  (other.size == orig(other.buffer[post(this.size)-1]))
(return == false)  ==>  (other.size == orig(other.buffer[this.size-1]))
(return == false)  ==>  (other.size == other.buffer[orig(this.size)-1])
(return == false)  ==>  (other.size == other.buffer[this.size-1])
(return == false)  ==>  (other.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(return == false)  ==>  (this.buffer has only one value)
(return == false)  ==>  (this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
(return == false)  ==>  (this.buffer[orig(this.size)-1] == 99)
(return == false)  ==>  (this.buffer[this.size-1] == 99)
(return == false)  ==>  (this.size == 3)
(return == true)  <==>  (other.size >= this.buffer[other.size])
(return == true)  <==>  (size(this.buffer[])-1 > this.buffer[other.size])
(return == true)  <==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size])
(return == true)  <==>  (this.buffer[other.size] == 0)
(return == true)  <==>  (this.size == other.size)
(return == true)  <==>  (this.size >= this.buffer[other.size])
(return == true)  ==>  (other.buffer[] elements >= this.buffer[other.size])
(return == true)  ==>  (other.size one of { 0, 3 })
(return == true)  ==>  (this.buffer[] elements >= this.buffer[other.size])
(return == true)  ==>  (this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(return == true)  ==>  (this.size one of { 0, 3 })
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
other.buffer[] elements >= 0
other.size one of { 0, 3 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[other.size] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[other.size]
other.buffer[] elements < org.apache.commons.lang3.text.StrBuilder.serialVersionUID
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > other.size
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[other.size]
this.buffer[] >= other.buffer[] (elementwise)
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= other.size
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size < size(this.buffer[])-1
other.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[other.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT;condition="return == true"
this.size == other.size
this.size == orig(other.size)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[other.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(other.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(other.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[other.size])
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.equalsIgnoreCase(org.apache.commons.lang3.text.StrBuilder):::EXIT;condition="not(return == true)"
other.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == other.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
other.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == orig(other.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
other.size == this.buffer[this.size]
other.size == this.buffer[orig(this.size)]
other.size == other.buffer[this.size]
other.size == other.buffer[this.size-1]
other.size == orig(this.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)])
other.size == orig(other.buffer[post(this.size)-1])
other.size == other.buffer[other.size]
other.size == other.buffer[orig(this.size)]
other.size == other.buffer[orig(this.size)-1]
other.size == other.buffer[orig(other.size)]
other.size == orig(other.buffer[post(other.size)])
other.size == orig(this.buffer[this.size])
other.size == orig(other.buffer[this.size])
other.size == orig(other.buffer[this.size-1])
other.size == orig(other.buffer[other.size])
this.buffer has only one value
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
other.buffer has only one value
other.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
other.buffer[] elements == 0
other.size == 0
return == false
orig(this) has only one value
orig(other) has only one value
this.buffer[this.size-1] == 99
this.buffer[other.size] == 97
other.buffer[] elements == other.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(char[]):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
destination[] elements == 0
destination[] one of { [0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
size(destination[]) one of { 4, 5, 10 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
destination[] elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in destination[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(char[]):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
return[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0] }
return[] elements >= 0
size(return[]) one of { 5, 10 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
orig(destination[]) elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] in orig(destination[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
destination[startIndex] == destination[destinationIndex]
this.buffer[] one of { [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 5, 9 }
this.newLine == null
startIndex one of { 0, 1 }
destination[] elements >= 0
destinationIndex one of { 0, 1, 3 }
size(this.buffer[]) one of { 32, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 116
this.buffer[startIndex] one of { 106, 111, 115 }
destination[startIndex] one of { 0, 109 }
destination[startIndex] in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getChars(int, int, char[], int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(startIndex)] == destination[orig(destinationIndex)]
orig(this.buffer[post(startIndex)]) == destination[orig(destinationIndex)]
destination[orig(destinationIndex)] == orig(this.buffer[startIndex])
orig(destination[post(destinationIndex)]) == orig(destination[startIndex])
this.buffer[] one of { [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [115, 111, 109, 101, 32, 116, 101, 120, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 5, 9 }
this.newLine == null
destination[] elements >= 0
size(this.buffer[]) one of { 32, 41 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] == 116
destination[orig(destinationIndex)] one of { 106, 111, 115 }
destination[orig(startIndex)] in this.buffer[]
orig(destination[startIndex]) in this.buffer[]
this.buffer[orig(endIndex)-1] in destination[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNewLineText():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.nullText == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNewLineText():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.newLine == return
this.nullText == orig(this.nullText)
return == orig(this.newLine)
this.buffer has only one value
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.nullText == null
return.toString one of { "", "#" }
this.buffer[] elements == this.size
this.newLine.toString == return.toString
return.toString == orig(this.newLine.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.getNullText():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.newLine == orig(this.newLine)
this.nullText == return
return == orig(this.nullText)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
return.toString one of { "NULL", "null" }
this.buffer[] elements == this.size
this.nullText.toString == return.toString
return.toString == orig(this.nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.hashCode():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.hashCode():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
return one of { 0, 98274 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
size(this.buffer[]) one of { 36, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 98, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
return one of { -1, 0, 1 }
size(this.buffer[]) one of { 36, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 98, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < ch
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > ch
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < ch
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
ch > startIndex
ch > size(this.buffer[])
ch > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
startIndex < size(this.buffer[])-1
startIndex < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char, int):::EXIT2418
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[startIndex])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
return == -1
orig(this) has only one value
orig(ch) == 97
orig(startIndex) one of { 4, 5 }
size(this.buffer[]) == 36
this.buffer[this.size-1] == 98
this.buffer[orig(startIndex)-1] one of { 0, 98 }
orig(ch) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char, int):::EXIT2423
orig(ch) == this.buffer[return]
orig(ch) == orig(this.buffer[post(return)])
return >= 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)])
this.size > orig(startIndex)
this.size < orig(this.buffer[post(startIndex)])
return >= orig(startIndex)
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(ch) >= this.buffer[this.size]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) < orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)])
this.buffer[this.size] <= this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char, int):::EXIT2426
return == -1
orig(startIndex) >= 0
this.buffer[this.size] one of { 0, 98, 116 }
this.buffer[orig(startIndex)] one of { 97, 98, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.buffer[] elements > return
this.size > orig(startIndex)
this.size < this.buffer[orig(startIndex)]
return < orig(startIndex)
return < this.buffer[this.size]
return < this.buffer[orig(startIndex)]
orig(ch) != this.buffer[this.size]
orig(ch) != this.buffer[this.size-1]
orig(ch) != this.buffer[orig(startIndex)]
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < this.buffer[orig(startIndex)]
size(this.buffer[]) < this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(startIndex)]
this.buffer[this.size-1] >= this.buffer[orig(startIndex)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(char, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == null
return >= -1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > return
this.size < orig(ch)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != orig(this.buffer[post(startIndex)])
return < orig(ch)
return < size(this.buffer[])-1
return < this.buffer[this.size-1]
return < orig(this.buffer[post(startIndex)])
orig(ch) > size(this.buffer[])
orig(ch) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) != orig(this.buffer[post(startIndex)])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) != orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
size(this.buffer[]) one of { 36, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 98, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] != this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [111, 110, 101, 116, 119, 111, 116, 104, 114, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
return one of { -1, 0, 1 }
size(this.buffer[]) one of { 36, 43 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 116 }
this.buffer[this.size-1] one of { 98, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > return
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
str.toString == orig(str.toString)
return < size(this.buffer[])-1
return < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] != this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::ENTER
this.newLine == this.nullText
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 32, 37 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
this.size < size(this.buffer[])-1
startIndex < size(this.buffer[])-1
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2454
return == -1
orig(startIndex) >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.buffer[] elements > return
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
return < orig(startIndex)
return < this.buffer[this.size]
return < this.buffer[orig(startIndex)]
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(startIndex)]
this.buffer[this.size] <= this.buffer[orig(startIndex)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2458
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(str) != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > orig(startIndex)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < orig(this.buffer[post(startIndex)])
return < this.buffer[this.size-1]
return < orig(this.buffer[post(startIndex)])
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) < orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)])
this.buffer[this.size] <= this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2461
return == orig(startIndex)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
str.toString == ""
return one of { 0, 1 }
orig(this) has only one value
orig(str) has only one value
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 98
this.buffer[return] one of { 97, 98 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2464
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
orig(startIndex) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[orig(this.size)]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
str.toString == "abcdef"
return == -1
orig(this) has only one value
orig(str) has only one value
orig(startIndex) == 0
size(this.buffer[]) == 36
this.buffer[this.size-1] == 98
this.buffer[orig(startIndex)] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2475
return >= 0
orig(str) != null
orig(startIndex) one of { 0, 1, 2 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] one of { 0, 66, 115 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.size > orig(startIndex)
this.size != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size]
this.size != this.buffer[this.size-1]
this.size != this.buffer[return]
this.size != this.buffer[orig(startIndex)]
return >= orig(startIndex)
return != this.buffer[this.size-1]
return != this.buffer[return]
return != this.buffer[orig(startIndex)]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[return]
orig(startIndex) < this.buffer[orig(startIndex)]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[]) != this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[return]
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size-1]
size(this.buffer[])-1 != this.buffer[return]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] != this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] != this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] != this.buffer[orig(startIndex)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT2477
return == -1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] one of { 0, 66 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 37 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(java.lang.String, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == null
return >= -1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 32, 37 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.size > return
this.size < size(this.buffer[])-1
str.toString == orig(str.toString)
return < size(this.buffer[])-1
return != orig(this.buffer[post(startIndex)])
orig(startIndex) < size(this.buffer[])-1
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5, 17 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5, 17 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return >= -1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > return
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
size(this.buffer[]) one of { 32, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
startIndex < size(this.buffer[])-1
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2509
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5, 26 }
return == -1
orig(startIndex) >= 0
this.buffer[orig(startIndex)] one of { 0, 97 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.buffer[] elements > return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
return < orig(startIndex)
return < this.buffer[orig(startIndex)]
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(startIndex)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2515
return >= 0
orig(matcher) != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
this.size > orig(startIndex)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size < this.buffer[return]
this.size < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
return >= orig(startIndex)
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
return < this.buffer[this.size-1]
return < this.buffer[return]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[return]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) <= this.buffer[return]
size(this.buffer[]) <= orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < orig(this.buffer[post(startIndex)])
this.buffer[this.size-1] != orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2518
this.buffer[] one of { [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 65, 50, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 5, 25, 26 }
return == -1
orig(startIndex) >= 0
this.buffer[this.size-1] one of { 50, 100, 122 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.buffer[] elements > return
this.size > orig(startIndex)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(startIndex)]
return < orig(startIndex)
return < this.buffer[this.size-1]
return < this.buffer[orig(startIndex)]
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[orig(startIndex)]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(startIndex)]
this.buffer[this.size-1] >= this.buffer[orig(startIndex)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.indexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return >= -1
size(this.buffer[]) one of { 32, 58 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > return
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < size(this.buffer[])-1
return < orig(this.buffer[post(startIndex)])
orig(startIndex) < size(this.buffer[])-1
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::ENTER
this.newLine == this.nullText
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
(this.size == 0)  <==>  (return == true)
(this.size == 0)  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size)
(this.size == 0)  ==>  (this.buffer[] elements >= this.size)
(this.size == 0)  ==>  (this.size != size(this.buffer[])-1)
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="return == true"
this.size == 0
return == true
this.buffer[] elements >= this.size
this.size != size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.isEmpty():::EXIT;condition="not(return == true)"
return == false
size(this.buffer[]) one of { 32, 33, 64 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 50 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.size != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size != this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[this.size-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
this.newLine == null
ch one of { 97, 98, 122 }
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
this.newLine == null
return one of { -1, 2, 3 }
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 98
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [120, 121, 122, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
ch one of { 97, 98, 122 }
size(this.buffer[]) one of { 36, 38 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < ch
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > ch
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < ch
this.size >= startIndex
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < this.buffer[this.size-1]
ch > startIndex
ch > size(this.buffer[])
ch > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
startIndex < size(this.buffer[])-1
startIndex < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int):::EXIT2542
return == orig(startIndex)
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
return == -1
orig(this) has only one value
orig(ch) == 97
size(this.buffer[]) == 36
this.buffer[this.size-1] == 98
orig(ch) in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int):::EXIT2546
orig(ch) == this.buffer[return]
orig(ch) == orig(this.buffer[post(return)])
return >= 0
this.buffer[orig(startIndex)] one of { 0, 97, 98 }
orig(this.buffer[post(startIndex)]) one of { 97, 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.size != this.buffer[orig(startIndex)]
this.size < orig(this.buffer[post(startIndex)])
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
return != this.buffer[orig(startIndex)]
return < orig(this.buffer[post(startIndex)])
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[]) < orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)])
this.buffer[this.size-1] >= this.buffer[orig(startIndex)]
this.buffer[this.size-1] >= orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] % orig(this.buffer[post(startIndex)]) == 0
this.buffer[orig(startIndex)] <= orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int):::EXIT2549
return == -1
orig(ch) == 122
orig(startIndex) one of { 1, 2, 3 }
this.buffer[orig(startIndex)] one of { 97, 98, 121 }
this.buffer[orig(startIndex)-1] one of { 97, 98, 120 }
size(this.buffer[]) % orig(startIndex) == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(char, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [120, 121, 122, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
return >= -1
size(this.buffer[]) one of { 36, 38 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > return
this.size < orig(ch)
this.size >= orig(startIndex)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < this.buffer[this.size-1]
return < orig(ch)
return <= orig(startIndex)
return < size(this.buffer[])-1
return < this.buffer[this.size-1]
orig(ch) > size(this.buffer[])
orig(ch) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
this.newLine == null
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 98
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[] elements <= this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
this.newLine == null
size(this.buffer[]) == 36
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 98
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[] elements <= this.buffer[this.size-1]
this.size > return
str.toString == orig(str.toString)
return < size(this.buffer[])-1
return != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
return < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [120, 121, 122, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
size(this.buffer[]) one of { 36, 38 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < this.buffer[this.size-1]
startIndex < size(this.buffer[])-1
startIndex < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT2577
str.toString == "a"
return == -1
orig(startIndex) one of { -1, 2, 3 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT2582
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
str.toString one of { "a", "b", "z" }
orig(str) != null
size(this.buffer[]) == 36
this.buffer[this.size-1] == 98
orig(this.buffer[post(startIndex)]) one of { 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.buffer[] elements <= this.buffer[this.size-1]
this.size != this.buffer[orig(startIndex)]
this.size < orig(this.buffer[post(startIndex)])
return != this.buffer[orig(startIndex)]
return < orig(this.buffer[post(startIndex)])
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[]) < orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)])
this.buffer[this.size-1] >= this.buffer[orig(startIndex)]
this.buffer[this.size-1] >= orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] % orig(this.buffer[post(startIndex)]) == 0
this.buffer[orig(startIndex)] <= orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT2592
str.toString one of { "ab", "ba", "za" }
return one of { 0, 1, 2 }
this.buffer[return] one of { 97, 98, 122 }
this.buffer[orig(startIndex)] one of { 0, 97, 98 }
this.buffer[orig(startIndex)-1] one of { 97, 98, 99 }
orig(this.buffer[post(startIndex)]) one of { 97, 98, 99 }
orig(this.buffer[post(startIndex)-1]) one of { 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(startIndex)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(startIndex)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)-1])
this.size >= orig(startIndex)
this.size < this.buffer[return]
this.size != this.buffer[orig(startIndex)]
this.size < this.buffer[orig(startIndex)-1]
this.size < orig(this.buffer[post(startIndex)])
this.size < orig(this.buffer[post(startIndex)-1])
return < orig(startIndex)
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
return < this.buffer[return]
return != this.buffer[orig(startIndex)]
return < this.buffer[orig(startIndex)-1]
return < orig(this.buffer[post(startIndex)])
return < orig(this.buffer[post(startIndex)-1])
orig(startIndex) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < this.buffer[return]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) < this.buffer[orig(startIndex)-1]
orig(startIndex) < orig(this.buffer[post(startIndex)])
orig(startIndex) < orig(this.buffer[post(startIndex)-1])
size(this.buffer[]) < this.buffer[return]
size(this.buffer[]) != this.buffer[orig(startIndex)]
size(this.buffer[]) < this.buffer[orig(startIndex)-1]
size(this.buffer[]) < orig(this.buffer[post(startIndex)])
size(this.buffer[]) < orig(this.buffer[post(startIndex)-1])
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(startIndex)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(startIndex)-1])
this.buffer[this.size-1] >= this.buffer[orig(startIndex)]
this.buffer[this.size-1] >= this.buffer[orig(startIndex)-1]
this.buffer[this.size-1] >= orig(this.buffer[post(startIndex)])
this.buffer[this.size-1] >= orig(this.buffer[post(startIndex)-1])
this.buffer[return] >= this.buffer[orig(startIndex)-1]
this.buffer[return] >= orig(this.buffer[post(startIndex)-1])
this.buffer[orig(startIndex)] != this.buffer[orig(startIndex)-1]
this.buffer[orig(startIndex)] % orig(this.buffer[post(startIndex)]) == 0
this.buffer[orig(startIndex)] <= orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] != orig(this.buffer[post(startIndex)-1])
this.buffer[orig(startIndex)-1] >= orig(this.buffer[post(startIndex)-1])
orig(this.buffer[post(startIndex)]) != orig(this.buffer[post(startIndex)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT2596
return == orig(startIndex)
this.buffer[this.size-1] == this.buffer[return]
this.buffer[return] == this.buffer[orig(this.size)-1]
this.buffer[return] == orig(this.buffer[post(this.size)-1])
this.buffer[return] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements one of { 0, 97, 98 }
this.size == 4
str.toString == ""
return one of { 1, 3 }
orig(this) has only one value
orig(str) has only one value
size(this.buffer[]) == 36
this.buffer[return] == 98
this.buffer[return-1] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT2598
str.toString one of { "abcdef", "za" }
return == -1
orig(startIndex) one of { 1, 3 }
this.buffer[orig(startIndex)] one of { 98, 121 }
this.buffer[orig(startIndex)-1] one of { 97, 120 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(java.lang.String, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[] one of { [97, 98, 97, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [120, 121, 122, 97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 4, 6 }
this.newLine == null
return >= -1
size(this.buffer[]) one of { 36, 38 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 98, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > return
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < this.buffer[this.size-1]
str.toString == orig(str.toString)
return <= orig(startIndex)
return < size(this.buffer[])-1
return < this.buffer[this.size-1]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5, 17 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5, 17 }
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > return
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
startIndex < size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2630
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
return == -1
orig(matcher.getClass().getName()) == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
this.buffer[] elements > return
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2636
this.buffer[] one of { [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 65, 50, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 5, 17, 25 }
return >= 0
orig(matcher) != null
this.buffer[this.size-1] one of { 50, 100, 110 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(startIndex)])
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size < this.buffer[return]
this.size != this.buffer[orig(startIndex)]
this.size < orig(this.buffer[post(startIndex)])
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
return <= orig(startIndex)
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
return < this.buffer[this.size-1]
return < this.buffer[return]
return < orig(this.buffer[post(startIndex)])
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[return]
orig(startIndex) != this.buffer[orig(startIndex)]
orig(startIndex) < orig(this.buffer[post(startIndex)])
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < orig(this.buffer[post(startIndex)])
this.buffer[orig(startIndex)] % orig(this.buffer[post(startIndex)]) == 0
this.buffer[orig(startIndex)] <= orig(this.buffer[post(startIndex)])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT2639
this.buffer[] one of { [97, 98, 32, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 32, 98, 100, 32, 65, 49, 32, 106, 117, 110, 99, 116, 105, 111, 110, 32, 119, 105, 116, 104, 32, 65, 50, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 5, 25 }
return == -1
orig(startIndex) one of { 0, 5, 6 }
this.buffer[this.size-1] one of { 50, 100 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
this.buffer[orig(startIndex)] % orig(this.buffer[post(startIndex)]) == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.lastIndexOf(org.apache.commons.lang3.text.StrMatcher, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return >= -1
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > return
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < size(this.buffer[])-1
orig(startIndex) < size(this.buffer[])-1
===========================================================================
org.apache.commons.lang3.text.StrBuilder.leftString(int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [108, 101, 102, 116, 32, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.leftString(int):::EXIT2296
return has only one value
return.toString == ""
orig(length) one of { -5, 0 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.leftString(int):::EXIT2298
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length-1])
return has only one value
return.toString == "left right"
orig(length) == 15
===========================================================================
org.apache.commons.lang3.text.StrBuilder.leftString(int):::EXIT2300
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[orig(length)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[post(length)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[length])
this.buffer[this.size-1] == this.buffer[orig(length)-1]
this.buffer[this.size-1] == orig(this.buffer[post(length)-1])
this.buffer[this.size-1] == orig(this.buffer[length-1])
return has only one value
return.toString == "left"
orig(length) == 4
===========================================================================
org.apache.commons.lang3.text.StrBuilder.leftString(int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [108, 101, 102, 116, 32, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
return.toString one of { "", "left", "left right" }
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::ENTER
this.newLine == this.nullText
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.length():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this.size)
this.newLine == null
return >= 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
return <= size(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.midString(int, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 32, 104, 101, 108, 108, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 19
this.newLine == null
size(this.buffer[]) == 51
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 111
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.midString(int, int):::EXIT2347
return has only one value
return.toString == ""
orig(index) one of { 0, 20 }
orig(length) one of { -1, 2 }
this.buffer[orig(index)] one of { 0, 104 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.midString(int, int):::EXIT2350
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[orig(index)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[post(index)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[index-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length-1])
return has only one value
return.toString == "hello"
orig(index) == 14
orig(length) == 22
this.buffer[orig(index)] == 104
===========================================================================
org.apache.commons.lang3.text.StrBuilder.midString(int, int):::EXIT2352
return.toString one of { "goodbye", "hello" }
orig(index) one of { -5, 0, 6 }
orig(length) one of { 5, 7 }
this.buffer[orig(length)] one of { 32, 111 }
this.buffer[orig(length)-1] one of { 103, 111 }
orig(this.buffer[post(index)]) one of { 103, 104 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.midString(int, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 32, 104, 101, 108, 108, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 19
this.newLine == null
return.toString one of { "", "goodbye", "hello" }
size(this.buffer[]) == 51
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 111
orig(this.buffer[post(index)]) one of { 0, 103, 104 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.minimizeCapacity():::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 20, 32, 64 }
this.buffer[this.size] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.minimizeCapacity():::EXIT
this.buffer == return.buffer
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(this.size)
this.size == size(this.buffer[])
this.size == size(return.buffer[])
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.readFrom(java.lang.Readable):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [84, 101, 115, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 4 }
this.newLine == null
readable != null
size(this.buffer[]) one of { 32, 36 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.readFrom(java.lang.Readable):::EXIT
this.buffer[] >= orig(this.buffer[]) (lexically)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == null
return >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 48 }
this.buffer[orig(this.size)] one of { 0, 32, 48 }
orig(this.buffer[this.size]) == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
this.buffer[] elements >= orig(this.buffer[this.size])
this.size >= return
this.size >= orig(this.size)
this.size != size(this.buffer[])-1
this.size != orig(size(this.buffer[]))-1
this.size >= orig(this.buffer[this.size])
return >= orig(this.size)
return <= size(this.buffer[])
return != size(this.buffer[])-1
return != orig(size(this.buffer[]))-1
return >= orig(this.buffer[this.size])
orig(this.buffer[]) elements >= orig(this.buffer[this.size])
orig(this.size) < size(this.buffer[])-1
orig(this.size) <= this.buffer[orig(this.size)]
orig(this.size) >= orig(this.buffer[this.size])
size(this.buffer[]) >= orig(size(this.buffer[]))
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(size(this.buffer[]))
size(this.buffer[])-1 >= orig(size(this.buffer[]))-1
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 > orig(this.buffer[this.size])
orig(size(this.buffer[])) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(size(this.buffer[])) != this.buffer[orig(this.size)]
orig(size(this.buffer[]))-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(size(this.buffer[]))-1 != this.buffer[orig(this.size)]
orig(size(this.buffer[]))-1 > orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
this.size - return - orig(this.size) == 0
this.size - return - orig(size(this.buffer[])) + 32 == 0
this.size - return - orig(size(this.buffer[]))-1 + 31 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
startIndex one of { 0, 1 }
endIndex >= 1
size(this.buffer[]) one of { 35, 37 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 97, 99 }
this.buffer[this.size-1] one of { 98, 99, 116 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY != endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size >= startIndex
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[startIndex]
startIndex <= endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
startIndex < this.buffer[this.size-1]
startIndex < this.buffer[startIndex]
endIndex != size(this.buffer[])
endIndex != size(this.buffer[])-1
endIndex > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
endIndex != this.buffer[this.size]
endIndex != this.buffer[this.size-1]
endIndex != this.buffer[startIndex]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[startIndex]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[startIndex]
this.buffer[this.size] != this.buffer[this.size-1]
this.buffer[this.size] <= this.buffer[startIndex]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replace(int, int, java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.newLine == null
size(this.buffer[]) one of { 35, 37 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 98, 99, 116 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(endIndex)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[post(endIndex)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(endIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(endIndex)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[this.size-1]) in this.buffer[]
this.size >= orig(startIndex)
this.size != orig(endIndex)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size < this.buffer[orig(startIndex)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[post(endIndex)])
this.size < orig(this.buffer[post(endIndex)-1])
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[this.size-1])
this.size < orig(this.buffer[startIndex])
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) < this.buffer[orig(startIndex)]
orig(this.size) != orig(this.buffer[post(this.size)-1])
orig(this.size) != orig(this.buffer[post(endIndex)])
orig(this.size) < orig(this.buffer[post(endIndex)-1])
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) <= this.buffer[orig(this.size)]
orig(startIndex) < this.buffer[orig(this.size)-1]
orig(startIndex) < this.buffer[orig(startIndex)]
orig(startIndex) <= orig(this.buffer[post(endIndex)])
orig(startIndex) < orig(this.buffer[post(endIndex)-1])
orig(endIndex) != size(this.buffer[])
orig(endIndex) != size(this.buffer[])-1
orig(endIndex) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(endIndex) != this.buffer[this.size]
orig(endIndex) != this.buffer[this.size-1]
orig(endIndex) != this.buffer[orig(this.size)]
orig(endIndex) != this.buffer[orig(this.size)-1]
orig(endIndex) != this.buffer[orig(startIndex)]
orig(endIndex) != orig(this.buffer[post(this.size)-1])
orig(endIndex) != orig(this.buffer[post(endIndex)])
orig(endIndex) != orig(this.buffer[post(endIndex)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) < this.buffer[orig(this.size)-1]
size(this.buffer[]) < this.buffer[orig(startIndex)]
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[post(endIndex)])
size(this.buffer[]) < orig(this.buffer[post(endIndex)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) < orig(this.buffer[this.size-1])
size(this.buffer[]) < orig(this.buffer[startIndex])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[post(endIndex)])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[post(endIndex)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[startIndex])
this.buffer[this.size] <= this.buffer[orig(this.size)-1]
this.buffer[this.size] <= this.buffer[orig(startIndex)]
this.buffer[this.size] != orig(this.buffer[post(endIndex)])
this.buffer[this.size] % orig(this.buffer[post(endIndex)-1]) == 0
this.buffer[this.size] <= orig(this.buffer[post(endIndex)-1])
this.buffer[this.size] <= orig(this.buffer[this.size-1])
this.buffer[this.size-1] >= orig(this.buffer[post(endIndex)])
this.buffer[this.size-1] > orig(this.buffer[this.size])
this.buffer[orig(this.size)] != this.buffer[orig(this.size)-1]
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(this.size)] != orig(this.buffer[post(endIndex)-1])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] != orig(this.buffer[this.size-1])
this.buffer[orig(this.size)] != orig(this.buffer[startIndex])
this.buffer[orig(this.size)-1] != orig(this.buffer[post(endIndex)])
this.buffer[orig(this.size)-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] <= orig(this.buffer[this.size-1])
this.buffer[orig(startIndex)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(startIndex)] > orig(this.buffer[this.size])
orig(this.buffer[post(this.size)-1]) >= orig(this.buffer[this.size])
orig(this.buffer[post(endIndex)]) != orig(this.buffer[post(endIndex)-1])
orig(this.buffer[post(endIndex)]) >= orig(this.buffer[this.size])
orig(this.buffer[post(endIndex)-1]) != orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replace(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::ENTER
this.newLine == this.nullText
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
startIndex >= 0
endIndex >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97, 100 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY != endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY > replaceCount
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > replaceCount
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= startIndex
this.size != replaceCount
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
startIndex <= endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
endIndex != replaceCount
endIndex != size(this.buffer[])
endIndex != size(this.buffer[])-1
endIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
replaceCount < size(this.buffer[])-1
replaceCount != this.buffer[startIndex]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[startIndex]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[startIndex]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replace(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(endIndex)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(endIndex)])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)]) in this.buffer[]
orig(this.buffer[post(endIndex)]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size >= orig(startIndex)
this.size != orig(replaceCount)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(endIndex) != size(this.buffer[])
orig(endIndex) != size(this.buffer[])-1
orig(endIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(replaceCount) < size(this.buffer[])-1
orig(replaceCount) != this.buffer[orig(startIndex)]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) != orig(this.buffer[post(this.size)])
size(this.buffer[]) != orig(this.buffer[post(endIndex)])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) != orig(this.buffer[startIndex])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)])
size(this.buffer[])-1 != orig(this.buffer[post(endIndex)])
size(this.buffer[])-1 != orig(this.buffer[this.size])
size(this.buffer[])-1 != orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(endIndex)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[startIndex])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
orig(this.buffer[post(endIndex)]) >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(char, char):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.size == 8
this.newLine == null
size(this.buffer[]) == 40
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 97, 100 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(char, char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.size == 8
this.newLine == null
return has only one value
size(this.buffer[]) == 40
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] one of { 97, 100 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(java.lang.String, java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
size(this.buffer[]) one of { 34, 37, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 100 }
this.buffer[this.size-1] one of { 97, 98, 100 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] != this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(java.lang.String, java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == null
size(this.buffer[]) one of { 34, 37, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 98, 100 }
this.buffer[orig(this.size)] one of { 0, 100, 120 }
orig(this.buffer[post(this.size)]) one of { 0, 98, 99 }
orig(this.buffer[post(this.size)-1]) one of { 0, 97, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[post(this.size)]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size != orig(this.buffer[post(this.size)])
this.size != orig(this.buffer[post(this.size)-1])
orig(this.buffer[this.size]) % this.size == 0
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[this.size-1])
searchStr.toString == orig(searchStr.toString)
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[this.size] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) != orig(this.buffer[post(this.size)])
orig(this.size) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) < this.buffer[orig(this.size)-1]
size(this.buffer[]) != orig(this.buffer[post(this.size)])
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) < orig(this.buffer[this.size-1])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)])
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[this.size-1])
this.buffer[this.size] != this.buffer[this.size-1]
this.buffer[this.size] % this.buffer[orig(this.size)-1] == 0
this.buffer[this.size] <= this.buffer[orig(this.size)-1]
this.buffer[this.size] % orig(this.buffer[this.size-1]) == 0
this.buffer[this.size] <= orig(this.buffer[this.size-1])
this.buffer[this.size-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)] != this.buffer[orig(this.size)-1]
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] != orig(this.buffer[this.size-1])
this.buffer[orig(this.size)-1] != orig(this.buffer[post(this.size)])
this.buffer[orig(this.size)-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] >= orig(this.buffer[this.size-1])
orig(this.buffer[post(this.size)]) <= orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)]) != orig(this.buffer[this.size-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(org.apache.commons.lang3.text.StrMatcher, java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 100 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] != this.buffer[this.size-1]
50 * this.size - 50 * size(this.buffer[]) + this.buffer[this.size] + 1600 == 0
50 * this.size - 50 * size(this.buffer[])-1 + this.buffer[this.size] + 1550 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceAll(org.apache.commons.lang3.text.StrMatcher, java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 98, 100 }
orig(this.buffer[post(this.size)]) one of { 0, 98, 99 }
orig(this.buffer[post(this.size)-1]) one of { 0, 97, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[post(this.size)]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size != orig(this.buffer[post(this.size)])
this.size != orig(this.buffer[post(this.size)-1])
orig(this.buffer[this.size]) % this.size == 0
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[this.size-1])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[this.size] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) != orig(this.buffer[post(this.size)])
orig(this.size) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) <= this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) <= this.buffer[orig(this.size)-1]
size(this.buffer[]) != orig(this.buffer[post(this.size)])
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) < orig(this.buffer[this.size-1])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)])
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[this.size-1])
this.buffer[this.size] != this.buffer[this.size-1]
this.buffer[this.size] % this.buffer[orig(this.size)-1] == 0
this.buffer[this.size] <= this.buffer[orig(this.size)-1]
this.buffer[this.size] % orig(this.buffer[this.size-1]) == 0
this.buffer[this.size] <= orig(this.buffer[this.size-1])
this.buffer[this.size-1] != orig(this.buffer[this.size])
this.buffer[orig(this.size)] != this.buffer[orig(this.size)-1]
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] != orig(this.buffer[this.size-1])
this.buffer[orig(this.size)-1] != orig(this.buffer[post(this.size)])
this.buffer[orig(this.size)-1] != orig(this.buffer[this.size])
orig(this.buffer[post(this.size)]) <= orig(this.buffer[post(this.size)-1])
orig(this.buffer[post(this.size)]) != orig(this.buffer[this.size-1])
50 * orig(this.size) - 50 * size(this.buffer[]) + orig(this.buffer[this.size]) + 1600 == 0
50 * orig(this.size) - 50 * size(this.buffer[])-1 + orig(this.buffer[this.size]) + 1550 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(char, char):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.size == 8
this.newLine == null
size(this.buffer[]) == 40
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(char, char):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer[this.size-1] == orig(this.buffer[post(this.size)-1])
this.buffer[this.size-1] == orig(this.buffer[post(return.size)-1])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.size == 8
this.newLine == null
return has only one value
size(this.buffer[]) == 40
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 97
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
size(this.buffer[]) one of { 34, 37, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 97 }
this.buffer[this.size-1] one of { 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] <= this.buffer[this.size-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(java.lang.String, java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.newLine == null
size(this.buffer[]) one of { 34, 37, 40 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 97 }
this.buffer[this.size-1] one of { 97, 98 }
this.buffer[orig(this.size)-1] one of { 97, 98, 99 }
orig(this.buffer[post(this.size)-1]) one of { 0, 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
searchStr.toString == orig(searchStr.toString)
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[orig(this.size)-1] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) < this.buffer[orig(this.size)-1]
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size] % this.buffer[orig(this.size)-1] == 0
this.buffer[this.size] <= this.buffer[orig(this.size)-1]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] >= orig(this.buffer[this.size])
this.buffer[this.size-1] <= this.buffer[orig(this.size)-1]
this.buffer[this.size-1] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
orig(this.buffer[this.size]) % this.buffer[orig(this.size)-1] == 0
this.buffer[orig(this.size)-1] >= orig(this.buffer[this.size])
orig(this.buffer[post(this.size)-1]) >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(org.apache.commons.lang3.text.StrMatcher, java.lang.String):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 97 }
this.buffer[this.size-1] one of { 52, 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[this.size] % this.buffer[this.size-1] == 0
this.buffer[this.size] <= this.buffer[this.size-1]
97 * this.size - 97 * size(this.buffer[]) + this.buffer[this.size] + 3104 == 0
97 * this.size - 97 * size(this.buffer[])-1 + this.buffer[this.size] + 3007 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceFirst(org.apache.commons.lang3.text.StrMatcher, java.lang.String):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size-1] == orig(this.buffer[this.size-1])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size] one of { 0, 97 }
this.buffer[this.size-1] one of { 52, 97, 98 }
orig(this.buffer[post(this.size)-1]) one of { 0, 97, 98 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.buffer[post(this.size)-1]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[orig(this.size)-1] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) < this.buffer[orig(this.size)-1]
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[this.size] % this.buffer[this.size-1] == 0
this.buffer[this.size] <= this.buffer[this.size-1]
this.buffer[this.size] % this.buffer[orig(this.size)-1] == 0
this.buffer[this.size] <= this.buffer[orig(this.size)-1]
this.buffer[this.size] <= orig(this.buffer[post(this.size)-1])
this.buffer[this.size] >= orig(this.buffer[this.size])
this.buffer[this.size-1] <= this.buffer[orig(this.size)-1]
orig(this.buffer[this.size]) % this.buffer[this.size-1] == 0
this.buffer[this.size-1] >= orig(this.buffer[this.size])
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
orig(this.buffer[this.size]) % this.buffer[orig(this.size)-1] == 0
this.buffer[orig(this.size)-1] >= orig(this.buffer[this.size])
orig(this.buffer[post(this.size)-1]) >= orig(this.buffer[this.size])
97 * orig(this.size) - 97 * size(this.buffer[]) + orig(this.buffer[this.size]) + 3104 == 0
97 * orig(this.size) - 97 * size(this.buffer[])-1 + orig(this.buffer[this.size]) + 3007 == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(int, int, int, java.lang.String, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.newLine == null
startIndex >= 0
endIndex >= 1
insertLen >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY > endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY > removeLen
org.apache.commons.lang3.text.StrBuilder.CAPACITY > insertLen
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[endIndex]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[endIndex-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[removeLen]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[insertLen]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > removeLen
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > insertLen
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[removeLen]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[insertLen]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size >= startIndex
this.size >= endIndex
this.size >= removeLen
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size < this.buffer[startIndex]
this.size != this.buffer[endIndex]
this.size < this.buffer[endIndex-1]
this.size != this.buffer[removeLen]
this.size != this.buffer[insertLen]
startIndex <= endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
startIndex < this.buffer[this.size-1]
startIndex < this.buffer[startIndex]
startIndex < this.buffer[endIndex-1]
startIndex <= this.buffer[removeLen]
startIndex <= this.buffer[insertLen]
endIndex >= removeLen
endIndex < size(this.buffer[])-1
endIndex > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
endIndex != this.buffer[this.size]
endIndex < this.buffer[this.size-1]
endIndex < this.buffer[startIndex]
endIndex != this.buffer[endIndex]
endIndex < this.buffer[endIndex-1]
endIndex != this.buffer[removeLen]
endIndex != this.buffer[insertLen]
removeLen < size(this.buffer[])-1
removeLen >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
removeLen < this.buffer[this.size-1]
removeLen < this.buffer[startIndex]
removeLen != this.buffer[endIndex]
removeLen < this.buffer[endIndex-1]
removeLen != this.buffer[removeLen]
removeLen != this.buffer[insertLen]
insertLen < size(this.buffer[])-1
insertLen >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
insertLen < this.buffer[this.size-1]
insertLen < this.buffer[startIndex]
insertLen != this.buffer[endIndex]
insertLen < this.buffer[endIndex-1]
insertLen != this.buffer[removeLen]
insertLen != this.buffer[insertLen]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[startIndex]
size(this.buffer[]) != this.buffer[endIndex]
size(this.buffer[]) < this.buffer[endIndex-1]
size(this.buffer[]) != this.buffer[insertLen]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[endIndex]
size(this.buffer[])-1 != this.buffer[removeLen]
size(this.buffer[])-1 != this.buffer[insertLen]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[endIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[endIndex-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[removeLen]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[insertLen]
startIndex - endIndex + removeLen == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(int, int, int, java.lang.String, int):::EXIT
this.buffer == orig(this.buffer)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(endIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(endIndex)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(removeLen)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(insertLen)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(removeLen)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(insertLen)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size >= orig(startIndex)
this.size >= orig(insertLen)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size < this.buffer[orig(startIndex)]
this.size != this.buffer[orig(endIndex)]
this.size < this.buffer[orig(endIndex)-1]
this.size != this.buffer[orig(removeLen)]
this.size < this.buffer[orig(insertLen)]
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[this.size-1])
this.size < orig(this.buffer[startIndex])
this.size != orig(this.buffer[endIndex])
this.size < orig(this.buffer[endIndex-1])
this.size != orig(this.buffer[removeLen])
this.size != orig(this.buffer[insertLen])
insertStr.toString == orig(insertStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) < size(this.buffer[])-1
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) < this.buffer[orig(startIndex)]
orig(this.size) != this.buffer[orig(endIndex)]
orig(this.size) < this.buffer[orig(endIndex)-1]
orig(this.size) != this.buffer[orig(removeLen)]
orig(this.size) < this.buffer[orig(insertLen)]
orig(this.size) != orig(this.buffer[post(this.size)-1])
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[orig(this.size)-1]
orig(startIndex) < this.buffer[orig(startIndex)]
orig(startIndex) < this.buffer[orig(endIndex)-1]
orig(startIndex) <= this.buffer[orig(removeLen)]
orig(startIndex) < this.buffer[orig(insertLen)]
orig(endIndex) < size(this.buffer[])-1
orig(endIndex) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(endIndex) != this.buffer[this.size]
orig(endIndex) < this.buffer[this.size-1]
orig(endIndex) != this.buffer[orig(this.size)]
orig(endIndex) < this.buffer[orig(this.size)-1]
orig(endIndex) < this.buffer[orig(startIndex)]
orig(endIndex) != this.buffer[orig(endIndex)]
orig(endIndex) < this.buffer[orig(endIndex)-1]
orig(endIndex) != this.buffer[orig(removeLen)]
orig(endIndex) < this.buffer[orig(insertLen)]
orig(endIndex) != orig(this.buffer[post(this.size)-1])
orig(removeLen) < size(this.buffer[])-1
orig(removeLen) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(removeLen) < this.buffer[this.size-1]
orig(removeLen) != this.buffer[orig(this.size)]
orig(removeLen) < this.buffer[orig(this.size)-1]
orig(removeLen) < this.buffer[orig(startIndex)]
orig(removeLen) != this.buffer[orig(endIndex)]
orig(removeLen) < this.buffer[orig(endIndex)-1]
orig(removeLen) != this.buffer[orig(removeLen)]
orig(removeLen) < this.buffer[orig(insertLen)]
orig(insertLen) < size(this.buffer[])-1
orig(insertLen) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(insertLen) != this.buffer[this.size]
orig(insertLen) < this.buffer[this.size-1]
orig(insertLen) < this.buffer[orig(this.size)-1]
orig(insertLen) < this.buffer[orig(startIndex)]
orig(insertLen) != this.buffer[orig(endIndex)]
orig(insertLen) < this.buffer[orig(endIndex)-1]
orig(insertLen) != this.buffer[orig(removeLen)]
orig(insertLen) < this.buffer[orig(insertLen)]
orig(insertLen) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) <= this.buffer[this.size-1]
size(this.buffer[]) <= this.buffer[orig(this.size)-1]
size(this.buffer[]) <= this.buffer[orig(startIndex)]
size(this.buffer[]) <= this.buffer[orig(endIndex)-1]
size(this.buffer[]) < this.buffer[orig(insertLen)]
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) < orig(this.buffer[this.size-1])
size(this.buffer[]) < orig(this.buffer[startIndex])
size(this.buffer[]) != orig(this.buffer[endIndex])
size(this.buffer[]) < orig(this.buffer[endIndex-1])
size(this.buffer[]) != orig(this.buffer[insertLen])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(endIndex)]
size(this.buffer[])-1 != this.buffer[orig(removeLen)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
size(this.buffer[])-1 != orig(this.buffer[this.size])
size(this.buffer[])-1 != orig(this.buffer[endIndex])
size(this.buffer[])-1 != orig(this.buffer[removeLen])
size(this.buffer[])-1 != orig(this.buffer[insertLen])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(endIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(endIndex)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(removeLen)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(insertLen)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[startIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[endIndex])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[endIndex-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[removeLen])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[insertLen])
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::ENTER
this.newLine == this.nullText
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
from >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 0, 97, 100 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > from
org.apache.commons.lang3.text.StrBuilder.CAPACITY > to
org.apache.commons.lang3.text.StrBuilder.CAPACITY > replaceCount
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[from]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[to]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > from
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > to
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > replaceCount
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[from]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[to]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= from
this.size >= to
this.size != replaceCount
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
matcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
from <= to
from < size(this.buffer[])-1
from >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
to != replaceCount
to < size(this.buffer[])-1
to >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
replaceCount < size(this.buffer[])-1
replaceCount != this.buffer[from]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[from]
size(this.buffer[]) != this.buffer[to]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[from]
size(this.buffer[])-1 != this.buffer[to]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[from]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[to]
this.buffer[this.size] <= this.buffer[to]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::EXIT2110
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == orig(to)
orig(from) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(from) == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(from) == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(from) == this.buffer[this.size]
orig(from) == this.buffer[return.size]
orig(from) == this.buffer[orig(this.size)]
orig(from) == this.buffer[orig(to)]
orig(from) == return.buffer[this.size]
orig(from) == orig(this.buffer[post(this.size)])
orig(from) == orig(this.buffer[post(to)])
orig(from) == return.buffer[return.size]
orig(from) == return.buffer[orig(this.size)]
orig(from) == return.buffer[orig(to)]
orig(from) == orig(this.buffer[post(return.size)])
orig(from) == orig(this.buffer[this.size])
orig(from) == orig(this.buffer[to])
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [65, 48, 120, 65, 49, 65, 50, 121, 65, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 98, 99, 99, 98, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 8, 10 }
replaceStr.toString one of { "***", "anything", "x" }
orig(matcher.getClass().getName()) == org.apache.commons.lang3.text.StrBuilderTest$1.class
orig(from) == 0
orig(replaceCount) one of { -1, 1 }
size(this.buffer[]) one of { 32, 40, 42 }
this.buffer[orig(from)] one of { 0, 65, 97 }
this.buffer[] elements >= orig(from)
this.size % orig(replaceCount) == 0
this.size <= this.buffer[orig(from)]
orig(from) != orig(replaceCount)
orig(from) <= this.buffer[orig(from)]
size(this.buffer[]) % orig(replaceCount) == 0
size(this.buffer[])-1 % orig(replaceCount) == 0
this.buffer[orig(from)] % orig(replaceCount) == 0
size(this.buffer[]) != this.buffer[orig(from)]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::EXIT2125
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
orig(matcher) != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY < size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY < orig(this.buffer[this.size-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[this.size-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size > orig(replaceCount)
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.size != this.buffer[this.size]
this.size < this.buffer[this.size-1]
this.size != this.buffer[orig(this.size)]
this.size < this.buffer[orig(this.size)-1]
this.size != this.buffer[orig(from)]
this.size != this.buffer[orig(to)]
this.size != orig(this.buffer[post(this.size)])
this.size != orig(this.buffer[post(this.size)-1])
this.size != orig(this.buffer[post(to)])
this.size != orig(this.buffer[this.size])
this.size < orig(this.buffer[this.size-1])
this.size != orig(this.buffer[from])
this.size != orig(this.buffer[to])
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) > orig(replaceCount)
orig(this.size) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(this.size) != this.buffer[this.size]
orig(this.size) < this.buffer[this.size-1]
orig(this.size) != this.buffer[orig(this.size)]
orig(this.size) < this.buffer[orig(this.size)-1]
orig(this.size) != this.buffer[orig(from)]
orig(this.size) != this.buffer[orig(to)]
orig(this.size) != orig(this.buffer[post(this.size)])
orig(this.size) != orig(this.buffer[post(this.size)-1])
orig(this.size) != orig(this.buffer[post(to)])
orig(this.size) != orig(this.buffer[this.size])
orig(this.size) < orig(this.buffer[this.size-1])
orig(this.size) != orig(this.buffer[from])
orig(this.size) != orig(this.buffer[to])
orig(from) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(from) < this.buffer[this.size-1]
orig(from) < this.buffer[orig(this.size)-1]
orig(from) != this.buffer[orig(from)]
orig(from) <= orig(this.buffer[post(this.size)-1])
orig(from) < orig(this.buffer[this.size-1])
orig(from) != orig(this.buffer[from])
orig(to) > orig(replaceCount)
orig(to) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
orig(to) < this.buffer[this.size-1]
orig(to) < this.buffer[orig(this.size)-1]
orig(to) != this.buffer[orig(from)]
orig(to) != this.buffer[orig(to)]
orig(to) != orig(this.buffer[post(this.size)-1])
orig(to) != orig(this.buffer[post(to)])
orig(to) < orig(this.buffer[this.size-1])
orig(to) != orig(this.buffer[from])
orig(to) != orig(this.buffer[to])
orig(replaceCount) < this.buffer[this.size-1]
orig(replaceCount) < this.buffer[orig(this.size)-1]
orig(replaceCount) < this.buffer[orig(from)]
orig(replaceCount) != orig(this.buffer[post(this.size)-1])
orig(replaceCount) < orig(this.buffer[this.size-1])
orig(replaceCount) < orig(this.buffer[from])
size(this.buffer[]) <= this.buffer[this.size-1]
size(this.buffer[]) <= this.buffer[orig(this.size)-1]
size(this.buffer[]) != orig(this.buffer[post(this.size)-1])
size(this.buffer[]) < orig(this.buffer[this.size-1])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[orig(this.size)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(from)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= this.buffer[orig(to)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[post(to)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < orig(this.buffer[this.size-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[from])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] <= orig(this.buffer[to])
this.buffer[orig(this.size)] != orig(this.buffer[post(this.size)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.replaceImpl(org.apache.commons.lang3.text.StrMatcher, java.lang.String, int, int, int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.newLine == null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
return != null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(from)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[orig(to)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != orig(this.buffer[post(to)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(this.size)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(from)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(to)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(this.size)])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(to)])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(this.buffer[post(this.size)]) in this.buffer[]
orig(this.buffer[post(to)]) in this.buffer[]
orig(this.buffer[this.size]) in this.buffer[]
orig(this.buffer[to]) in this.buffer[]
this.size >= orig(from)
this.size != orig(replaceCount)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(matcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
replaceStr.toString == orig(replaceStr.toString)
orig(this.buffer[]) elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[this.size] in orig(this.buffer[])
orig(this.size) < size(this.buffer[])-1
orig(this.size) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(from) < size(this.buffer[])-1
orig(from) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(to) < size(this.buffer[])-1
orig(to) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(replaceCount) < size(this.buffer[])-1
orig(replaceCount) != this.buffer[orig(from)]
size(this.buffer[]) != this.buffer[this.size]
size(this.buffer[]) != this.buffer[orig(this.size)]
size(this.buffer[]) != this.buffer[orig(to)]
size(this.buffer[]) != orig(this.buffer[post(this.size)])
size(this.buffer[]) != orig(this.buffer[post(to)])
size(this.buffer[]) != orig(this.buffer[this.size])
size(this.buffer[]) != orig(this.buffer[from])
size(this.buffer[]) != orig(this.buffer[to])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[orig(this.size)]
size(this.buffer[])-1 != this.buffer[orig(from)]
size(this.buffer[])-1 != this.buffer[orig(to)]
size(this.buffer[])-1 != orig(this.buffer[post(this.size)])
size(this.buffer[])-1 != orig(this.buffer[post(to)])
size(this.buffer[])-1 != orig(this.buffer[this.size])
size(this.buffer[])-1 != orig(this.buffer[from])
size(this.buffer[])-1 != orig(this.buffer[to])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(from)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(to)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[post(to)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[this.size])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[from])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= orig(this.buffer[to])
this.buffer[orig(this.size)] <= this.buffer[orig(to)]
this.buffer[orig(this.size)] >= orig(this.buffer[this.size])
this.buffer[orig(to)] >= orig(this.buffer[this.size])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.reverse():::ENTER
this.newLine == this.nullText
this.size one of { 0, 4 }
this.newLine == null
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 0, 97 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.reverse():::EXIT2136
this.buffer[] == orig(this.buffer[])
this.buffer[] elements one of { 0, 97 }
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] }
this.buffer[] elements are equal
this.size == 0
this.buffer[] elements == this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.reverse():::EXIT2146
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size == 4
return has only one value
orig(this) has only one value
orig(this.buffer[]) one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 101, 116 }
orig(this.buffer[this.size-1]) one of { 101, 116 }
orig(this.buffer[this.size-1]) in this.buffer[]
this.buffer[this.size-1] in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.reverse():::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[this.size] == orig(this.buffer[this.size])
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  <==>  (orig(this.buffer[]) one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  <==>  (this.size == 0)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (orig(this.buffer[]) elements == this.buffer[this.size])
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (orig(this.buffer[]) elements are equal)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (orig(this.buffer[]) elements one of { 0, 97 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (size(this.buffer[]) one of { 1, 32 })
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (this.buffer[] == orig(this.buffer[]))
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (this.buffer[] elements == this.buffer[this.size])
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (this.buffer[] elements are equal)
(this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97] })  ==>  (this.buffer[] elements one of { 0, 97 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (orig(this.buffer[]) one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  <==>  (this.size == 4)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this) has only one value)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) == 0)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(return.size)-1]) in this.buffer[])
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(return.size)-1]) one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) in this.buffer[])
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[post(this.size)-1]) one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[this.size-1]) in this.buffer[])
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (orig(this.buffer[this.size-1]) one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return has only one value)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[orig(this.size)-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[orig(this.size)-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[return.size-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[return.size-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[this.size-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (return.buffer[this.size-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer has only one value)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0)
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size])
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[orig(this.size)-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[return.size-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[return.size-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[this.size-1] in orig(this.buffer[]))
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[this.size-1] one of { 101, 116 })
(this.buffer[] one of { [101, 117, 114, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [116, 114, 117, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] })  ==>  (this.buffer[this.size] == 0)
this.size one of { 0, 4 }
this.newLine == null
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 0, 97 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.rightString(int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [108, 101, 102, 116, 32, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.rightString(int):::EXIT2318
return has only one value
return.toString == ""
orig(length) one of { -5, 0 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.rightString(int):::EXIT2320
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(length)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(length)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[length-1])
return has only one value
return.toString == "left right"
orig(length) == 15
===========================================================================
org.apache.commons.lang3.text.StrBuilder.rightString(int):::EXIT2322
org.apache.commons.lang3.text.StrBuilder.CAPACITY == this.buffer[orig(length)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[post(length)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(this.buffer[length-1])
return has only one value
return.toString == "right"
orig(length) == 5
this.buffer[orig(length)] == 114
===========================================================================
org.apache.commons.lang3.text.StrBuilder.rightString(int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [108, 101, 102, 116, 32, 114, 105, 103, 104, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 10
this.newLine == null
return.toString one of { "", "left right", "right" }
size(this.buffer[]) == 42
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 116
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setCharAt(int, char):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.size one of { 1, 3 }
this.newLine == null
index one of { 0, 1, 2 }
ch one of { 97, 98, 114 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 0, 111 }
this.buffer[index] one of { 0, 102, 111 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setCharAt(int, char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(ch) == this.buffer[orig(index)]
orig(ch) == return.buffer[orig(index)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.size one of { 1, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size-1] one of { 97, 111, 114 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setLength(int):::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 32, 33, 36 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 50 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > length
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
length <= size(this.buffer[])
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setLength(int):::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.size == orig(length)
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.newLine == null
size(this.buffer[]) one of { 32, 33, 36 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] one of { 0, 50 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[] <= orig(this.buffer[]) (elementwise)
orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1]) in this.buffer[]
orig(this.size) <= size(this.buffer[])
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.nullText == null
newLine.toString one of { "", "#" }
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNewLineText(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[return.size]
this.size == this.buffer[orig(this.size)]
this.size == return.buffer[this.size]
this.size == orig(this.buffer[post(this.size)])
this.size == return.buffer[return.size]
this.size == return.buffer[orig(this.size)]
this.size == orig(this.buffer[post(return.size)])
this.size == orig(this.buffer[this.size])
this.newLine == return.newLine
this.newLine == orig(newLine)
this.nullText == return.nullText
this.nullText == orig(this.nullText)
return == orig(this)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.nullText == null
newLine.toString one of { "", "#" }
this.buffer[] elements == this.size
this.newLine.toString == newLine.toString
newLine.toString == return.newLine.toString
newLine.toString == orig(newLine.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
nullText.toString one of { "", "NULL", "null" }
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.setNullText(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.buffer[] == orig(this.buffer[])
this.size == return.size
this.size == orig(this.size)
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == return.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[return.size]
this.size == this.buffer[orig(this.size)]
this.size == return.buffer[this.size]
this.size == orig(this.buffer[post(this.size)])
this.size == return.buffer[return.size]
this.size == return.buffer[orig(this.size)]
this.size == orig(this.buffer[post(return.size)])
this.size == orig(this.buffer[this.size])
this.newLine == return.newLine
this.newLine == orig(this.newLine)
this.nullText == return.nullText
return == orig(this)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.newLine == null
this.buffer[] elements == this.size
this.nullText.toString == return.nullText.toString
this.nullText.toString == orig(nullText.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::ENTER
this.newLine == this.nullText
this.newLine == null
===========================================================================
org.apache.commons.lang3.text.StrBuilder.size():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == return
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this.size)
this.newLine == null
return >= 0
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
return <= size(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2189
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.newLine == orig(str)
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
return == false
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2189;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2193
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str.toString == ""
return == true
orig(str) has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2193;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2196
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
str.toString == "a"
return == false
orig(str) has only one value
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2196;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2200
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
str.toString == "cba"
return == false
orig(str) has only one value
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2200;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2203
this.buffer[] == [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 3
str.toString one of { "a", "ab", "abc" }
return == true
this.buffer[this.size-1] == 99
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT2203;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(return == false)  ==>  (str.toString one of { "a", "cba" })
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 98, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 3 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.text.StrBuilder.startsWith(java.lang.String):::EXIT;condition="not(return == true)"
str.toString one of { "a", "cba" }
return == false
===========================================================================
org.apache.commons.lang3.text.StrBuilder.subSequence(int, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
this.newLine == null
startIndex one of { 0, 6 }
endIndex one of { 5, 6, 13 }
size(this.buffer[]) == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
this.buffer[startIndex] one of { 103, 104 }
this.buffer[endIndex] one of { 0, 32, 103 }
this.buffer[endIndex-1] one of { 32, 101, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.subSequence(int, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
this.newLine == null
return.getClass().getName() == java.lang.String.class
size(this.buffer[]) == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
this.buffer[orig(startIndex)] one of { 103, 104 }
this.buffer[orig(endIndex)] one of { 0, 32, 103 }
this.buffer[orig(endIndex)-1] one of { 32, 101, 111 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.substring(int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
this.newLine == null
start one of { 0, 6 }
size(this.buffer[]) == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
this.buffer[start] one of { 103, 104 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.substring(int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] == [104, 101, 108, 108, 111, 32, 103, 111, 111, 100, 98, 121, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 13
this.newLine == null
return.toString one of { "goodbye", "hello goodbye" }
size(this.buffer[]) == 45
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 101
this.buffer[orig(start)] one of { 103, 104 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.substring(int, int):::ENTER
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.size one of { 1, 13 }
this.newLine == null
startIndex one of { 0, 6 }
endIndex >= 1
size(this.buffer[]) one of { 32, 45 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[endIndex] one of { 0, 32, 103 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY > endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[endIndex-1]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > startIndex
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size < this.buffer[startIndex]
this.size != this.buffer[endIndex]
this.size != this.buffer[endIndex-1]
startIndex < endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
startIndex < this.buffer[this.size-1]
startIndex < this.buffer[startIndex]
startIndex != this.buffer[endIndex-1]
endIndex < size(this.buffer[])-1
endIndex > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
endIndex < this.buffer[this.size-1]
endIndex < this.buffer[startIndex]
endIndex != this.buffer[endIndex]
endIndex != this.buffer[endIndex-1]
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[startIndex]
size(this.buffer[]) != this.buffer[endIndex]
size(this.buffer[]) != this.buffer[endIndex-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[endIndex]
size(this.buffer[])-1 != this.buffer[endIndex-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[endIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[endIndex-1]
this.buffer[this.size-1] <= this.buffer[startIndex]
this.buffer[this.size-1] != this.buffer[endIndex]
this.buffer[startIndex] > this.buffer[endIndex]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.substring(int, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(endIndex)] == orig(this.buffer[post(endIndex)])
this.size one of { 1, 13 }
this.newLine == null
return != null
size(this.buffer[]) one of { 32, 45 }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[orig(endIndex)] one of { 0, 32, 103 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= orig(this.buffer[post(endIndex)-1])
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(endIndex)-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > orig(this.buffer[post(endIndex)-1])
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size > orig(startIndex)
this.size < size(this.buffer[])-1
this.size > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size < this.buffer[this.size-1]
this.size < this.buffer[orig(startIndex)]
this.size != this.buffer[orig(endIndex)]
this.size != this.buffer[orig(endIndex)-1]
this.size < orig(this.buffer[post(endIndex)-1])
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < this.buffer[this.size-1]
orig(startIndex) < this.buffer[orig(startIndex)]
orig(startIndex) != this.buffer[orig(endIndex)-1]
orig(startIndex) < orig(this.buffer[post(endIndex)-1])
orig(endIndex) < size(this.buffer[])-1
orig(endIndex) > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(endIndex) < this.buffer[this.size-1]
orig(endIndex) < this.buffer[orig(startIndex)]
orig(endIndex) != this.buffer[orig(endIndex)]
orig(endIndex) != this.buffer[orig(endIndex)-1]
orig(endIndex) < orig(this.buffer[post(endIndex)-1])
size(this.buffer[]) < this.buffer[this.size-1]
size(this.buffer[]) < this.buffer[orig(startIndex)]
size(this.buffer[]) != this.buffer[orig(endIndex)]
size(this.buffer[]) != this.buffer[orig(endIndex)-1]
size(this.buffer[]) != orig(this.buffer[post(endIndex)-1])
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[orig(endIndex)]
size(this.buffer[])-1 != this.buffer[orig(endIndex)-1]
size(this.buffer[])-1 != orig(this.buffer[post(endIndex)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[this.size-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(endIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(endIndex)-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] < orig(this.buffer[post(endIndex)-1])
this.buffer[this.size-1] <= this.buffer[orig(startIndex)]
this.buffer[this.size-1] != this.buffer[orig(endIndex)]
this.buffer[orig(startIndex)] > this.buffer[orig(endIndex)]
this.buffer[orig(endIndex)] != orig(this.buffer[post(endIndex)-1])
this.buffer[orig(endIndex)-1] % orig(this.buffer[post(endIndex)-1]) == 0
this.buffer[orig(endIndex)-1] <= orig(this.buffer[post(endIndex)-1])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray():::EXIT360
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[this.size])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
return has only one value
return[] == []
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray():::EXIT364
this.buffer[this.size-1] == return[this.size-1]
this.buffer[orig(this.size)-1] == return[this.size-1]
return[this.size-1] == orig(this.buffer[post(this.size)-1])
return[this.size-1] == orig(this.buffer[this.size-1])
this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return has only one value
return[] == [106, 117, 110, 105, 116]
return[this.size-1] == 116
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == size(return[])
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return[] == [])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.size)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return[] == [106, 117, 110, 105, 116])
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 5)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[this.size-1]) == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[orig(this.size)-1] == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[this.size-1] == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[this.size-1] == orig(this.buffer[post(this.size)-1]))
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[this.size-1] == orig(this.buffer[this.size-1]))
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(this.size)-1] == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(this.size)-1] == return[this.size-1])
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[this.size-1] == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[this.size-1] == return[this.size-1])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
return[] one of { [], [106, 117, 110, 105, 116] }
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray(int, int):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
startIndex == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[startIndex] one of { 0, 106 }
this.buffer[endIndex] one of { 0, 116, 117 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray(int, int):::EXIT381
this.size == orig(startIndex)
this.size == orig(endIndex)
this.size == size(return[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.size == this.buffer[this.size]
this.size == this.buffer[orig(this.size)]
this.size == this.buffer[orig(startIndex)]
this.size == this.buffer[orig(endIndex)]
this.size == orig(this.buffer[post(this.size)])
this.size == orig(this.buffer[post(startIndex)])
this.size == orig(this.buffer[post(endIndex)])
this.size == orig(this.buffer[this.size])
this.size == orig(this.buffer[startIndex])
this.size == orig(this.buffer[endIndex])
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
return has only one value
return[] == []
this.buffer[] elements == this.size
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray(int, int):::EXIT385
this.buffer[orig(startIndex)] == return[orig(startIndex)]
orig(this.buffer[post(startIndex)]) == return[orig(startIndex)]
return[orig(startIndex)] == orig(this.buffer[startIndex])
this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 5
return[] one of { [106], [106, 117, 110, 105], [106, 117, 110, 105, 116] }
orig(endIndex) one of { 1, 4, 20 }
size(return[]) one of { 1, 4, 5 }
this.buffer[this.size-1] == 116
this.buffer[orig(endIndex)-1] one of { 0, 105, 106 }
orig(this.buffer[post(endIndex)-1]) one of { 105, 106, 116 }
return[orig(startIndex)] == 106
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toCharArray(int, int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
orig(startIndex) == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) == this.buffer[this.size]
orig(startIndex) == this.buffer[orig(this.size)]
orig(startIndex) == orig(this.buffer[post(this.size)])
orig(startIndex) == orig(this.buffer[this.size])
this.buffer[orig(endIndex)] == orig(this.buffer[post(endIndex)])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return[] == [])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == orig(endIndex))
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == orig(startIndex))
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == this.buffer[orig(endIndex)])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == this.buffer[orig(startIndex)])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return has only one value)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == 0)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == orig(endIndex))
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == orig(startIndex))
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == size(return[]))
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.buffer[orig(endIndex)])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.buffer[orig(startIndex)])
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[] elements == this.size)
(this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.size == size(return[]))
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (orig(endIndex) one of { 1, 4, 20 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (return[] one of { [106], [106, 117, 110, 105], [106, 117, 110, 105, 116] })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (size(return[]) one of { 1, 4, 5 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.buffer[orig(startIndex)] == 106)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  <==>  (this.size == 5)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[endIndex-1]) one of { 0, 105, 106 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(endIndex)-1]) one of { 105, 106, 116 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[post(this.size)-1]) == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (orig(this.buffer[this.size-1]) == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[endIndex-1] == orig(this.buffer[post(endIndex)-1]))
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[endIndex-1] one of { 105, 106, 116 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[orig(startIndex)] == 106)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (return[startIndex] == 106)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[endIndex-1] one of { 105, 106, 116 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(endIndex)-1] one of { 0, 105, 106 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(endIndex)] one of { 0, 116, 117 })
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(startIndex)] == return[orig(startIndex)])
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[orig(this.size)-1] == 116)
(this.buffer[] == [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])  ==>  (this.buffer[this.size-1] == 116)
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
orig(startIndex) == 0
this.buffer[orig(startIndex)] one of { 0, 106 }
this.buffer[orig(endIndex)] one of { 0, 116, 117 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::ENTER
this.newLine == this.nullText
this.newLine == null
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toString():::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == null
return != null
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toStringBuffer():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toStringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toStringBuilder():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.newLine == this.nullText
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this has only one value
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.toStringBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer has only one value
this.buffer[] one of { [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [106, 117, 110, 105, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
this.size one of { 0, 5 }
this.newLine == null
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.trim():::ENTER
this.newLine == this.nullText
this.newLine == null
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 0, 97, 98 }
===========================================================================
org.apache.commons.lang3.text.StrBuilder.trim():::EXIT2158
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.size == size(this.buffer[])-1
this.size == size(return.buffer[])-1
this.size == orig(size(this.buffer[]))-1
this.buffer has only one value
this.buffer[] == [97]
this.buffer[] elements == 97
return has only one value
orig(this) has only one value
size(this.buffer[]) == 1
this.buffer[] elements == this.buffer[this.size]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.trim():::EXIT2175
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(size(this.buffer[]))
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
return has only one value
orig(this) has only one value
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
this.buffer[this.size] one of { 32, 98 }
this.buffer[orig(this.size)] one of { 0, 98 }
this.buffer[orig(this.size)-1] one of { 32, 99 }
org.apache.commons.lang3.text.StrBuilder.CAPACITY in this.buffer[]
org.apache.commons.lang3.text.StrBuilder.CAPACITY in orig(this.buffer[])
===========================================================================
org.apache.commons.lang3.text.StrBuilder.trim():::EXIT
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == this.nullText
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
size(this.buffer[]) == orig(size(this.buffer[]))
this.buffer[this.size] == orig(this.buffer[post(this.size)])
this.buffer[this.size] == orig(this.buffer[post(return.size)])
this.buffer[orig(this.size)] == orig(this.buffer[this.size])
(size(this.buffer[]) == 1)  <==>  (this.size == size(this.buffer[])-1)
(size(this.buffer[]) == 1)  ==>  (orig(this.buffer[]) == [97])
(size(this.buffer[]) == 1)  ==>  (orig(this.buffer[]) elements == 97)
(size(this.buffer[]) == 1)  ==>  (orig(this.buffer[]) elements == this.buffer[orig(this.size)])
(size(this.buffer[]) == 1)  ==>  (orig(this.buffer[]) elements == this.buffer[this.size])
(size(this.buffer[]) == 1)  ==>  (this.buffer[] == [97])
(size(this.buffer[]) == 1)  ==>  (this.buffer[] elements == 97)
(size(this.buffer[]) == 1)  ==>  (this.buffer[] elements == this.buffer[orig(this.size)])
(size(this.buffer[]) == 1)  ==>  (this.buffer[] elements == this.buffer[this.size])
(size(this.buffer[]) == 1)  ==>  (this.size == orig(this.size))
this.size one of { 0, 5 }
this.newLine == null
size(this.buffer[]) one of { 1, 32 }
this.buffer[this.size] one of { 32, 97, 98 }
this.buffer[orig(this.size)] one of { 0, 97, 98 }
this.buffer[orig(this.size)] % this.buffer[this.size] == 0
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateRange(int, int):::ENTER
this.newLine == this.nullText
this.newLine == null
startIndex >= 0
endIndex >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > startIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY != endIndex
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > startIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > endIndex
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[startIndex]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= startIndex
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
startIndex <= endIndex
startIndex < size(this.buffer[])-1
startIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
endIndex != size(this.buffer[])
endIndex != size(this.buffer[])-1
endIndex >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[startIndex]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[startIndex]
===========================================================================
org.apache.commons.lang3.text.StrBuilder.validateRange(int, int):::EXIT
this.buffer == orig(this.buffer)
this.buffer[] == orig(this.buffer[])
this.size == orig(this.size)
this.newLine == this.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
this.newLine == null
return >= 0
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == 0
org.apache.commons.lang3.text.StrBuilder.CAPACITY > this.size
org.apache.commons.lang3.text.StrBuilder.CAPACITY > return
org.apache.commons.lang3.text.StrBuilder.CAPACITY <= size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY != size(this.buffer[])-1
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > return
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[this.size]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[return]
org.apache.commons.lang3.text.StrBuilder.serialVersionUID > this.buffer[orig(startIndex)]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size >= return
this.size >= orig(startIndex)
this.size < size(this.buffer[])-1
this.size >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
return >= orig(startIndex)
return <= orig(endIndex)
return < size(this.buffer[])-1
return >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(startIndex) < size(this.buffer[])-1
orig(startIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
orig(endIndex) != size(this.buffer[])
orig(endIndex) != size(this.buffer[])-1
orig(endIndex) >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[]) != this.buffer[return]
size(this.buffer[])-1 > this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
size(this.buffer[])-1 != this.buffer[this.size]
size(this.buffer[])-1 != this.buffer[return]
size(this.buffer[])-1 != this.buffer[orig(startIndex)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[return]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] <= this.buffer[orig(startIndex)]
this.buffer[this.size] <= this.buffer[return]
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1.():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1.isMatch(char[], int, int, int):::ENTER
buffer != null
buffer[] elements >= 0
pos >= 0
bufferStart >= 0
size(buffer[]) one of { 32, 35, 42 }
pos >= bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos < buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(buffer[])-1
bufferStart < buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd < size(buffer[])-1
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd != buffer[bufferEnd]
bufferEnd < buffer[bufferEnd-1]
size(buffer[]) <= buffer[pos]
size(buffer[]) <= buffer[bufferStart]
size(buffer[]) <= buffer[bufferEnd-1]
size(buffer[])-1 != buffer[bufferEnd]
buffer[bufferStart] > buffer[bufferEnd]
buffer[bufferEnd] != buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1.isMatch(char[], int, int, int):::EXIT1648
buffer[orig(pos)] == orig(buffer[post(pos)-1])
return == 2
orig(size(buffer[])) one of { 32, 42 }
buffer[orig(pos)] == 65
return != orig(bufferStart)
return < buffer[return-1]
return != buffer[orig(bufferEnd)]
orig(pos) < buffer[return-1]
orig(bufferStart) < buffer[return-1]
orig(bufferEnd) < buffer[return-1]
orig(size(buffer[])) <= buffer[return-1]
orig(size(buffer[])) < buffer[orig(pos)]
orig(size(buffer[])) < orig(buffer[post(pos)])
buffer[return-1] >= buffer[orig(bufferEnd)]
buffer[return-1] != buffer[orig(bufferEnd)-1]
buffer[orig(pos)] >= buffer[orig(bufferEnd)]
buffer[orig(pos)] > orig(buffer[post(pos)])
buffer[orig(bufferStart)] != buffer[orig(bufferEnd)-1]
buffer[orig(bufferStart)] != orig(buffer[post(pos)])
buffer[orig(bufferEnd)] != orig(buffer[post(pos)])
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1.isMatch(char[], int, int, int):::EXIT1651
return == 0
buffer[] elements >= return
return in buffer[]
return <= orig(pos)
return <= orig(bufferStart)
return <= buffer[orig(bufferEnd)]
buffer[return] >= buffer[orig(bufferStart)]
buffer[return] > buffer[orig(bufferEnd)]
buffer[return] != buffer[orig(bufferEnd)-1]
buffer[orig(pos)] != buffer[orig(bufferEnd)]
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$1.isMatch(char[], int, int, int):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
(return == 0)  ==>  (buffer[] elements >= return)
(return == 0)  ==>  (buffer[orig(pos)] != buffer[orig(bufferEnd)])
(return == 0)  ==>  (buffer[return] != buffer[orig(bufferEnd)-1])
(return == 0)  ==>  (buffer[return] > buffer[orig(bufferEnd)])
(return == 0)  ==>  (buffer[return] >= buffer[orig(bufferStart)])
(return == 0)  ==>  (orig(size(buffer[])) one of { 32, 35, 42 })
(return == 0)  ==>  (pos >= return)
(return == 0)  ==>  (return <= buffer[orig(bufferEnd)])
(return == 0)  ==>  (return <= orig(bufferStart))
(return == 0)  ==>  (return <= orig(pos))
(return == 0)  ==>  (return in buffer[])
(return == 2)  ==>  (buffer[orig(bufferEnd)-1] != orig(buffer[post(return)-1]))
(return == 2)  ==>  (buffer[orig(bufferEnd)] != orig(buffer[post(pos)]))
(return == 2)  ==>  (buffer[orig(bufferEnd)] <= orig(buffer[post(pos)-1]))
(return == 2)  ==>  (buffer[orig(bufferEnd)] <= orig(buffer[post(return)-1]))
(return == 2)  ==>  (buffer[orig(bufferStart)] != buffer[orig(bufferEnd)-1])
(return == 2)  ==>  (buffer[orig(bufferStart)] != orig(buffer[post(pos)]))
(return == 2)  ==>  (buffer[orig(pos)] == 65)
(return == 2)  ==>  (buffer[orig(pos)] == orig(buffer[post(pos)-1]))
(return == 2)  ==>  (buffer[orig(pos)] > orig(buffer[post(pos)]))
(return == 2)  ==>  (buffer[orig(pos)] >= buffer[orig(bufferEnd)])
(return == 2)  ==>  (buffer[pos-1] == 65)
(return == 2)  ==>  (buffer[pos-1] == buffer[orig(pos)])
(return == 2)  ==>  (buffer[pos-1] > orig(buffer[post(pos)]))
(return == 2)  ==>  (buffer[pos-1] >= buffer[orig(bufferEnd)])
(return == 2)  ==>  (buffer[return-1] != buffer[orig(bufferEnd)-1])
(return == 2)  ==>  (buffer[return-1] >= buffer[orig(bufferEnd)])
(return == 2)  ==>  (orig(bufferEnd) < buffer[pos-1])
(return == 2)  ==>  (orig(bufferEnd) < buffer[return-1])
(return == 2)  ==>  (orig(bufferEnd) < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (orig(bufferEnd) < orig(buffer[post(return)-1]))
(return == 2)  ==>  (orig(bufferStart) < buffer[pos-1])
(return == 2)  ==>  (orig(bufferStart) < buffer[return-1])
(return == 2)  ==>  (orig(bufferStart) < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (orig(bufferStart) < orig(buffer[post(return)-1]))
(return == 2)  ==>  (orig(buffer[post(pos)-1]) == 65)
(return == 2)  ==>  (orig(buffer[post(pos)]) < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (orig(pos) < buffer[pos-1])
(return == 2)  ==>  (orig(pos) < buffer[return-1])
(return == 2)  ==>  (orig(pos) < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (orig(pos) < orig(buffer[post(return)-1]))
(return == 2)  ==>  (orig(size(buffer[])) < buffer[orig(pos)])
(return == 2)  ==>  (orig(size(buffer[])) < buffer[pos-1])
(return == 2)  ==>  (orig(size(buffer[])) < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (orig(size(buffer[])) < orig(buffer[post(pos)]))
(return == 2)  ==>  (orig(size(buffer[])) <= buffer[return-1])
(return == 2)  ==>  (orig(size(buffer[])) <= orig(buffer[post(return)-1]))
(return == 2)  ==>  (orig(size(buffer[])) one of { 32, 42 })
(return == 2)  ==>  (pos != buffer[orig(bufferEnd)])
(return == 2)  ==>  (pos - orig(pos) - 1 == 0)
(return == 2)  ==>  (pos < buffer[pos-1])
(return == 2)  ==>  (pos < buffer[return-1])
(return == 2)  ==>  (pos < orig(bufferEnd))
(return == 2)  ==>  (pos < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (pos < orig(buffer[post(return)-1]))
(return == 2)  ==>  (pos > orig(bufferStart))
(return == 2)  ==>  (pos >= 1)
(return == 2)  ==>  (return != buffer[orig(bufferEnd)])
(return == 2)  ==>  (return != orig(bufferStart))
(return == 2)  ==>  (return < buffer[pos-1])
(return == 2)  ==>  (return < buffer[return-1])
(return == 2)  ==>  (return < orig(buffer[post(pos)-1]))
(return == 2)  ==>  (return < orig(buffer[post(return)-1]))
buffer[] elements >= 0
return one of { 0, 2 }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return < orig(bufferEnd)
return < size(buffer[])-1
return < buffer[return]
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
return < orig(buffer[post(pos)])
orig(pos) < size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) < buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(pos) < orig(buffer[post(pos)])
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < orig(buffer[post(pos)])
orig(bufferEnd) < size(buffer[])-1
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) != buffer[orig(bufferEnd)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) < orig(buffer[post(pos)])
size(buffer[])-1 != buffer[orig(bufferEnd)]
orig(size(buffer[])) <= buffer[return]
orig(size(buffer[])) <= buffer[orig(pos)]
orig(size(buffer[])) <= buffer[orig(bufferStart)]
orig(size(buffer[])) <= buffer[orig(bufferEnd)-1]
orig(size(buffer[])) <= orig(buffer[post(pos)])
buffer[orig(bufferStart)] > buffer[orig(bufferEnd)]
buffer[orig(bufferEnd)] != buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$MockReadable:::OBJECT
this.src.getClass().getName() == java.nio.StringCharBuffer.class
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$MockReadable.MockReadable(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$MockReadable.MockReadable(java.lang.String):::EXIT
src.toString == orig(src.toString)
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$MockReadable.read(java.nio.CharBuffer):::ENTER
cb.getClass().getName() == java.nio.HeapCharBuffer.class
this.src.getClass().getName() != cb.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest$MockReadable.read(java.nio.CharBuffer):::EXIT
this.src == orig(this.src)
return >= -1
this.src.getClass().getName() == orig(this.src.getClass().getName())
this.src.getClass().getName() != orig(cb.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest:::CLASS
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER has only one value
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER != null
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrBuilderTest$1.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.StrBuilderTest():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendCharBuffer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendCharBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToCharBuffer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToCharBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuffer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuilder():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToStringBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToWriter():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAppendToWriter():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsBuilder():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsReader():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsReader():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsTokenizer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsWriter():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testAsWriter():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCapacity():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCapacity():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testChaining():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testChaining():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCharAt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testCharAt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testClear():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testClear():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testConstructors():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testConstructors():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_StrMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testContains_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_StrMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteAll_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteCharAt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_StrMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteFirst_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testDeleteIntInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEndsWith():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEndsWith():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEnsureCapacity():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEquals():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEquals():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testEqualsIgnoreCase():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetChars():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetChars():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetCharsIntIntCharArrayInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetSetNewLineText():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetSetNewLineText():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetSetNullText():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testGetSetNullText():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testHashCode():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testHashCode():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOfLang294():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_StrMatcher_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_String_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIndexOf_char_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testIsEmpty():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang294():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang294():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang295():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang295():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang412Left():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang412Left():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang412Right():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLang412Right():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_StrMatcher_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_String_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char_int():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLastIndexOf_char_int():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLeftString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLeftString():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLength():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testLength():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testMidString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testMidString():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testMinimizeCapacity():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBuffer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromCharBufferAppendsToEnd():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadable():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadable():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadableAppendsToEnd():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReadableAppendsToEnd():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReader():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReader():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReaderAppendsToEnd():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReadFromReaderAppendsToEnd():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_StrMatcher_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_String_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_char_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceAll_char_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_StrMatcher_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_String_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_char_char():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplaceFirst_char_char():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryCount():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryEndIndex():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryMatcher():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryReplace():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_StrMatcher_String_int_int_int_VaryStartIndex():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReplace_int_int_String():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReverse():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testReverse():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testRightString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testRightString():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSetCharAt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSetLength():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSetLength():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSize():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSize():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testStartsWith():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testStartsWith():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubSequenceIntInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubstringInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testSubstringIntInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToCharArray():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToCharArray():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToCharArrayIntInt():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToString():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToString():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToStringBuffer():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToStringBuilder():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testToStringBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testTrim():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrBuilderTest.testTrim():::EXIT
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrBuilderTest.A_NUMBER_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher:::OBJECT
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.CharMatcher(char):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.CharMatcher(char):::EXIT
this.ch == orig(ch)
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int):::ENTER
buffer != null
buffer[] elements >= 0
pos >= 0
bufferStart >= 0
bufferEnd >= 1
this.ch > pos
this.ch > bufferStart
this.ch > bufferEnd
this.ch >= size(buffer[])
pos >= bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos < buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(buffer[])-1
bufferStart < buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd < size(buffer[])-1
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd != buffer[bufferEnd]
bufferEnd < buffer[bufferEnd-1]
size(buffer[]) <= buffer[pos]
size(buffer[]) <= buffer[bufferStart]
size(buffer[]) <= buffer[bufferEnd-1]
size(buffer[])-1 != buffer[bufferEnd]
buffer[bufferStart] != buffer[bufferEnd]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharMatcher.isMatch(char[], int, int, int):::EXIT
this.ch == orig(this.ch)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] elements >= 0
return one of { 0, 1 }
this.ch > return
this.ch > orig(pos)
this.ch > orig(bufferStart)
this.ch > orig(bufferEnd)
this.ch >= orig(size(buffer[]))
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return <= orig(bufferEnd)
return < size(buffer[])-1
return < buffer[return]
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
orig(pos) < size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) < buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) < size(buffer[])-1
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) != buffer[orig(bufferEnd)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
size(buffer[])-1 != buffer[orig(bufferEnd)]
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) <= buffer[orig(pos)]
orig(size(buffer[])) <= buffer[orig(bufferStart)]
orig(size(buffer[])) <= buffer[orig(bufferEnd)-1]
buffer[orig(bufferStart)] != buffer[orig(bufferEnd)]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher:::OBJECT
this.chars != null
this.chars[] one of { [9, 10, 12, 13, 32], [34, 39] }
this.chars[] sorted by <
size(this.chars[]) one of { 2, 5 }
this.chars[] elements > size(this.chars[])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.CharSetMatcher(char[]):::ENTER
chars[] one of { [32, 9, 10, 13, 12], [39, 34] }
size(chars[]) one of { 2, 5 }
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.CharSetMatcher(char[]):::EXIT
chars[] == orig(chars[])
size(this.chars[]) == orig(size(chars[]))
chars[] one of { [32, 9, 10, 13, 12], [39, 34] }
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int):::ENTER
size(buffer[]) == buffer[bufferEnd-1]
this has only one value
this.chars has only one value
this.chars[] == [9, 10, 12, 13, 32]
buffer has only one value
buffer != null
buffer[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
buffer[] elements >= 0
pos >= 0
bufferStart >= 0
bufferEnd one of { 4, 8 }
size(this.chars[]) == 5
size(buffer[]) == 32
buffer[bufferEnd] == 0
this.chars[] elements > pos
this.chars[] elements > bufferStart
this.chars[] elements > bufferEnd
size(buffer[]) in this.chars[]
this.chars[] elements <= size(buffer[])
this.chars[] elements <= buffer[pos]
this.chars[] elements < buffer[bufferStart]
this.chars[] elements > buffer[bufferEnd]
buffer[] elements >= buffer[bufferEnd]
pos >= bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos < buffer[pos]
pos < buffer[bufferStart]
pos >= buffer[bufferEnd]
bufferStart < bufferEnd
bufferStart != size(this.chars[])
bufferStart < size(buffer[])-1
bufferStart < buffer[pos]
bufferStart - 2 * buffer[bufferStart] + 194 == 0
bufferStart < buffer[bufferStart]
bufferStart >= buffer[bufferEnd]
bufferEnd != size(this.chars[])
bufferEnd >= size(this.chars[])-1
bufferEnd < size(buffer[])-1
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd > buffer[bufferEnd]
size(this.chars[]) < buffer[pos]
size(this.chars[]) < buffer[bufferStart]
size(buffer[]) <= buffer[pos]
size(buffer[]) < buffer[bufferStart]
buffer[pos] <= buffer[bufferStart]
buffer[pos] > buffer[bufferEnd]
buffer[bufferStart] > buffer[bufferEnd]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.isMatch(char[], int, int, int):::EXIT
this.chars == orig(this.chars)
this.chars[] == orig(this.chars[])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
orig(size(buffer[])) == buffer[orig(bufferEnd)-1]
orig(size(buffer[])) == orig(buffer[post(bufferEnd)-1])
this.chars has only one value
this.chars[] == [9, 10, 12, 13, 32]
buffer[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
buffer[] elements >= 0
return one of { 0, 1 }
size(this.chars[]) == 5
this.chars[return] one of { 9, 10 }
buffer[return] one of { 32, 97 }
buffer[orig(bufferEnd)] == 0
this.chars[] elements > return
this.chars[] elements > orig(pos)
this.chars[] elements > orig(bufferStart)
this.chars[] elements > orig(bufferEnd)
orig(size(buffer[])) in this.chars[]
this.chars[] elements <= orig(size(buffer[]))
this.chars[] elements <= buffer[return]
this.chars[] elements <= buffer[orig(pos)]
this.chars[] elements < buffer[orig(bufferStart)]
this.chars[] elements > buffer[orig(bufferEnd)]
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= buffer[orig(bufferEnd)]
return <= orig(pos)
return < orig(bufferEnd)
return < size(this.chars[])-1
return < size(buffer[])-1
return < this.chars[return]
return < buffer[return]
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return >= buffer[orig(bufferEnd)]
orig(pos) < size(buffer[])-1
orig(pos) < this.chars[return]
orig(pos) < buffer[return]
orig(pos) < buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) >= buffer[orig(bufferEnd)]
orig(bufferStart) != size(this.chars[])
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < this.chars[return]
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) - 2 * buffer[orig(bufferStart)] + 194 == 0
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) >= buffer[orig(bufferEnd)]
orig(bufferEnd) != size(this.chars[])
orig(bufferEnd) >= size(this.chars[])-1
orig(bufferEnd) < size(buffer[])-1
orig(bufferEnd) < this.chars[return]
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) > buffer[orig(bufferEnd)]
size(this.chars[]) < this.chars[return]
size(this.chars[]) < buffer[return]
size(this.chars[]) < buffer[orig(pos)]
size(this.chars[]) < buffer[orig(bufferStart)]
size(buffer[])-1 > this.chars[return]
orig(size(buffer[])) <= buffer[return]
orig(size(buffer[])) <= buffer[orig(pos)]
orig(size(buffer[])) < buffer[orig(bufferStart)]
this.chars[return] < buffer[return]
this.chars[return] < buffer[orig(pos)]
this.chars[return] < buffer[orig(bufferStart)]
this.chars[return] > buffer[orig(bufferEnd)]
buffer[return] <= buffer[orig(pos)]
buffer[return] <= buffer[orig(bufferStart)]
buffer[return] > buffer[orig(bufferEnd)]
buffer[orig(pos)] <= buffer[orig(bufferStart)]
buffer[orig(pos)] > buffer[orig(bufferEnd)]
buffer[orig(bufferStart)] > buffer[orig(bufferEnd)]
return - orig(pos) + orig(bufferStart) == 0
return - orig(pos) + 2 * buffer[orig(bufferStart)] - 194 == 0
orig(pos) - orig(bufferStart) - this.chars[return] + 9 == 0
65 * orig(pos) - 65 * orig(bufferStart) + buffer[return] - 97 == 0
orig(pos) - this.chars[return] - 2 * buffer[orig(bufferStart)] + 203 == 0
65 * orig(pos) + buffer[return] - 130 * buffer[orig(bufferStart)] + 12513 == 0
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.NoMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int):::ENTER
buffer != null
buffer[] elements >= 0
pos >= 0
bufferStart >= 0
size(buffer[]) one of { 32, 40 }
buffer[bufferEnd] one of { 0, 98 }
buffer[bufferEnd-1] one of { 32, 97, 100 }
pos >= bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos < buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(buffer[])-1
bufferStart < buffer[pos]
bufferStart - 2 * buffer[bufferStart] + 194 == 0
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd < size(buffer[])-1
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd != buffer[bufferEnd]
buffer[bufferEnd] % bufferEnd == 0
bufferEnd < buffer[bufferEnd-1]
size(buffer[]) <= buffer[pos]
size(buffer[]) < buffer[bufferStart]
size(buffer[]) != buffer[bufferEnd]
size(buffer[]) <= buffer[bufferEnd-1]
size(buffer[])-1 != buffer[bufferEnd]
buffer[pos] != buffer[bufferEnd]
buffer[bufferStart] != buffer[bufferEnd]
buffer[bufferEnd] != buffer[bufferEnd-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$NoMatcher.isMatch(char[], int, int, int):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] elements >= 0
return == 0
buffer[return] == 97
buffer[orig(bufferEnd)] one of { 0, 98 }
buffer[orig(bufferEnd)-1] one of { 32, 97, 100 }
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
buffer[] elements >= return
return in buffer[]
return <= orig(pos)
return <= orig(bufferStart)
return < orig(bufferEnd)
return < size(buffer[])-1
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return <= buffer[orig(bufferEnd)]
return < buffer[orig(bufferEnd)-1]
orig(pos) < size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) < buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) - 2 * buffer[orig(bufferStart)] + 194 == 0
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) < size(buffer[])-1
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
buffer[orig(bufferEnd)] % orig(bufferEnd) == 0
orig(bufferEnd) != buffer[orig(bufferEnd)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
size(buffer[])-1 != buffer[orig(bufferEnd)]
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) <= buffer[orig(pos)]
orig(size(buffer[])) < buffer[orig(bufferStart)]
orig(size(buffer[])) != buffer[orig(bufferEnd)]
orig(size(buffer[])) <= buffer[orig(bufferEnd)-1]
buffer[return] <= buffer[orig(bufferStart)]
buffer[return] != buffer[orig(bufferEnd)]
buffer[orig(pos)] != buffer[orig(bufferEnd)]
buffer[orig(bufferStart)] != buffer[orig(bufferEnd)]
buffer[orig(bufferEnd)] != buffer[orig(bufferEnd)-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher:::OBJECT
this.chars != null
size(this.chars[]) == 2
this.chars[] elements > size(this.chars[])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.StringMatcher(java.lang.String):::ENTER
str != null
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.StringMatcher(java.lang.String):::EXIT
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::ENTER
buffer != null
buffer[] elements >= 0
pos >= 0
bufferStart >= 0
size(buffer[]) one of { 40, 42, 58 }
this.chars[] elements > pos
this.chars[] elements > bufferStart
this.chars[] elements > bufferEnd
this.chars[] elements > size(buffer[])
pos >= bufferStart
pos < bufferEnd
pos < size(buffer[])-1
pos < buffer[pos]
pos < buffer[bufferStart]
pos < buffer[bufferEnd-1]
bufferStart < bufferEnd
bufferStart < size(buffer[])-1
bufferStart < buffer[pos]
bufferStart < buffer[bufferStart]
bufferStart < buffer[bufferEnd-1]
bufferEnd >= size(this.chars[])
bufferEnd < size(buffer[])-1
bufferEnd < buffer[pos]
bufferEnd < buffer[bufferStart]
bufferEnd != buffer[bufferEnd]
bufferEnd < buffer[bufferEnd-1]
size(this.chars[]) < size(buffer[])-1
size(this.chars[]) < buffer[pos]
size(this.chars[]) < buffer[bufferStart]
size(this.chars[]) != buffer[bufferEnd]
size(this.chars[]) < buffer[bufferEnd-1]
size(this.chars[])-1 != buffer[bufferEnd]
size(buffer[]) < buffer[pos]
size(buffer[]) < buffer[bufferStart]
size(buffer[]) != buffer[bufferEnd]
size(buffer[]) < buffer[bufferEnd-1]
size(buffer[])-1 != buffer[bufferEnd]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT369
buffer[return] == buffer[orig(bufferStart)]
buffer[return] == orig(buffer[post(bufferStart)])
buffer[return] == orig(buffer[bufferStart])
buffer[orig(pos)] == buffer[orig(bufferEnd)-1]
buffer[orig(pos)] == orig(buffer[post(bufferEnd)-1])
buffer[orig(pos)] == orig(buffer[bufferEnd-1])
this.chars[] one of { [97, 97], [99, 98], [122, 121] }
this.chars[] sorted by >=
return == 0
orig(bufferStart) one of { 0, 9 }
this.chars[return] one of { 97, 99, 122 }
buffer[return] one of { 45, 97, 120 }
this.chars[] elements <= this.chars[return]
buffer[] elements >= return
return in buffer[]
this.chars[return] in buffer[]
return < orig(pos)
return <= orig(bufferStart)
return < orig(bufferEnd)
return < this.chars[return]
return < buffer[orig(pos)-1]
return <= buffer[orig(bufferEnd)]
orig(bufferStart) % orig(pos) == 0
orig(pos) - orig(bufferEnd) + 1 == 0
orig(pos) >= size(this.chars[])-1
orig(pos) < this.chars[return]
orig(pos) < buffer[orig(pos)-1]
orig(pos) != buffer[orig(bufferEnd)]
orig(bufferStart) != size(this.chars[])
orig(bufferStart) != size(this.chars[])-1
orig(bufferStart) < this.chars[return]
orig(bufferStart) < buffer[orig(pos)-1]
orig(bufferEnd) < this.chars[return]
orig(bufferEnd) < buffer[orig(pos)-1]
size(this.chars[]) < this.chars[return]
size(this.chars[]) < buffer[orig(pos)-1]
orig(size(buffer[])) < this.chars[return]
orig(size(buffer[])) < buffer[orig(pos)-1]
buffer[return] <= buffer[orig(pos)]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT373
return == 0
buffer[] elements >= return
return in buffer[]
this.chars[return] in buffer[]
return <= orig(pos)
return <= orig(bufferStart)
return < orig(bufferEnd)
return < this.chars[return]
return <= buffer[orig(bufferEnd)]
return < orig(buffer[post(pos)])
orig(pos) < this.chars[return]
orig(pos) < orig(buffer[post(pos)])
orig(bufferStart) < this.chars[return]
orig(bufferStart) < orig(buffer[post(pos)])
orig(bufferEnd) > size(this.chars[])
orig(bufferEnd) < this.chars[return]
orig(bufferEnd) < orig(buffer[post(pos)])
size(this.chars[]) < this.chars[return]
size(this.chars[]) < orig(buffer[post(pos)])
orig(size(buffer[])) < this.chars[return]
orig(size(buffer[])) < orig(buffer[post(pos)])
buffer[orig(pos)] <= orig(buffer[post(pos)])
buffer[orig(bufferEnd)] != orig(buffer[post(pos)])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT376
return == size(this.chars[])
return == orig(size(this.chars[]))
this.chars[return-1] == orig(buffer[post(pos)-1])
this.chars[] one of { [97, 97], [99, 98], [112, 113] }
return == 2
this.chars[return-1] one of { 97, 98, 113 }
buffer[orig(pos)] one of { 97, 99, 112 }
buffer[orig(pos)] in this.chars[]
return < this.chars[return-1]
return < buffer[return-1]
return != buffer[orig(bufferEnd)]
orig(pos) < this.chars[return-1]
orig(pos) < buffer[return-1]
orig(bufferStart) < this.chars[return-1]
orig(bufferStart) < buffer[return-1]
orig(bufferEnd) < this.chars[return-1]
orig(bufferEnd) < buffer[return-1]
orig(size(buffer[])) < this.chars[return-1]
orig(size(buffer[])) < buffer[return-1]
buffer[return] != buffer[return-1]
===========================================================================
org.apache.commons.lang3.text.StrMatcher$StringMatcher.isMatch(char[], int, int, int):::EXIT
this.chars == orig(this.chars)
this.chars[] == orig(this.chars[])
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
buffer[] == orig(buffer[])
buffer[] elements >= 0
return one of { 0, 2 }
this.chars[] elements > return
this.chars[] elements > orig(pos)
this.chars[] elements > orig(bufferStart)
this.chars[] elements > orig(bufferEnd)
this.chars[] elements > orig(size(buffer[]))
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
return <= orig(bufferEnd)
return <= size(this.chars[])
return != size(this.chars[])-1
return < size(buffer[])-1
return < buffer[return]
return < buffer[orig(pos)]
return < buffer[orig(bufferStart)]
return < buffer[orig(bufferEnd)-1]
return != orig(buffer[post(pos)])
orig(pos) < size(buffer[])-1
orig(pos) < buffer[return]
orig(pos) < buffer[orig(pos)]
orig(pos) < buffer[orig(bufferStart)]
orig(pos) < buffer[orig(bufferEnd)-1]
orig(pos) != orig(buffer[post(pos)])
orig(bufferStart) < size(buffer[])-1
orig(bufferStart) < buffer[return]
orig(bufferStart) < buffer[orig(pos)]
orig(bufferStart) < buffer[orig(bufferStart)]
orig(bufferStart) < buffer[orig(bufferEnd)-1]
orig(bufferStart) != orig(buffer[post(pos)])
orig(bufferEnd) >= size(this.chars[])
orig(bufferEnd) < size(buffer[])-1
orig(bufferEnd) < buffer[return]
orig(bufferEnd) < buffer[orig(pos)]
orig(bufferEnd) < buffer[orig(bufferStart)]
orig(bufferEnd) != buffer[orig(bufferEnd)]
orig(bufferEnd) < buffer[orig(bufferEnd)-1]
orig(bufferEnd) != orig(buffer[post(pos)])
size(this.chars[]) < size(buffer[])-1
size(this.chars[]) < buffer[return]
size(this.chars[]) < buffer[orig(pos)]
size(this.chars[]) < buffer[orig(bufferStart)]
size(this.chars[]) != buffer[orig(bufferEnd)]
size(this.chars[]) < buffer[orig(bufferEnd)-1]
size(this.chars[]) != orig(buffer[post(pos)])
size(this.chars[])-1 != buffer[orig(bufferEnd)]
size(this.chars[])-1 != orig(buffer[post(pos)])
size(buffer[])-1 != buffer[orig(bufferEnd)]
size(buffer[])-1 != orig(buffer[post(pos)])
orig(size(buffer[])) < buffer[return]
orig(size(buffer[])) < buffer[orig(pos)]
orig(size(buffer[])) < buffer[orig(bufferStart)]
orig(size(buffer[])) != buffer[orig(bufferEnd)]
orig(size(buffer[])) < buffer[orig(bufferEnd)-1]
orig(size(buffer[])) != orig(buffer[post(pos)])
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher:::OBJECT
this has only one value
===========================================================================
org.apache.commons.lang3.text.StrMatcher$TrimMatcher.TrimMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher:::CLASS
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher:::OBJECT
this.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
this.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
this.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrMatcher.StrMatcher():::EXIT
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charMatcher(char):::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.charMatcher(char):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.commaMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.commaMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.doubleQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.noneMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.noneMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.spaceMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.spaceMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.splitMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.splitMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::ENTER
str != null
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::EXIT209
===========================================================================
org.apache.commons.lang3.text.StrMatcher.stringMatcher(java.lang.String):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
return != null
return.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$StringMatcher.class
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.text.StrMatcher.tabMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.tabMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrMatcher.trimMatcher():::ENTER
===========================================================================
org.apache.commons.lang3.text.StrMatcher.trimMatcher():::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer:::CLASS
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE != null
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE has only one value
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE != null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == 0
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher != null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher != null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher != null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher != null
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == false
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher has only one value
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharMatcher.class
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$CharSetMatcher.class
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$TrimMatcher.class
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER has only one value
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER != null
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher$NoMatcher.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer:::OBJECT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == this.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == this.quoteMatcher
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher == this.trimmerMatcher
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == this.emptyAsNull
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.ignoredMatcher
this.chars == null
this.tokens.getClass().getName() == java.lang.String[].class
this.tokens[] elements != null
this.tokens[].getClass().getName() elements == java.lang.String.class
this.tokens[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
this.tokens[].toString one of { [a, b], [a, b, c, d] }
this.tokenPos >= 0
this.delimMatcher != null
this.quoteMatcher != null
this.trimmerMatcher != null
this.emptyAsNull == false
size(this.tokens[]) one of { 2, 4 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos <= this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos < size(this.tokens[])-1
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() != this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() != this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() != this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != this.tokens.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.ignoredMatcher.getClass().getName()
this.tokens.getClass().getName() != this.delimMatcher.getClass().getName()
this.tokens.getClass().getName() != this.quoteMatcher.getClass().getName()
this.tokens.getClass().getName() != this.trimmerMatcher.getClass().getName()
this.tokenPos <= size(this.tokens[])
this.delimMatcher.getClass().getName() != this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.StrTokenizer():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.addToken(java.util.List, java.lang.String):::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
list[].getClass().getName() elements == java.lang.String.class
list.getClass().getName() == java.util.ArrayList.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos <= size(list[])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != list.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != list.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != list.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != list.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.addToken(java.util.List, java.lang.String):::EXIT665
list[] == orig(list[])
list[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
tok.toString == ""
orig(tok) has only one value
orig(size(list[])) one of { 2, 4 }
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.addToken(java.util.List, java.lang.String):::EXIT672
size(list[])-1 == orig(size(list[]))
orig(tok) in list[]
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.addToken(java.util.List, java.lang.String):::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
(size(list[]) == orig(size(list[])))  ==>  (list[] == orig(list[]))
(size(list[]) == orig(size(list[])))  ==>  (list[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] })
(size(list[]) == orig(size(list[])))  ==>  (orig(list[].getClass().getName()) one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] })
(size(list[]) == orig(size(list[])))  ==>  (orig(size(list[])) one of { 2, 4 })
(size(list[]) == orig(size(list[])))  ==>  (orig(tok) has only one value)
(size(list[]) == orig(size(list[])))  ==>  (size(list[]) one of { 2, 4 })
(size(list[]) == orig(size(list[])))  ==>  (tok.toString == "")
(size(list[])-1 == orig(size(list[])))  ==>  (orig(tok) in list[])
this.ignoreEmptyTokens == true
list[].getClass().getName() elements == java.lang.String.class
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos <= size(list[])-1
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos <= orig(size(list[]))
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != orig(list.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(list.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(list.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(list.getClass().getName())
tok.toString == orig(tok.toString)
size(list[])-1 <= orig(size(list[]))
size(list[])-1 >= orig(size(list[]))-1
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.checkTokenized():::ENTER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
this.tokenPos <= size(this.tokens[])-1
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.checkTokenized():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens[].getClass().getName() == orig(this.tokens[].getClass().getName())
this.tokens[].toString == orig(this.tokens[].toString)
this.tokenPos == orig(this.tokenPos)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.tokens != null
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos < orig(size(this.tokens[]))-1
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() != orig(this.tokens.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() != orig(this.tokens.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() != orig(this.tokens.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() != orig(this.tokens.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
this.tokens.getClass().getName() == orig(this.tokens.getClass().getName())
this.tokens[] == orig(this.tokens[]) (elementwise)
orig(this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos]) in this.tokens[]
orig(this.tokens[this.tokenPos]) in this.tokens[]
this.tokens[].getClass().getName() == orig(this.tokens[].getClass().getName()) (elementwise)
this.tokens[].toString == orig(this.tokens[].toString) (elementwise)
this.tokenPos <= size(this.tokens[])-1
this.tokenPos <= orig(size(this.tokens[]))-1
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] in orig(this.tokens[])
this.tokens[this.tokenPos] in orig(this.tokens[])
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getContent():::ENTER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokenPos == size(this.tokens[])
this has only one value
this.tokens has only one value
this.tokens[] contains no nulls and has only one value, of length 4
this.tokens[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tokens[].toString == [a, b, c, d]
this.tokenPos == 4
this.ignoreEmptyTokens == true
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] has only one value
this.tokens[this.tokenPos-1] has only one value
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getContent():::EXIT1061
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getContent():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens == orig(this.tokens)
this.tokenPos == orig(this.tokenPos)
this.tokenPos == size(this.tokens[])
this.tokenPos == orig(size(this.tokens[]))
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.tokens has only one value
this.tokens[] contains no nulls and has only one value, of length 4
this.tokens[].getClass().getName() == [java.lang.String, java.lang.String, java.lang.String, java.lang.String]
this.tokens[].toString == [a, b, c, d]
this.tokenPos == 4
this.ignoreEmptyTokens == true
return == null
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] has only one value
this.tokens[this.tokenPos-1] has only one value
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getDelimiterMatcher():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getDelimiterMatcher():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getIgnoredMatcher():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getIgnoredMatcher():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getQuoteMatcher():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getQuoteMatcher():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getTokenArray():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.tokens[] contains no nulls and has only one value, of length 2
this.tokens[].getClass().getName() == [java.lang.String, java.lang.String]
this.tokens[].toString == [a, b]
this.tokens[].toString elements one of { "a", "b" }
this.ignoreEmptyTokens == true
size(this.tokens[]) == 2
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] has only one value
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getTokenArray():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens[] == return[]
this.tokens[].getClass().getName() == orig(this.tokens[].getClass().getName())
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return[].toString == orig(this.tokens[].toString)
this.ignoreEmptyTokens == true
return.getClass().getName() == java.lang.String[].class
return[].toString one of { [a, b], [a, b, c, d] }
size(return[]) one of { 2, 4 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
this.tokens.getClass().getName() == return.getClass().getName()
this.tokens[].getClass().getName() == orig(this.tokens[].getClass().getName()) (elementwise)
return.getClass().getName() == orig(this.tokens.getClass().getName())
return[] == orig(this.tokens[]) (elementwise)
orig(this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos]) in return[]
return[].toString == orig(this.tokens[].toString) (elementwise)
return[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] in orig(this.tokens[])
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getTrimmerMatcher():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.getTrimmerMatcher():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.hasNext():::ENTER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.hasNext():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.tokenPos == orig(this.tokenPos)
this.ignoreEmptyTokens == return
return == orig(this.ignoreEmptyTokens)
return == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
this.tokens.getClass().getName() == orig(this.tokens.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.hasNext():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.isIgnoreEmptyTokens():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.isIgnoreEmptyTokens():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == return
return == orig(this.ignoreEmptyTokens)
return == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.isIgnoreEmptyTokens():::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.next():::ENTER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.next():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == this.tokens[this.tokenPos-1]
return == this.tokens[orig(this.tokenPos)]
return == orig(this.tokens[post(this.tokenPos)-1])
return == orig(this.tokens[this.tokenPos])
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
this.tokens.getClass().getName() == orig(this.tokens.getClass().getName())
return.toString in this.tokens[].toString
this.tokenPos - orig(this.tokenPos) - 1 == 0
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readNextToken(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List):::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[len]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[start]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[len]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[len-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[workArea.size]
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(srcChars[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(workArea.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[len-1]
workArea.newLine == workArea.nullText
this has only one value
this.ignoreEmptyTokens == true
srcChars has only one value
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
len one of { 4, 8 }
workArea.buffer[] elements >= 0
workArea.size one of { 0, 1 }
workArea.newLine == null
tokenList[].getClass().getName() elements == java.lang.String.class
tokenList.getClass().getName() == java.util.ArrayList.class
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
srcChars[workArea.size] one of { 32, 97 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] in srcChars[]
start - 2 * size(tokenList[]) == 0
start - 2 * srcChars[start] + 194 == 0
size(tokenList[]) - srcChars[start] + 97 == 0
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readNextToken(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List):::EXIT718
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readNextToken(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List):::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[orig(len)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(start)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[post(len)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(len)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(len)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[workArea.size]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[return]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[return-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[orig(len)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[orig(len)-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(workArea.size)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(return)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(return)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[len])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[start])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[len])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[len-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[workArea.size])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
srcChars[] == orig(srcChars[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(workArea.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[workArea.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[return-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(len)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(workArea.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(return)-1])
workArea.buffer == orig(workArea.buffer)
workArea.newLine == workArea.nullText
workArea.newLine == orig(workArea.newLine)
workArea.newLine == orig(workArea.nullText)
size(tokenList[])-1 == orig(size(tokenList[]))
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[workArea.size-1]
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == orig(srcChars[post(workArea.size)-1])
workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[orig(start)]
tokenList[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == tokenList[workArea.size-1]
workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[orig(start)]
workArea.buffer[this.tokenPos] == srcChars[orig(start)]
srcChars[orig(start)] == workArea.buffer[workArea.size-1]
srcChars[orig(start)] == workArea.buffer[orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)]
srcChars[orig(start)] == workArea.buffer[orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)]
srcChars[orig(start)] == workArea.buffer[orig(this.tokenPos)]
workArea.buffer[orig(start)] == workArea.buffer[orig(workArea.size)]
orig(workArea.buffer[post(workArea.size)-1]) == orig(workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos])
this.ignoreEmptyTokens == true
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
workArea.buffer[] elements >= 0
workArea.size == 1
workArea.newLine == null
tokenList[].getClass().getName() elements == java.lang.String.class
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
srcChars[orig(workArea.size)] one of { 32, 97 }
workArea.buffer[orig(start)] one of { 0, 97 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
workArea.buffer[orig(start)] in srcChars[]
orig(workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos]) in srcChars[]
return - orig(start) - 2 == 0
return - 2 * srcChars[orig(start)] + 192 == 0
orig(start) - 2 * srcChars[orig(start)] + 194 == 0
workArea.buffer[orig(start)] % srcChars[orig(start)] == 0
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readWithQuotes(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List, int, int):::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == quoteStart
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == quoteLen
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[len]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[start]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[len]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[len-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[workArea.size]
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(srcChars[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(workArea.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[len-1]
workArea.newLine == workArea.nullText
this has only one value
this.ignoreEmptyTokens == true
srcChars has only one value
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
len one of { 4, 8 }
workArea.buffer[] elements >= 0
workArea.size one of { 0, 1 }
workArea.newLine == null
tokenList[].getClass().getName() elements == java.lang.String.class
tokenList.getClass().getName() == java.util.ArrayList.class
srcChars[workArea.size] one of { 32, 97 }
srcChars[quoteStart] == 97
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
workArea.buffer[quoteStart] in srcChars[]
start - 2 * size(tokenList[]) == 0
start - 2 * srcChars[start] + 194 == 0
size(tokenList[]) - srcChars[start] + 97 == 0
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readWithQuotes(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List, int, int):::EXIT782
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.readWithQuotes(char[], int, int, org.apache.commons.lang3.text.StrBuilder, java.util.List, int, int):::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(quoteStart)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(quoteLen)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[orig(len)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(start)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[post(len)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(len)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(len)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[workArea.size]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[return]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[return-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[orig(len)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == workArea.buffer[orig(len)-1]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(workArea.size)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(return)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[post(return)-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[len])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[start])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[len])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[len-1])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(workArea.buffer[workArea.size])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
srcChars[] == orig(srcChars[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(workArea.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[workArea.size]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[return-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == srcChars[orig(len)-1]
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(len)-1])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(workArea.size)])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(srcChars[post(return)-1])
workArea.buffer == orig(workArea.buffer)
workArea.newLine == workArea.nullText
workArea.newLine == orig(workArea.newLine)
workArea.newLine == orig(workArea.nullText)
size(tokenList[])-1 == orig(size(tokenList[]))
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[workArea.size-1]
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == orig(srcChars[post(workArea.size)-1])
workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[orig(start)]
tokenList[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == tokenList[workArea.size-1]
workArea.buffer[org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos] == srcChars[orig(start)]
workArea.buffer[this.tokenPos] == srcChars[orig(start)]
srcChars[orig(start)] == workArea.buffer[workArea.size-1]
srcChars[orig(start)] == workArea.buffer[orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)]
srcChars[orig(start)] == workArea.buffer[orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)]
srcChars[orig(start)] == workArea.buffer[orig(this.tokenPos)]
srcChars[orig(start)] == workArea.buffer[orig(quoteStart)]
srcChars[orig(start)] == workArea.buffer[orig(quoteLen)]
workArea.buffer[orig(start)] == workArea.buffer[orig(workArea.size)]
orig(workArea.buffer[post(workArea.size)-1]) == orig(workArea.buffer[quoteStart])
this.ignoreEmptyTokens == true
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
workArea.buffer[] elements >= 0
workArea.size == 1
workArea.newLine == null
tokenList[].getClass().getName() elements == java.lang.String.class
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
srcChars[orig(workArea.size)] one of { 32, 97 }
workArea.buffer[orig(start)] one of { 0, 97 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
workArea.buffer[orig(start)] in srcChars[]
orig(workArea.buffer[quoteStart]) in srcChars[]
return - orig(start) - 2 == 0
return - 2 * srcChars[orig(start)] + 192 == 0
orig(start) - 2 * srcChars[orig(start)] + 194 == 0
workArea.buffer[orig(start)] % srcChars[orig(start)] == 0
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.reset():::ENTER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokenPos == size(this.tokens[])
this has only one value
this.tokens has only one value
this.tokens[] contains no nulls and has only one value, of length 2
this.tokens[].getClass().getName() == [java.lang.String, java.lang.String]
this.tokens[].toString == [a, b]
this.tokens[].toString elements one of { "a", "b" }
this.tokenPos == 2
this.ignoreEmptyTokens == true
this.tokens[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] has only one value
this.tokens[this.tokenPos-1] has only one value
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.reset():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == return.chars
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == return.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == return.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == return.emptyAsNull
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == return.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.ignoreEmptyTokens == true
return has only one value
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == delim.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setDelimiterMatcher(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(delim)
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == orig(this.emptyAsNull)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(delim.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setEmptyTokenAsNull(boolean):::ENTER
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
this.emptyAsNull == emptyAsNull
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setEmptyTokenAsNull(boolean):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(this.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(this.delimMatcher)
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == orig(this.emptyAsNull)
this.emptyAsNull == orig(emptyAsNull)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setIgnoreEmptyTokens(boolean):::ENTER
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
this.emptyAsNull == ignoreEmptyTokens
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setIgnoreEmptyTokens(boolean):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(this.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(this.delimMatcher)
this.emptyAsNull == this.ignoreEmptyTokens
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == return.ignoreEmptyTokens
this.emptyAsNull == orig(this.emptyAsNull)
this.emptyAsNull == orig(ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == ignored
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == ignored.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setIgnoredMatcher(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(ignored)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(this.delimMatcher)
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == orig(this.emptyAsNull)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(ignored.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == quote
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == quote.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setQuoteMatcher(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(quote)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(this.delimMatcher)
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == orig(this.emptyAsNull)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(quote.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher):::ENTER
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == trimmer
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == trimmer.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.setTrimmerMatcher(org.apache.commons.lang3.text.StrMatcher):::EXIT
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == return.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(trimmer)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == return.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == return.ignoredMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.chars == return.chars
this.chars == orig(this.chars)
this.tokens == return.tokens
this.tokens == orig(this.tokens)
this.tokenPos == return.tokenPos
this.tokenPos == orig(this.tokenPos)
this.delimMatcher == return.delimMatcher
this.delimMatcher == orig(this.delimMatcher)
this.emptyAsNull == return.emptyAsNull
this.emptyAsNull == orig(this.emptyAsNull)
this.ignoreEmptyTokens == return.ignoreEmptyTokens
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == orig(this)
this.tokens == null
this.tokenPos == 0
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == return.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == return.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(trimmer.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == return.ignoredMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.size():::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
this has only one value
this.ignoreEmptyTokens == true
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.size():::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.tokens == orig(this.tokens)
this.tokens[] == orig(this.tokens[])
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
return == size(this.tokens[])
return == orig(size(this.tokens[]))
this.ignoreEmptyTokens == true
return one of { 2, 4 }
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
this.tokens.getClass().getName() == orig(this.tokens.getClass().getName())
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.tokenize(char[], int, int):::ENTER
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == offset
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[count]
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
size(srcChars[]) == srcChars[count-1]
this has only one value
this.ignoreEmptyTokens == true
srcChars has only one value
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
count one of { 4, 8 }
size(srcChars[]) == 32
srcChars[offset] == 97
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.tokenize(char[], int, int):::EXIT653
===========================================================================
org.apache.commons.lang3.text.StrTokenizer.tokenize(char[], int, int):::EXIT
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.chars == orig(this.chars)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == this.tokens
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokens == orig(this.tokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == this.tokenPos
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(this.tokenPos)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(offset)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == srcChars[orig(count)]
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[post(count)])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos == orig(srcChars[count])
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoreEmptyTokens)
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.emptyAsNull == orig(this.emptyAsNull)
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher == org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == this.delimMatcher
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER == orig(this.delimMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher)
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER)
org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.quoteMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == this.trimmerMatcher
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.quoteMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.ignoredMatcher)
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER == orig(this.trimmerMatcher)
this.ignoreEmptyTokens == orig(this.ignoreEmptyTokens)
srcChars[] == orig(srcChars[])
orig(size(srcChars[])) == srcChars[orig(count)-1]
orig(size(srcChars[])) == orig(srcChars[post(count)-1])
this.ignoreEmptyTokens == true
srcChars[] one of { [97, 32, 98, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [97, 32, 98, 32, 99, 32, 100, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }
srcChars[] elements >= 0
return[].getClass().getName() elements == java.lang.String.class
return[].getClass().getName() one of { [java.lang.String, java.lang.String], [java.lang.String, java.lang.String, java.lang.String, java.lang.String] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 2, 4 }
srcChars[org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.tokenPos] == 97
org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName() == org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TAB_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPACE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SINGLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.COMMA_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.DOUBLE_QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == this.delimMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.QUOTE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.SPLIT_MATCHER.getClass().getName() == orig(this.delimMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.trimmerMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.TRIM_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.quoteMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == this.trimmerMatcher.getClass().getName()
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.CSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrTokenizer.TSV_TOKENIZER_PROTOTYPE.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.quoteMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.ignoredMatcher.getClass().getName())
org.apache.commons.lang3.text.StrMatcher.NONE_MATCHER.getClass().getName() == orig(this.trimmerMatcher.getClass().getName())
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message.toString one of { "Failed to invoke appendFixedWidthPadLeft correctly", "Failed to invoke appendFixedWidthPadRight correctly" }
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT112
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
message.toString one of { "Failed to invoke appendFixedWidthPadLeft correctly", "Failed to invoke appendFixedWidthPadRight correctly" }
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
expected >= -1
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == actual
expected >= -1
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
org.junit.Assert.assertFalse(boolean):::EXIT
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::ENTER
message.toString == "The contains(char) method is looking beyond the end of the string"
condition == false
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == "The contains(char) method is looking beyond the end of the string"
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object):::ENTER
message.toString one of { "toCharArray() result is null", "toCharArray(int,int) result is null" }
object.getClass().getName() == char[].class
===========================================================================
org.junit.Assert.assertNotNull(java.lang.String, java.lang.Object):::EXIT
message.toString one of { "toCharArray() result is null", "toCharArray(int,int) result is null" }
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object):::ENTER
unexpected.getClass().getName() == char[].class
unexpected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertNotSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
unexpected.getClass().getName() == char[].class
unexpected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertNotSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT769
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(boolean):::EXIT
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT124
orig(expected) == orig(actual)
orig(expected) == null
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT124;condition="return == true"
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT127
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT127;condition="return == true"
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.equalsRegardingNull(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"

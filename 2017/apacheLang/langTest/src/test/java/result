====================
org.apache.commons.lang3.ArrayUtils.clone(java.lang.Object[]):::EXIT
====================
org.apache.commons.lang3.ArrayUtils.isEmpty(char[]):::ENTER
array[] elements > size(array[])
====================
org.apache.commons.lang3.ArrayUtils.isEmpty(char[]):::EXIT
array[] == []
return == true
====================
org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[]):::ENTER
====================
org.apache.commons.lang3.ArrayUtils.isEmpty(java.lang.Object[]):::EXIT
array[] == []
return == true
====================
org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ArrayUtils.isEquals(java.lang.Object, java.lang.Object):::EXIT
====================
org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.Object[]):::EXIT
array[] == orig(array[])
(return == false)  ==>  (array[] == [])
(return == false)  ==>  (orig(array.getClass().getName()) == java.lang.Object[].class)
====================
org.apache.commons.lang3.ArrayUtils.isNotEmpty(java.lang.Object[]):::EXIT
array[] == []
return == false
orig(array.getClass().getName()) == java.lang.Object[].class
====================
org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[]):::EXIT
====================
org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[], int, int):::ENTER
endIndexExclusive == size(array[])
startIndexInclusive == 0
endIndexExclusive one of { 0, 1, 3 }
size(array[]) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.ArrayUtils.reverse(java.lang.Object[], int, int):::EXIT
array[] is the reverse of orig(array[])
====================
org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, int, int):::ENTER
searchChar > start
====================
org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, int, int):::EXIT
return one of { 2, 5 }
orig(cs.getClass().getName()) == java.lang.StringBuilder.class
orig(searchChar) == 98
orig(start) one of { 0, 3 }
====================
org.apache.commons.lang3.CharSequenceUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
searchChar.getClass().getName() == java.lang.String.class
start >= -1
====================
org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence, int, int):::ENTER
searchChar one of { 97, 98 }
searchChar > start
====================
org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence, int, int):::EXIT
return one of { 2, 5 }
orig(cs.getClass().getName()) == java.lang.StringBuilder.class
orig(searchChar) == 98
orig(start) one of { 2, 8 }
====================
org.apache.commons.lang3.CharSequenceUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
searchChar.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::ENTER
thisStart >= 0
start == 0
length >= 0
thisStart >= start
start <= length
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::EXIT
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::EXIT
return == orig(ignoreCase)
return == false
orig(thisStart) one of { 0, 3 }
orig(length) == 3
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::EXIT
return == true
orig(ignoreCase) == false
orig(thisStart) one of { 0, 3 }
orig(length) == 3
orig(thisStart) <= orig(length)
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::EXIT
(return == false)  ==>  (orig(length) >= 1)
(return == false)  ==>  (orig(start) < orig(length))
====================
org.apache.commons.lang3.CharSequenceUtils.regionMatches(java.lang.CharSequence, boolean, int, java.lang.CharSequence, int, int):::EXIT
return == false
orig(length) >= 1
orig(start) < orig(length)
====================
org.apache.commons.lang3.CharSequenceUtils.toCharArray(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT
(return == false)  ==>  (orig(ch) one of { 9, 127, 252 })
====================
org.apache.commons.lang3.CharUtils.isAsciiPrintable(char):::EXIT
return == false
orig(ch) one of { 9, 127, 252 }
====================
org.apache.commons.lang3.JavaVersion.JavaVersion(java.lang.String, int, float, java.lang.String):::EXIT
this.value == orig(value)
this.name == orig(name)
this.name.toString == name.toString
$hidden$1.toString > name.toString
$hidden$1.toString == orig($hidden$1.toString)
name.toString == orig(name.toString)
====================
org.apache.commons.lang3.JavaVersion.get(java.lang.String):::EXIT
====================
org.apache.commons.lang3.JavaVersion.maxVersion():::EXIT
====================
org.apache.commons.lang3.JavaVersion.toFloatVersion(java.lang.String):::ENTER
value has only one value
value.toString == "1.8.0_111"
====================
org.apache.commons.lang3.JavaVersion.toFloatVersion(java.lang.String):::EXIT
value.toString == "1.8.0_111"
return == 1.8
value.toString == orig(value.toString)
====================
org.apache.commons.lang3.ObjectUtils$Null.readResolve():::ENTER
this has only one value
====================
org.apache.commons.lang3.ObjectUtils.CONST(boolean):::ENTER
v == true
====================
org.apache.commons.lang3.ObjectUtils.CONST(boolean):::EXIT
====================
org.apache.commons.lang3.ObjectUtils.CONST(byte):::EXIT
return == orig(v)
return one of { 3, 127 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(char):::EXIT
return == orig(v)
return one of { 3, 97 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(double):::EXIT
return == orig(v)
return one of { 1.0, 3.0 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(float):::EXIT
return == orig(v)
return one of { 1.0, 3.0 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(int):::EXIT
return == orig(v)
return one of { 3, 123 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(java.lang.Object):::EXIT
return == orig(v)
return has only one value
return.getClass().getName() == java.lang.String.class
return.getClass().getName() == orig(v.getClass().getName())
====================
org.apache.commons.lang3.ObjectUtils.CONST(long):::EXIT
return == orig(v)
return one of { 3, 123 }
====================
org.apache.commons.lang3.ObjectUtils.CONST(short):::EXIT
return == orig(v)
return one of { 3, 123 }
====================
org.apache.commons.lang3.ObjectUtils.CONST_BYTE(int):::EXIT
return == orig(v)
return == 127
====================
org.apache.commons.lang3.ObjectUtils.CONST_SHORT(int):::EXIT
return == orig(v)
return == 127
====================
org.apache.commons.lang3.ObjectUtils.clone(java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.clone(java.lang.Object):::EXIT
return == null
orig(obj.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.ObjectUtils.cloneIfPossible(java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable):::ENTER
c1.getClass().getName() == java.lang.Integer.class
c2.getClass().getName() == java.lang.Integer.class
c1.getClass().getName() == c2.getClass().getName()
====================
org.apache.commons.lang3.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable, boolean):::ENTER
c1.getClass().getName() == c2.getClass().getName()
====================
org.apache.commons.lang3.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable, boolean):::EXIT
return one of { -1, 1 }
orig(c1) == null
====================
org.apache.commons.lang3.ObjectUtils.compare(java.lang.Comparable, java.lang.Comparable, boolean):::EXIT
orig(c1) != null
orig(c2) != null
====================
org.apache.commons.lang3.ObjectUtils.defaultIfNull(java.lang.Object, java.lang.Object):::ENTER
object.getClass().getName() == java.lang.String.class
defaultValue has only one value
defaultValue.getClass().getName() == java.lang.String.class
object.getClass().getName() == defaultValue.getClass().getName()
====================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::ENTER
object1.getClass().getName() == java.lang.String.class
object2.getClass().getName() == java.lang.String.class
object1.getClass().getName() == object2.getClass().getName()
====================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT
====================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT
====================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT
====================
org.apache.commons.lang3.ObjectUtils.equals(java.lang.Object, java.lang.Object):::EXIT
orig(object1) == orig(object2)
return == true
====================
org.apache.commons.lang3.ObjectUtils.firstNonNull(java.lang.Object[]):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.firstNonNull(java.lang.Object[]):::EXIT
values[] elements == null
return == null
orig(values.getClass().getName()) == java.lang.Object[].class
orig(size(values[])) one of { 0, 1, 2 }
values[] elements == return
====================
org.apache.commons.lang3.ObjectUtils.hashCode(java.lang.Object):::ENTER
obj.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.ObjectUtils.hashCodeMulti(java.lang.Object[]):::ENTER
objects.getClass().getName() == java.lang.Object[].class
====================
org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.Appendable, java.lang.Object):::ENTER
appendable has only one value
appendable.getClass().getName() == java.lang.StringBuilder.class
object has only one value
object.getClass().getName() == java.lang.Integer.class
====================
org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.Object):::EXIT
====================
org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuffer, java.lang.Object):::ENTER
buffer has only one value
object has only one value
object.getClass().getName() == java.lang.Integer.class
====================
org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuilder, java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.identityToString(org.apache.commons.lang3.text.StrBuilder, java.lang.Object):::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(builder.buffer[])
builder.size == builder.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
builder.size == builder.buffer[builder.size]
builder.newLine == builder.nullText
builder has only one value
builder.buffer has only one value
builder.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
builder.buffer[] elements == 0
builder.size == 0
builder.newLine == null
object has only one value
object.getClass().getName() == java.lang.Integer.class
builder.buffer[] elements == builder.size
====================
org.apache.commons.lang3.ObjectUtils.max(java.lang.Comparable[]):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.median(java.lang.Comparable[]):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.median(java.util.Comparator, java.lang.Object[]):::ENTER
comparator has only one value
comparator.getClass().getName() == org.apache.commons.lang3.ObjectUtilsTest$CharSequenceComparator.class
items.getClass().getName() == java.lang.CharSequence[].class
====================
org.apache.commons.lang3.ObjectUtils.min(java.lang.Comparable[]):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.mode(java.lang.Object[]):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.mode(java.lang.Object[]):::EXIT
items[] == []
return == null
orig(items.getClass().getName()) == java.lang.Object[].class
====================
org.apache.commons.lang3.ObjectUtils.notEqual(java.lang.Object, java.lang.Object):::ENTER
object1.getClass().getName() == java.lang.String.class
object2.getClass().getName() == java.lang.String.class
object1.getClass().getName() == object2.getClass().getName()
====================
org.apache.commons.lang3.ObjectUtils.notEqual(java.lang.Object, java.lang.Object):::EXIT
return == true
====================
org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object):::ENTER
====================
org.apache.commons.lang3.ObjectUtils.toString(java.lang.Object, java.lang.String):::ENTER
obj.getClass().getName() == java.lang.Boolean.class
nullStr has only one value
nullStr.toString == "bar"
====================
org.apache.commons.lang3.RandomStringUtils.RandomStringUtils():::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.random(int):::EXIT
return.toString one of {c~}
====================
org.apache.commons.lang3.RandomStringUtils.random(int, boolean, boolean):::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.random(int, char[]):::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean):::ENTER
count one of { 10, 50, 5000 }
start one of { 0, 32 }
end one of { 0, 127 }
count != start
count != end
start <= end
====================
org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random):::ENTER
start one of { 0, 32 }
end one of { 0, 3, 127 }
chars[] elements one of { 97, 98, 99 }
chars[] one of { [97], [97, 98, 99] }
chars[] sorted by <
size(chars[]) one of { 1, 3 }
chars[start] == 97
count != start
count != end
chars[] elements > count
count % size(chars[]) == 0
count > size(chars[])
count < chars[start]
start <= end
chars[] elements > start
start <= size(chars[])-1
start < chars[start]
chars[] elements > end
end % size(chars[]) == 0
end <= size(chars[])
end >= size(chars[])-1
end < chars[start]
chars[] elements > size(chars[])
chars[] elements >= chars[start]
size(chars[]) < chars[start]
====================
org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random):::EXIT
chars[] == orig(chars[])
orig(chars[post(start)]) == chars[orig(start)]
chars[] elements one of { 97, 98, 99 }
chars[] one of { [97], [97, 98, 99] }
chars[] sorted by <
orig(chars[post(end)-1]) one of { 97, 99 }
chars[orig(start)] == 97
chars[] elements > orig(count)
chars[] elements > orig(start)
chars[] elements > orig(end)
chars[] elements > orig(size(chars[]))
chars[] elements <= orig(chars[post(end)-1])
chars[] elements >= chars[orig(start)]
orig(count) < orig(chars[post(end)-1])
orig(count) < chars[orig(start)]
orig(start) <= size(chars[])-1
orig(start) < orig(chars[post(end)-1])
orig(start) < chars[orig(start)]
orig(end) >= size(chars[])-1
orig(end) < orig(chars[post(end)-1])
orig(end) < chars[orig(start)]
orig(size(chars[])) < orig(chars[post(end)-1])
orig(size(chars[])) < chars[orig(start)]
orig(chars[post(end)-1]) >= chars[orig(start)]
====================
org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(int):::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(int):::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.randomAscii(int):::EXIT
====================
org.apache.commons.lang3.RandomStringUtils.randomNumeric(int):::EXIT
====================
org.apache.commons.lang3.RandomUtils.nextBytes(int):::ENTER
count one of { 0, 20 }
====================
org.apache.commons.lang3.RandomUtils.nextDouble(double, double):::ENTER
startInclusive one of { 0.0, 33.0, 42.1 }
====================
org.apache.commons.lang3.RandomUtils.nextDouble(double, double):::EXIT
orig(startInclusive) one of { 0.0, 33.0 }
orig(endInclusive) one of { 42.0, 9.223372036854776E18, 1.7976931348623157E308 }
====================
org.apache.commons.lang3.RandomUtils.nextFloat(float, float):::ENTER
startInclusive one of { 0.0, 33.0, 42.1 }
endInclusive one of { 42.0, 42.1, 3.4028235E38 }
====================
org.apache.commons.lang3.RandomUtils.nextFloat(float, float):::EXIT
return one of { 39.950832, 5.849483E37 }
orig(startInclusive) one of { 0.0, 33.0 }
orig(endInclusive) one of { 42.0, 3.4028235E38 }
====================
org.apache.commons.lang3.RandomUtils.nextInt(int, int):::ENTER
startInclusive one of { 0, 33, 42 }
endExclusive one of { 42, 2147483647 }
====================
org.apache.commons.lang3.RandomUtils.nextInt(int, int):::EXIT
return one of { 33, 1413568787 }
orig(startInclusive) one of { 0, 33 }
====================
org.apache.commons.lang3.RandomUtils.nextLong(long, long):::ENTER
startInclusive one of { 0, 33, 42 }
endExclusive one of { 42, 9223372036854775807L }
====================
org.apache.commons.lang3.RandomUtils.nextLong(long, long):::EXIT
return one of { 40, 7866062262328430592L }
orig(startInclusive) one of { 0, 33 }
====================
org.apache.commons.lang3.Range$ComparableComparator.ComparableComparator(java.lang.String, int):::EXIT
$hidden$1.toString == "INSTANCE"
$hidden$1.toString == orig($hidden$1.toString)
====================
org.apache.commons.lang3.Range$ComparableComparator.compare(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE == orig(this)
org.apache.commons.lang3.Range$ComparableComparator.INSTANCE == orig(org.apache.commons.lang3.Range$ComparableComparator.INSTANCE)
org.apache.commons.lang3.Range$ComparableComparator.$VALUES == orig(org.apache.commons.lang3.Range$ComparableComparator.$VALUES)
org.apache.commons.lang3.Range$ComparableComparator.$VALUES[] == orig(org.apache.commons.lang3.Range$ComparableComparator.$VALUES[])
org.apache.commons.lang3.Range$ComparableComparator.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.Range$ComparableComparator.$VALUES.getClass().getName())
org.apache.commons.lang3.Range$ComparableComparator.$VALUES.getClass().getName() != orig(obj1.getClass().getName())
====================
org.apache.commons.lang3.Range.Range(java.lang.Object, java.lang.Object, java.util.Comparator):::EXIT
this.comparator.getClass().getName() == orig(comp.getClass().getName())
this.minimum.getClass().getName() == orig(element1.getClass().getName())
this.minimum.getClass().getName() == orig(element2.getClass().getName())
====================
org.apache.commons.lang3.Range.between(java.lang.Comparable, java.lang.Comparable):::EXIT
return.minimum == orig(fromInclusive)
return.maximum == orig(toInclusive)
return.comparator has only one value
return.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
return.hashCode == 0
return.toString == null
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(fromInclusive.getClass().getName())
return.minimum.getClass().getName() == orig(toInclusive.getClass().getName())
====================
org.apache.commons.lang3.Range.between(java.lang.Object, java.lang.Object, java.util.Comparator):::EXIT
return.hashCode == 0
return.toString == null
return.comparator.getClass().getName() != return.minimum.getClass().getName()
return.comparator.getClass().getName() == orig(comparator.getClass().getName())
return.minimum.getClass().getName() == return.maximum.getClass().getName()
return.minimum.getClass().getName() == orig(fromInclusive.getClass().getName())
return.minimum.getClass().getName() == orig(toInclusive.getClass().getName())
====================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT
this.toString == orig(element)
return == false
orig(element) == null
====================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT
====================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT
====================
org.apache.commons.lang3.Range.contains(java.lang.Object):::EXIT
return == true
====================
org.apache.commons.lang3.Range.is(java.lang.Comparable):::ENTER
====================
org.apache.commons.lang3.Range.is(java.lang.Object, java.util.Comparator):::ENTER
element has only one value
element.getClass().getName() == java.lang.Integer.class
comparator has only one value
comparator.getClass().getName() == org.apache.commons.lang3.RangeTest$2.class
====================
org.apache.commons.lang3.Range.isNaturalOrdering():::ENTER
this.minimum == this.maximum
this.comparator has only one value
this.comparator.getClass().getName() == org.apache.commons.lang3.Range$ComparableComparator.class
this.minimum has only one value
this.minimum.getClass().getName() == org.apache.commons.lang3.RangeTest$1.class
====================
org.apache.commons.lang3.Range.isNaturalOrdering():::EXIT
====================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader):::EXIT
this.classLoader == orig(classLoader)
this.classLoader.getClass().getName() == orig(classLoader.getClass().getName())
====================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::EXIT
====================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::ENTER
object.getClass().getName() == org.apache.commons.lang3.ObjectUtils$Null.class
====================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT
return == null
====================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.ObjectUtils$Null.class
====================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::ENTER
obj has only one value
obj.getClass().getName() == org.apache.commons.lang3.ObjectUtils$Null.class
outputStream has only one value
outputStream.getClass().getName() == java.io.ByteArrayOutputStream.class
====================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CsvEscaper():::EXIT
====================
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_DELIMITER == org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[orig(index)]
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[])
return one of { 1, 7 }
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[orig(index)] == 44
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_DELIMITER > return
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE > return
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR.toString == orig(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_QUOTE_STR.toString)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] elements > return
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] elements > orig(index)
org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[] elements <= org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[orig(index)]
return > orig(index)
return != size(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[])
return != size(org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[])-1
return < org.apache.commons.lang3.StringEscapeUtils$CsvEscaper.CSV_SEARCH_CHARS[orig(index)]
====================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_DELIMITER == org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[index]
input.getClass().getName() == java.lang.String.class
index == 0
out.getClass().getName() == java.io.StringWriter.class
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[index] == 44
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[] elements > index
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[] elements <= org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[index]
input.getClass().getName() != out.getClass().getName()
====================
org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return one of { 9, 10 }
return > size(org.apache.commons.lang3.StringEscapeUtils$CsvUnescaper.CSV_SEARCH_CHARS[])
====================
org.apache.commons.lang3.StringEscapeUtils.StringEscapeUtils():::EXIT
====================
org.apache.commons.lang3.StringEscapeUtils.escapeCsv(java.lang.String):::EXIT
input.toString >= return.toString
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeEcmaScript(java.lang.String):::EXIT
input.toString one of { "He didn't say, \"stop!\"", "document.getElementById(\"test\").value = '<script>alert('aaa');</script>';", "\364\217\277\275" }
return.toString one of { "He didn\\'t say, \\\"stop!\\\"", "\\uDBFF\\uDFFD", "document.getElementById(\\\"test\\\").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';" }
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeHtml3(java.lang.String):::EXIT
input.toString == "\364\217\277\275"
return has only one value
input.toString == return.toString
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeJava(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeJson(java.lang.String):::EXIT
input.toString one of { "\"foo\" isn't \"bar\". specials: \010\r\n\014\t\\/", "He didn't say, \"stop!\"" }
return.toString one of { "He didn't say, \\\"stop!\\\"", "\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\\\/" }
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeXml(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeXml10(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.escapeXml11(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.unescapeCsv(java.lang.String):::EXIT
input.toString <= return.toString
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.unescapeHtml3(java.lang.String):::EXIT
input.toString == "\364\217\277\275"
return has only one value
input.toString == return.toString
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.unescapeHtml4(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.unescapeJava(java.lang.String):::EXIT
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringEscapeUtils.unescapeXml(java.lang.String):::EXIT
input.toString < return.toString
input.toString == orig(input.toString)
====================
org.apache.commons.lang3.StringUtils.StringUtils():::EXIT
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
return == orig(str)
return == null
orig(offset) one of { 0, 7, 10 }
orig(maxWidth) one of { 10, 12, 14 }
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
str.toString > return.toString
orig(offset) < orig(maxWidth)
====================
org.apache.commons.lang3.StringUtils.abbreviate(java.lang.String, int, int):::EXIT
str.toString == "abcdefghijklmno"
return.toString == "...ijklmno"
orig(str) has only one value
orig(maxWidth) == 10
str.toString > return.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::ENTER
str.toString > middle.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::EXIT
return == orig(str)
str.toString one of { "a", "abc" }
middle.toString == "."
orig(middle) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.abbreviateMiddle(java.lang.String, java.lang.String, int):::EXIT
str.toString > middle.toString
str.toString >= return.toString
str.toString == orig(str.toString)
middle.toString < return.toString
middle.toString == orig(middle.toString)
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
return == orig(str)
str.toString one of { "abc", "abcXYZ", "abcxyz" }
suffixes[] elements has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
orig(suffix) has only one value
str.toString < return.toString
====================
org.apache.commons.lang3.StringUtils.appendIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
suffix.getClass().getName() == java.lang.String.class
suffixes.getClass().getName() == java.lang.CharSequence[].class
size(suffixes[]) one of { 0, 1 }
suffix.getClass().getName() != suffixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.appendIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
suffix.getClass().getName() == java.lang.String.class
suffixes.getClass().getName() == java.lang.CharSequence[].class
size(suffixes[]) one of { 0, 1 }
suffix.getClass().getName() != suffixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.capitalize(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.capitalize(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int):::ENTER
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::ENTER
size >= -1
padChar one of { 32, 120 }
size < padChar
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::EXIT
return == orig(str)
str.toString one of { "ab", "abcd" }
orig(size) one of { 1, 2 }
orig(padChar) == 32
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, char):::EXIT
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
str.toString == "ab"
padStr.toString == " "
orig(size) one of { -1, 0, 4 }
str.toString == orig(str.toString)
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.center(java.lang.String, int, java.lang.String):::EXIT
orig(size) one of { 4, 7 }
return.toString != orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::EXIT
str.toString one of { "\n", "\r" }
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.chomp(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.chop(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.commonPrefixLength(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::ENTER
seq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
(return == false)  <==>  (orig(searchChar) one of { 32, 122 })
(return == true)  <==>  (orig(searchChar) one of { 97, 98, 99 })
(return == true)  ==>  (orig(seq) has only one value)
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, int):::EXIT
return == false
orig(searchChar) one of { 32, 122 }
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.contains(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, char[]):::EXIT
return == true
orig(size(searchChars[])) one of { 1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
searchChars.getClass().getName() == java.lang.String.class
cs.getClass().getName() == searchChars.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchCharSequences[] elements has only one value
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
orig(size(searchCharSequences[])) one of { 0, 1 }
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
orig(size(searchCharSequences[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
orig(size(searchCharSequences[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchCharSequences[] == orig(searchCharSequences[])
(return == false)  ==>  (orig(searchCharSequences.getClass().getName()) == java.lang.String[].class)
(return == false)  ==>  (orig(size(searchCharSequences[])) one of { 0, 1, 2 })
(return == true)  ==>  (orig(size(searchCharSequences[])) == 2)
====================
org.apache.commons.lang3.StringUtils.containsAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(searchCharSequences.getClass().getName()) == java.lang.String[].class
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == []
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == [55360]
searchChars[] elements == 55360
return == false
orig(cs) has only one value
orig(size(searchChars[])) == 1
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 55360, 56320, 56321 }
searchChars[] one of { [55360, 56320], [55360, 56321] }
return == false
orig(size(searchChars[])) == 2
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] one of { [44, 34, 13, 10], [46], [98] }
searchChars[] sorted by >
return == false
orig(size(searchChars[])) one of { 1, 4 }
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
(return == false)  ==>  (orig(size(searchChars[])) one of { 1, 2, 4 })
searchChars[] elements > orig(size(searchChars[]))
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, char[]):::EXIT
return == false
orig(size(searchChars[])) one of { 1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
invalidChars.toString == ""
return == true
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsNone(java.lang.CharSequence, java.lang.String):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
valid[] elements one of { 97, 98 }
valid[] sorted by <
size(valid[]) one of { 0, 1, 2 }
valid[] elements > size(valid[])
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
valid[] == orig(valid[])
(return == false)  ==>  (orig(size(valid[])) one of { 0, 1 })
(return == false)  ==>  (valid[] one of { [], [97], [98] })
(return == true)  ==>  (orig(size(valid[])) one of { 0, 1, 2 })
valid[] elements one of { 97, 98 }
valid[] sorted by <
valid[] elements > orig(size(valid[]))
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, char[]):::EXIT
valid[] one of { [], [97], [98] }
return == false
orig(size(valid[])) one of { 0, 1 }
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
validChars.toString == ""
return == false
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
(return == false)  ==>  (validChars.toString one of { "", "a", "b" })
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsOnly(java.lang.CharSequence, java.lang.String):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::ENTER
seq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.containsWhitespace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, char):::ENTER
str.getClass().getName() == java.lang.String.class
ch one of { 32, 68, 111 }
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, char):::EXIT
return one of { 5, 6 }
orig(str) has only one value
orig(ch) one of { 32, 111 }
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == java.lang.String.class
sub.getClass().getName() == java.lang.String.class
str.getClass().getName() == sub.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.countMatches(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.defaultIfBlank(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == defaultStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.defaultIfEmpty(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == defaultStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String):::ENTER
str.toString one of { "", "abc" }
====================
org.apache.commons.lang3.StringUtils.defaultString(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "abc" }
defaultStr has only one value
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::EXIT
return == orig(str)
str.toString one of { "\000\001\002\003\004\005\006\007\010\016\017\020\021\022\023\024\025\026\027\030\031\032\033!\"#$%&'", "\302\240\342\200\257" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.deleteWhitespace(java.lang.String):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
return == orig(str2)
str2.toString == "i am a robot"
orig(str1) == null
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
orig(str1) == orig(str2)
str1.toString one of { "", "abc" }
str1.toString == str2.toString
str1.toString == orig(str2.toString)
====================
org.apache.commons.lang3.StringUtils.difference(java.lang.String, java.lang.String):::EXIT
str1.toString == orig(str1.toString)
str2.toString == orig(str2.toString)
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
(return == false)  ==>  (orig(str.getClass().getName()) == java.lang.String.class)
(return == false)  ==>  (orig(suffix.getClass().getName()) == java.lang.String.class)
(return == true)  ==>  (orig(str) == null)
(return == true)  ==>  (orig(str) == orig(suffix))
(return == true)  ==>  (orig(suffix) == null)
orig(str.getClass().getName()) == java.lang.String.class
orig(suffix.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
orig(size(searchStrings[])) == 1
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchStrings[] == orig(searchStrings[])
(return == false)  ==>  (orig(string.getClass().getName()) == java.lang.String.class)
====================
org.apache.commons.lang3.StringUtils.endsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == false
orig(string.getClass().getName()) == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.endsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(cs1) == orig(cs2)
return == true
orig(cs1.getClass().getName()) == orig(cs2.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
(return == true)  ==>  (orig(cs1) has only one value)
(return == true)  ==>  (orig(cs2) has only one value)
orig(cs1.getClass().getName()) == java.lang.String.class
orig(cs1.getClass().getName()) == orig(cs2.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equals(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
(return == false)  ==>  (orig(str1.getClass().getName()) == java.lang.String.class)
(return == false)  ==>  (orig(str2.getClass().getName()) == java.lang.String.class)
(return == true)  ==>  (orig(str1) == null)
(return == true)  ==>  (orig(str1) == orig(str2))
(return == true)  ==>  (orig(str2) == null)
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.equalsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == false
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
strs[] == []
strs[].toString == []
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
strs[] elements are equal
strs[].toString elements one of { "", "abc" }
return.toString one of { "", "abc" }
orig(size(strs[])) one of { 1, 2 }
return in strs[]
strs[] elements == return
return.toString in strs[].toString
====================
org.apache.commons.lang3.StringUtils.getCommonPrefix(java.lang.String[]):::EXIT
orig(size(strs[])) == 2
====================
org.apache.commons.lang3.StringUtils.getFuzzyDistance(java.lang.CharSequence, java.lang.CharSequence, java.util.Locale):::ENTER
term.getClass().getName() == java.lang.String.class
locale has only one value
term.getClass().getName() == query.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getJaroWinklerDistance(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::ENTER
s.getClass().getName() == java.lang.String.class
s.getClass().getName() == t.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == 7
orig(s) has only one value
orig(t) has only one value
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return == orig(threshold)
orig(s) == orig(t)
return == 0
orig(s) has only one value
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(threshold) == 1
====================
org.apache.commons.lang3.StringUtils.getLevenshteinDistance(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(threshold) one of { 0, 2, 6 }
====================
org.apache.commons.lang3.StringUtils.getSetOfMatchingCharacterWithin(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
first.getClass().getName() == java.lang.String.class
limit one of { 2, 3, 5 }
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int):::ENTER
searchChar one of { 32, 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int):::EXIT
return one of { 0, 2 }
orig(searchChar) one of { 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int, int):::ENTER
searchChar one of { 32, 97, 98 }
searchChar > startPos
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, int, int):::EXIT
orig(searchChar) one of { 97, 98 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence):::ENTER
searchSeq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
searchSeq.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
size(searchChars[]) one of { 0, 1, 2 }
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 55360, 56320, 56321 }
searchChars[] one of { [55360, 56320], [55360, 56321] }
return one of { 0, 2 }
orig(size(searchChars[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, char[]):::EXIT
searchChars[] elements one of { 122, 55360, 56321 }
searchChars[] one of { [122], [55360, 56321] }
orig(size(searchChars[])) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
str.getClass().getName() == java.lang.String.class
searchStrs.getClass().getName() == java.lang.String[].class
size(searchStrs[]) one of { 0, 1, 2 }
str.getClass().getName() != searchStrs.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.String):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.indexOfAny(java.lang.CharSequence, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::ENTER
cs.getClass().getName() == java.lang.String.class
size(searchChars[]) one of { 0, 1, 2 }
searchChars[] elements > size(searchChars[])
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::EXIT
return >= 0
orig(size(searchChars[])) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, char[]):::EXIT
searchChars[] == orig(searchChars[])
searchChars[] elements > return
searchChars[] elements > orig(size(searchChars[]))
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 3 }
====================
org.apache.commons.lang3.StringUtils.indexOfAnyBut(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(cs1) == orig(cs2)
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return one of { 0, 7 }
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.String[].class
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
css[] elements are equal
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
return one of { 1, 2, 8 }
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.indexOfDifference(java.lang.CharSequence[]):::EXIT
css[] == orig(css[])
return >= -1
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(startPos) == 0
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return == orig(startPos)
return one of { 0, 5 }
orig(searchStr) has only one value
====================
org.apache.commons.lang3.StringUtils.indexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllLowerCase(java.lang.CharSequence):::EXIT
return == true
orig(cs) has only one value
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAllUpperCase(java.lang.CharSequence):::EXIT
return == true
orig(cs) has only one value
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlpha(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphaSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumeric(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAlphanumericSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyBlank(java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAnyEmpty(java.lang.CharSequence[]):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isAsciiPrintable(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isBlank(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNoneBlank(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isNoneBlank(java.lang.CharSequence[]):::EXIT
css[] contains no nulls and has only one value, of length 2
return == true
orig(css) has only one value
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.isNoneEmpty(java.lang.CharSequence[]):::ENTER
css.getClass().getName() == java.lang.CharSequence[].class
size(css[]) one of { 1, 2 }
====================
org.apache.commons.lang3.StringUtils.isNoneEmpty(java.lang.CharSequence[]):::EXIT
return == true
orig(size(css[])) == 2
====================
org.apache.commons.lang3.StringUtils.isNotBlank(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNotBlank(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumeric(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isNumericSpace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::ENTER
cs.getClass().getName() == java.lang.String.class
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.isWhitespace(java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.join(byte[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(byte[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(byte[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(char[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(char[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [49, 50])
(return has only one value)  ==>  (array[] elements one of { 49, 50 })
(return has only one value)  ==>  (return.toString == "1;2")
array[] == [49, 50]
array[] elements one of { 49, 50 }
return.toString == "1;2"
====================
org.apache.commons.lang3.StringUtils.join(char[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(char[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
return.toString one of { "1;2", "2" }
orig(array) has only one value
orig(endIndex) == 2
array[orig(endIndex)-1] == 50
====================
org.apache.commons.lang3.StringUtils.join(double[], char):::ENTER
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
separator one of { 44, 59 }
size(array[]) == 2
====================
org.apache.commons.lang3.StringUtils.join(double[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::ENTER
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::EXIT
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(double[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
return.toString one of { "", "1.0;2.0", "2.0" }
====================
org.apache.commons.lang3.StringUtils.join(float[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(float[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [1.0, 2.0])
(return has only one value)  ==>  (array[] elements one of { 1.0, 2.0 })
(return has only one value)  ==>  (return.toString == "1.0;2.0")
array[] == [1.0, 2.0]
array[] elements one of { 1.0, 2.0 }
return.toString == "1.0;2.0"
====================
org.apache.commons.lang3.StringUtils.join(float[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(float[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
return.toString one of { "1.0;2.0", "2.0" }
orig(array) has only one value
orig(endIndex) == 2
====================
org.apache.commons.lang3.StringUtils.join(int[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(int[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(int[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, char):::EXIT
return == null
orig(iterable) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, char):::EXIT
(orig(separator) == 44)  ==>  (orig(iterable) == null)
(orig(separator) == 44)  ==>  (return == null)
(orig(separator) one of { 59, 120 })  ==>  (return.toString one of { "", "foo", "foo;bar;baz" })
return.toString one of { "", "foo", "foo;bar;baz" }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, java.lang.String):::EXIT
return == orig(separator)
return == null
orig(iterable) == null
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Iterable, java.lang.String):::EXIT
separator.toString one of { "", ",", "x" }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[]):::EXIT
elements[] == orig(elements[])
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char):::EXIT
array[] == orig(array[])
(orig(separator) == 44)  ==>  (orig(array) == null)
(orig(separator) == 44)  ==>  (return == null)
(orig(separator) one of { 46, 59 })  ==>  (orig(separator) > orig(size(array[])))
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int):::EXIT
orig(startIndex) == orig(size(array[]))
orig(startIndex) one of { 0, 2 }
orig(endIndex) one of { 0, 1 }
orig(size(array[])) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], char, int, int):::EXIT
array[] == orig(array[])
orig(endIndex) >= size(array[])-1
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String):::EXIT
return == orig(separator)
return == null
orig(array) == null
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String):::EXIT
array[] == orig(array[])
separator.toString one of { "", "," }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int):::EXIT
orig(startIndex) == orig(size(array[]))
orig(startIndex) one of { 0, 2 }
orig(endIndex) one of { 0, 1 }
orig(size(array[])) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.join(java.lang.Object[], java.lang.String, int, int):::EXIT
array[] == orig(array[])
orig(endIndex) >= size(array[])-1
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return == null
orig(iterator) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return.toString one of { "", "foo" }
orig(separator) one of { 59, 120 }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, char):::EXIT
return.toString one of { "", "foo", "foo;bar;baz" }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
return == orig(separator)
return == null
orig(iterator) == null
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
separator.toString one of { ",", "x" }
return.toString one of { "", "foo" }
====================
org.apache.commons.lang3.StringUtils.join(java.util.Iterator, java.lang.String):::EXIT
separator.toString one of { "", ",", "x" }
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.join(long[], char):::EXIT
return == null
orig(array) == null
orig(separator) == 44
====================
org.apache.commons.lang3.StringUtils.join(long[], char):::EXIT
array[] == orig(array[])
(return == null)  <==>  (orig(array) == null)
(return == null)  <==>  (orig(separator) == 44)
(return has only one value)  <==>  (orig(array) has only one value)
(return has only one value)  <==>  (orig(separator) == 59)
(return has only one value)  ==>  (array[] == [1, 2])
(return has only one value)  ==>  (array[] elements one of { 1, 2 })
(return has only one value)  ==>  (orig(size(array[])) in array[])
(return has only one value)  ==>  (return.toString == "1;2")
(return has only one value)  ==>  (size(array[])-1 in array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString == "1;2"
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.join(long[], char, int, int):::EXIT
return == null
orig(array) == null
orig(startIndex) == 0
orig(endIndex) == 1
====================
org.apache.commons.lang3.StringUtils.join(long[], char, int, int):::EXIT
orig(endIndex) == orig(size(array[]))
orig(size(array[])) == array[orig(endIndex)-1]
orig(size(array[])) == orig(array[post(endIndex)-1])
orig(size(array[])) == orig(array[endIndex-1])
return.toString one of { "1;2", "2" }
orig(array) has only one value
orig(endIndex) == 2
orig(endIndex) in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator one of { 44, 59 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char):::EXIT
return has only one value
orig(array) has only one value
orig(separator) == 59
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::ENTER
array[] == [1, 2]
array[] elements one of { 1, 2 }
separator == 59
startIndex one of { 0, 1 }
endIndex one of { 0, 1, 2 }
size(array[]) == 2
size(array[]) in array[]
size(array[])-1 in array[]
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::EXIT
size(array[])-1 == array[orig(endIndex)]
size(array[])-1 == orig(array[post(endIndex)])
size(array[])-1 == orig(array[endIndex])
orig(array) has only one value
orig(endIndex) == 0
====================
org.apache.commons.lang3.StringUtils.join(short[], char, int, int):::EXIT
array[] == orig(array[])
array[] == [1, 2]
array[] elements one of { 1, 2 }
return.toString one of { "", "1;2", "2" }
size(array[])-1 in array[]
orig(size(array[])) in array[]
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchChar) == 32
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int):::EXIT
(orig(searchChar) == 32)  ==>  (orig(seq.getClass().getName()) == java.lang.String.class)
(return one of { 5, 7 })  <==>  (orig(searchChar) one of { 97, 98 })
return one of { -1, 5, 7 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchChar) == 32
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, int, int):::EXIT
(orig(searchChar) == 32)  ==>  (orig(seq.getClass().getName()) == java.lang.String.class)
(orig(searchChar) == 32)  ==>  (orig(startPos) one of { -1, 0 })
return < orig(searchChar)
return <= orig(startPos)
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(searchSeq) == null
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(seq.getClass().getName()) == java.lang.String.class
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return <= orig(startPos)
====================
org.apache.commons.lang3.StringUtils.lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
searchStrs[] == orig(searchStrs[])
return >= -1
return != orig(size(searchStrs[]))
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(startPos) one of { -1, 0 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return one of { 0, 3, 8 }
orig(searchStr) has only one value
orig(startPos) one of { 0, 8, 9 }
====================
org.apache.commons.lang3.StringUtils.lastIndexOfIgnoreCase(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
orig(str) has only one value
orig(searchStr) has only one value
orig(startPos) == 0
====================
org.apache.commons.lang3.StringUtils.lastOrdinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::ENTER
str.getClass().getName() == java.lang.String.class
searchStr.getClass().getName() == java.lang.String.class
ordinal one of { 1, 2, 42 }
str.getClass().getName() == searchStr.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::ENTER
str.toString one of { "", "foobar" }
len >= -1
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.left(java.lang.String, int):::EXIT
str.toString == "foobar"
return.toString one of { "", "foo" }
orig(str) has only one value
orig(len) one of { 0, 3 }
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int):::ENTER
str.toString one of { "", "abc" }
size one of { 2, 5 }
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::ENTER
size >= 2
size != padChar
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
return == orig(str)
str.toString == "abc"
return has only one value
orig(size) == 2
orig(padChar) == 32
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, char):::EXIT
orig(size) one of { 2, 3, 5 }
orig(padChar) one of { 32, 120, 65535 }
str.toString != return.toString
orig(size) < orig(padChar)
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::ENTER
str.toString != padStr.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
str.toString == "abc"
return has only one value
orig(size) one of { -1, 2 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
str.toString == "abc"
padStr.toString == "-+~"
return has only one value
return.toString == "-+~abc"
orig(str) has only one value
orig(size) == 6
orig(padStr) has only one value
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.leftPad(java.lang.String, int, java.lang.String):::EXIT
str.toString one of { "a", "aaa", "abc" }
padStr.toString one of { "-+", "a", "yz" }
return.toString one of { "-+-+abc", "", "yzya" }
orig(size) one of { 4, 7, 10000 }
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.length(java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String):::ENTER
str.toString one of { "", "fOo test THING" }
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String, java.util.Locale):::ENTER
str.toString one of { "", "fOo test THING" }
locale has only one value
====================
org.apache.commons.lang3.StringUtils.lowerCase(java.lang.String, java.util.Locale):::EXIT
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::ENTER
str.toString one of { "", "foobar" }
len >= -1
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::EXIT
orig(pos) one of { 0, 3, 9 }
orig(len) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.mid(java.lang.String, int, int):::EXIT
str.toString == "foobar"
return.toString one of { "", "b", "foo" }
orig(str) has only one value
orig(pos) one of { -1, 0, 3 }
orig(len) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.normalizeSpace(java.lang.String):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
orig(ordinal) one of { 1, 10, 2147483647 }
orig(lastIndex) == false
====================
org.apache.commons.lang3.StringUtils.ordinalIndexOf(java.lang.CharSequence, java.lang.CharSequence, int, boolean):::EXIT
return >= -1
====================
org.apache.commons.lang3.StringUtils.overlay(java.lang.String, java.lang.String, int, int):::EXIT
return == orig(str)
return == orig(overlay)
return == null
orig(start) one of { -2, 2 }
orig(end) one of { -4, 4 }
====================
org.apache.commons.lang3.StringUtils.overlay(java.lang.String, java.lang.String, int, int):::EXIT
str.toString one of { "", "abcdef" }
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
return == orig(str)
str.toString one of { "XYZabc", "abc", "xyzabc" }
prefixes[] elements has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence[]):::EXIT
orig(prefix) has only one value
str.toString < return.toString
====================
org.apache.commons.lang3.StringUtils.prependIfMissing(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
prefix.getClass().getName() == java.lang.String.class
prefixes.getClass().getName() == java.lang.CharSequence[].class
size(prefixes[]) one of { 0, 1 }
prefix.getClass().getName() != prefixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.prependIfMissingIgnoreCase(java.lang.String, java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
prefix.getClass().getName() == java.lang.String.class
prefixes.getClass().getName() == java.lang.CharSequence[].class
size(prefixes[]) one of { 0, 1 }
prefix.getClass().getName() != prefixes.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, char):::ENTER
str.toString one of { "", "queued" }
remove one of { 97, 117, 122 }
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, char):::EXIT
str.toString == "queued"
return has only one value
return.toString == "qeed"
orig(str) has only one value
orig(remove) == 117
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "a", "queued" }
====================
org.apache.commons.lang3.StringUtils.remove(java.lang.String, java.lang.String):::EXIT
str.toString == "queued"
remove.toString one of { "ue", "zz" }
return.toString one of { "qd", "queued" }
orig(str) has only one value
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.removeEnd(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
remove.toString == orig(remove.toString)
====================
org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "domain.com" }
remove.toString one of { "", "a" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeEndIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "www.domain", "www.domain.com." }
remove.toString == ".com"
orig(remove) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::ENTER
str.toString one of { "", "domain.com", "www.domain.com" }
remove.toString one of { "", "a", "www." }
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::EXIT
str.toString == "www.domain.com"
remove.toString == "www."
return has only one value
return.toString == "domain.com"
orig(str) has only one value
orig(remove) has only one value
====================
org.apache.commons.lang3.StringUtils.removeStart(java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "domain.com", "www.domain.com" }
remove.toString one of { "", "a", "www." }
return.toString one of { "", "domain.com" }
str.toString >= return.toString
str.toString == orig(str.toString)
remove.toString == orig(remove.toString)
====================
org.apache.commons.lang3.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "domain.com" }
remove.toString one of { "", "a" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.removeStartIgnoreCase(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString == "domain.com"
remove.toString == "www."
return has only one value
orig(remove) has only one value
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.repeat(char, int):::ENTER
ch != repeat
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::ENTER
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString one of { "a", "ab" }
orig(repeat) one of { -2, 0 }
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString one of { "a", "x" }
return.toString one of { "aaa", "xxx" }
orig(repeat) == 3
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString == "ab"
return has only one value
return.toString == "ababab"
orig(str) has only one value
orig(repeat) == 3
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, int):::EXIT
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, java.lang.String, int):::EXIT
return == orig(str)
str.toString == ""
separator.toString == "x"
orig(repeat) == 2
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.repeat(java.lang.String, java.lang.String, int):::EXIT
str.toString one of { "", "?", "ab" }
separator.toString one of { "", ", ", "x" }
return.toString one of { "", "?, ?, ?", "xx" }
str.toString == orig(str.toString)
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String):::EXIT
text.toString != searchString.toString
text.toString != replacement.toString
text.toString == orig(text.toString)
searchString.toString != return.toString
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
return == orig(text)
text.toString one of { "", "FOO", "oofoo" }
replacement.toString one of { "", "any" }
text.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.replace(java.lang.String, java.lang.String, java.lang.String, int):::EXIT
text.toString > replacement.toString
text.toString != return.toString
searchString.toString != replacement.toString
replacement.toString <= return.toString
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, char, char):::ENTER
replaceChar one of { 116, 122 }
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, char, char):::EXIT
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString != searchChars.toString
str.toString < return.toString
str.toString != orig(replaceChars.toString)
searchChars.toString != return.toString
searchChars.toString != orig(replaceChars.toString)
return.toString != orig(replaceChars.toString)
====================
org.apache.commons.lang3.StringUtils.replaceChars(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
searchChars.toString == orig(searchChars.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[]):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString <= return.toString
text.toString == orig(text.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
return == orig(text)
text.toString one of { "", "aba" }
searchList[] elements has only one value
searchList[].toString elements == "a"
searchList[].toString one of { [], [a] }
replacementList[] elements has only one value
replacementList[].toString elements == "b"
replacementList[].toString one of { [], [b] }
orig(timeToLive) one of { 0, 1 }
orig(size(searchList[])) one of { 0, 1 }
orig(size(replacementList[])) one of { 0, 1 }
text.toString == return.toString
orig(timeToLive) >= size(searchList[])-1
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
orig(repeat) == false
orig(timeToLive) == 0
orig(size(searchList[])) one of { 1, 2, 61 }
====================
org.apache.commons.lang3.StringUtils.replaceEach(java.lang.String, java.lang.String[], java.lang.String[], boolean, int):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString <= return.toString
text.toString == orig(text.toString)
====================
org.apache.commons.lang3.StringUtils.replaceEachRepeatedly(java.lang.String, java.lang.String[], java.lang.String[]):::EXIT
searchList[] == orig(searchList[])
replacementList[] == orig(replacementList[])
text.toString one of { "", "aba", "abcde" }
text.toString <= return.toString
text.toString == orig(text.toString)
size(replacementList[])-1 == size(searchList[])-1**2
size(searchList[])-1 == size(replacementList[])-1**2
====================
org.apache.commons.lang3.StringUtils.replaceOnce(java.lang.String, java.lang.String, java.lang.String):::EXIT
text.toString one of { "", "FOO", "foofoofoo" }
replacement.toString one of { "", "any" }
return.toString one of { "", "FOO", "foofoo" }
text.toString >= return.toString
text.toString == orig(text.toString)
searchString.toString == orig(searchString.toString)
replacement.toString == orig(replacement.toString)
====================
org.apache.commons.lang3.StringUtils.reverse(java.lang.String):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.reverse(java.lang.String):::EXIT
str.toString one of { "", "backwards" }
return.toString one of { "", "sdrawkcab" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.reverseDelimited(java.lang.String, char):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.reverseDelimited(java.lang.String, char):::EXIT
str.toString one of { "", "a b c", "a.b.c" }
return.toString one of { "", "a b c", "c.b.a" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
return == orig(str)
return == null
orig(len) one of { -1, 0, 2 }
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
return == orig(str)
orig(len) one of { 0, 2, 80 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.right(java.lang.String, int):::EXIT
str.toString one of { "", "foobar" }
return.toString one of { "", "bar", "foobar" }
str.toString >= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int):::EXIT
str.toString one of { "", "abc" }
return.toString one of { "     ", "abc", "abc  " }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
return == orig(str)
return == null
orig(size) == 5
orig(padChar) == 32
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
str.toString == "aaa"
return has only one value
return.toString == ""
orig(str) has only one value
orig(size) == 10000
orig(padChar) == 97
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, char):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
return == orig(str)
padStr.toString == "-+"
return == null
orig(size) one of { 5, 8 }
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
orig(size) one of { 4, 5, 7 }
orig(padStr.toString) one of { "", " " }
str.toString < return.toString
return.toString > orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
str.toString == "abc"
padStr.toString == "-+~"
return has only one value
return.toString == "abc-+"
orig(str) has only one value
orig(size) == 5
orig(padStr) has only one value
padStr.toString == orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.rightPad(java.lang.String, int, java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
str.toString != orig(padStr.toString)
return.toString != orig(padStr.toString)
====================
org.apache.commons.lang3.StringUtils.score(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == 0.0
orig(first) has only one value
orig(second) has only one value
====================
org.apache.commons.lang3.StringUtils.score(java.lang.CharSequence, java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, char):::EXIT
return.getClass().getName() == java.lang.String[].class
size(return[]) one of { 0, 1, 3 }
str.toString == orig(str.toString)
orig(separatorChar) > size(return[])
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
size(return[]) one of { 0, 1, 3 }
str.toString != separatorChars.toString
str.toString == orig(str.toString)
separatorChars.toString == orig(separatorChars.toString)
====================
org.apache.commons.lang3.StringUtils.split(java.lang.String, java.lang.String, int):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
str.toString != separatorChars.toString
str.toString == orig(str.toString)
separatorChars.toString == orig(separatorChars.toString)
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String):::EXIT
return.getClass().getName() == java.lang.String[].class
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String, boolean):::EXIT
return == null
orig(str) == null
====================
org.apache.commons.lang3.StringUtils.splitByCharacterType(java.lang.String, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.splitByCharacterTypeCamelCase(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String):::ENTER
separator.toString one of { ".", ":", "aeiouy" }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparator(java.lang.String, java.lang.String, int):::ENTER
str.toString one of { "", "ab   de fg", "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously" }
separator.toString one of { ".", "aeiouy" }
max one of { 2, 3 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorPreserveAllTokens(java.lang.String, java.lang.String, int):::ENTER
separator.toString one of { ".", ":", "::" }
max one of { -1, 4 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::ENTER
str.toString != separator.toString
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separator.toString == "."
return has only one value
return[] == []
return[].toString == []
orig(separator) has only one value
orig(max) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.splitByWholeSeparatorWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separator.toString one of { ":", "::", "aeiouy" }
orig(max) one of { -1, 2, 4 }
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, char):::ENTER
separatorChar one of { 32, 46 }
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String):::ENTER
str.toString != separatorChars.toString
====================
org.apache.commons.lang3.StringUtils.splitPreserveAllTokens(java.lang.String, java.lang.String, int):::ENTER
max >= -1
str.toString != separatorChars.toString
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::ENTER
separatorChar one of { 32, 46 }
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::EXIT
return has only one value
return[] == []
return[].toString == []
orig(separatorChar) == 46
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, char, boolean):::EXIT
return.getClass().getName() == java.lang.String[].class
return[] elements != null
str.toString == orig(str.toString)
orig(separatorChar) > size(return[])
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
separatorChars.toString == "."
return == null
orig(str) == null
orig(max) one of { -1, 3 }
====================
org.apache.commons.lang3.StringUtils.splitWorker(java.lang.String, java.lang.String, int, boolean):::EXIT
size(return[]) >= 1
orig(max) <= size(return[])
orig(max) != size(return[])-1
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence):::ENTER
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::ENTER
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
orig(str) == orig(prefix)
orig(str) == null
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == false
orig(str.getClass().getName()) == java.lang.String.class
orig(str.getClass().getName()) == orig(prefix.getClass().getName())
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWith(java.lang.CharSequence, java.lang.CharSequence, boolean):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::ENTER
string.getClass().getName() != searchStrings.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
====================
org.apache.commons.lang3.StringUtils.startsWithAny(java.lang.CharSequence, java.lang.CharSequence[]):::EXIT
return == true
orig(size(searchStrings[])) one of { 1, 2, 3 }
====================
org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::ENTER
str.getClass().getName() == java.lang.String.class
prefix.getClass().getName() == java.lang.String.class
str.getClass().getName() == prefix.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.startsWithIgnoreCase(java.lang.CharSequence, java.lang.CharSequence):::EXIT
return == true
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.strip(java.lang.String, java.lang.String):::EXIT
stripChars.toString != return.toString
stripChars.toString != orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.stripAccents(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripAccents(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[]):::ENTER
strs.getClass().getName() == java.lang.String[].class
size(strs[]) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[], java.lang.String):::ENTER
strs.getClass().getName() == java.lang.String[].class
stripChars.toString == "."
size(strs[]) one of { 0, 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripAll(java.lang.String[], java.lang.String):::EXIT
return[].toString one of { [null], [foo, foo, foo] }
size(return[]) one of { 1, 3 }
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "\t\n\013\014\r\034\035\036\037 \341\232\200\341\240\216\342\200\200\342\200\201\342\200\202\342\200\203\342\200\204\342\200\205\342\200\206\342\200\210\342\200\211\342\200\212\342\200\250\342\200\251\342\201\237\343\200\200", "        ", "  abc  " }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.stripEnd(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
stripChars.toString == orig(stripChars.toString)
====================
org.apache.commons.lang3.StringUtils.stripStart(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString == ""
stripChars.toString one of { "", " ", "ab" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.stripStart(java.lang.String, java.lang.String):::EXIT
stripChars.toString one of { " ", ".", "ab" }
str.toString != stripChars.toString
stripChars.toString != return.toString
====================
org.apache.commons.lang3.StringUtils.stripToEmpty(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripToNull(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.stripToNull(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::ENTER
str.toString one of { "", "abc", "foo bar baz" }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::EXIT
orig(start) one of { 2, 4, 80 }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int):::EXIT
str.toString one of { "", "abc", "foo bar baz" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int, int):::EXIT
return == orig(str)
return == null
orig(start) one of { 0, 1 }
orig(end) one of { 0, 2 }
====================
org.apache.commons.lang3.StringUtils.substring(java.lang.String, int, int):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::EXIT
str.toString == "foo"
orig(str) has only one value
orig(separator) == null
====================
org.apache.commons.lang3.StringUtils.substringAfter(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::EXIT
str.toString one of { "abc", "foo" }
separator.toString == ""
====================
org.apache.commons.lang3.StringUtils.substringAfterLast(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::EXIT
str.toString == "abc"
orig(str) has only one value
====================
org.apache.commons.lang3.StringUtils.substringBefore(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "abc\r\n", "foo" }
separator.toString one of { "b", "d" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.substringBeforeLast(java.lang.String, java.lang.String):::EXIT
str.toString >= return.toString
str.toString == orig(str.toString)
separator.toString == orig(separator.toString)
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String):::EXIT
return.toString one of { "", "bar", "bc" }
str.toString == orig(str.toString)
tag.toString == orig(tag.toString)
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "abc" }
open.toString one of { "", "tag" }
close.toString one of { "", "tag" }
return == null
str.toString == open.toString
str.toString == close.toString
open.toString == close.toString
====================
org.apache.commons.lang3.StringUtils.substringBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
str.toString one of { "", "abc", "foo" }
close.toString one of { "]", "a", "abc" }
return == null
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::ENTER
open.toString one of { "", "[", "ab" }
close.toString one of { "", "]", "ba" }
str.toString != open.toString
str.toString != close.toString
open.toString <= close.toString
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
open.toString == "["
close.toString == "]"
return has only one value
return[] == []
return[].toString == []
orig(open) has only one value
orig(close) has only one value
====================
org.apache.commons.lang3.StringUtils.substringsBetween(java.lang.String, java.lang.String, java.lang.String):::EXIT
open.toString one of { "[", "ab" }
close.toString one of { "]", "ba" }
size(return[]) one of { 1, 2, 3 }
====================
org.apache.commons.lang3.StringUtils.swapCase(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.swapCase(java.lang.String):::EXIT
====================
org.apache.commons.lang3.StringUtils.toEncodedString(byte[], java.nio.charset.Charset):::ENTER
bytes[] one of { [-2, -1, 0, 84, 0, 104, 0, 101, 0, 32, 0, 113, 0, 117, 0, 105, 0, 99, 0, 107, 0, 32, 0, 98, 0, 114, 0, 111, 0, 119, 0, 110, 0, 32, 0, 102, 0, 111, 0, 120, 0, 32, 0, 106, 0, 117, 0, 109, 0, 112, 0, 101, 0, 100, 0, 32, 0, 111, 0, 118, 0, 101, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 108, 0, 97, 0, 122, 0, 121, 0, 32, 0, 100, 0, 111, 0, 103, 0, 46], [84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 101, 100, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121, 32, 100, 111, 103, 46] }
size(bytes[]) one of { 45, 92 }
====================
org.apache.commons.lang3.StringUtils.toString(byte[], java.lang.String):::ENTER
bytes[] one of { [-2, -1, 0, 84, 0, 104, 0, 101, 0, 32, 0, 113, 0, 117, 0, 105, 0, 99, 0, 107, 0, 32, 0, 98, 0, 114, 0, 111, 0, 119, 0, 110, 0, 32, 0, 102, 0, 111, 0, 120, 0, 32, 0, 106, 0, 117, 0, 109, 0, 112, 0, 101, 0, 100, 0, 32, 0, 111, 0, 118, 0, 101, 0, 114, 0, 32, 0, 116, 0, 104, 0, 101, 0, 32, 0, 108, 0, 97, 0, 122, 0, 121, 0, 32, 0, 100, 0, 111, 0, 103, 0, 46], [84, 104, 101, 32, 113, 117, 105, 99, 107, 32, 98, 114, 111, 119, 110, 32, 102, 111, 120, 32, 106, 117, 109, 112, 101, 100, 32, 111, 118, 101, 114, 32, 116, 104, 101, 32, 108, 97, 122, 121, 32, 100, 111, 103, 46] }
charsetName.toString one of { "UTF-16", "UTF-8" }
size(bytes[]) one of { 45, 92 }
====================
org.apache.commons.lang3.StringUtils.transpositions(java.lang.CharSequence, java.lang.CharSequence):::ENTER
first.getClass().getName() == java.lang.String.class
first.getClass().getName() == second.getClass().getName()
====================
org.apache.commons.lang3.StringUtils.trim(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.trimToEmpty(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.trimToNull(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::ENTER
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::EXIT
return == orig(str)
str.toString one of { "cat", "foo" }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.uncapitalize(java.lang.String):::EXIT
str.toString <= return.toString
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String):::EXIT
str.toString one of { "", "fOo test THING" }
return.toString one of { "", "FOO TEST THING" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String, java.util.Locale):::EXIT
return == orig(str)
return == null
====================
org.apache.commons.lang3.StringUtils.upperCase(java.lang.String, java.util.Locale):::EXIT
str.toString one of { "", "fOo test THING" }
return.toString one of { "", "FOO TEST THING" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, char):::EXIT
return == orig(str)
str.toString == ""
orig(wrapWith) one of { 0, 49 }
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, char):::EXIT
(orig(wrapWith) one of { 0, 49 })  <==>  (str.toString == return.toString)
(orig(wrapWith) one of { 0, 49 })  ==>  (return == orig(str))
(orig(wrapWith) one of { 0, 49 })  ==>  (return.toString == "")
(orig(wrapWith) one of { 0, 49 })  ==>  (str.toString == "")
(orig(wrapWith) one of { 34, 39, 120 })  <==>  (str.toString != return.toString)
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, java.lang.String):::EXIT
return == orig(str)
str.toString one of { "", "ab" }
wrapWith.toString one of { "", "1" }
str.toString == wrapWith.toString
str.toString == return.toString
====================
org.apache.commons.lang3.StringUtils.wrap(java.lang.String, java.lang.String):::EXIT
(wrapWith.toString one of { "", "1" })  <==>  (str.toString == return.toString)
(wrapWith.toString one of { "", "1" })  <==>  (str.toString == wrapWith.toString)
(wrapWith.toString one of { "", "1" })  <==>  (wrapWith.toString == return.toString)
(wrapWith.toString one of { "", "1" })  ==>  (return == orig(str))
(wrapWith.toString one of { "", "1" })  ==>  (return.toString one of { "", "ab" })
(wrapWith.toString one of { "", "1" })  ==>  (str.toString one of { "", "ab" })
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (str.toString != return.toString)
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (str.toString != wrapWith.toString)
(wrapWith.toString one of { "\"", "'", "x" })  <==>  (wrapWith.toString < return.toString)
str.toString == orig(str.toString)
wrapWith.toString <= return.toString
wrapWith.toString == orig(wrapWith.toString)
====================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_1_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name)
(return == false)  <==>  (org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString != versionPrefix.toString)
(return == true)  ==>  (orig(versionPrefix) has only one value)
(return == true)  ==>  (versionPrefix.toString == "1.8")
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
orig(versionPrefix) in org.apache.commons.lang3.JavaVersion.$VALUES[].name
versionPrefix.toString in org.apache.commons.lang3.JavaVersion.$VALUES[].name.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString <= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString >= versionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString)
versionPrefix.toString == orig(versionPrefix.toString)
====================
org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String):::EXIT
return == false
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString != versionPrefix.toString
====================
org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_1_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name)
osNamePrefix.toString == "Mac OS X"
return == false
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString)
osNamePrefix.toString > osVersionPrefix.toString
osNamePrefix.toString == orig(osNamePrefix.toString)
osVersionPrefix.toString == orig(osVersionPrefix.toString)
====================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osNamePrefix.toString
====================
org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String):::EXIT
osNamePrefix.toString == "Linux"
return == true
orig(osNamePrefix) has only one value
====================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::ENTER
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < property.toString
====================
org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String):::EXIT
org.apache.commons.lang3.JavaVersion.JAVA_0_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9)
org.apache.commons.lang3.JavaVersion.JAVA_1_1 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1)
org.apache.commons.lang3.JavaVersion.JAVA_1_2 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2)
org.apache.commons.lang3.JavaVersion.JAVA_1_3 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3)
org.apache.commons.lang3.JavaVersion.JAVA_1_4 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4)
org.apache.commons.lang3.JavaVersion.JAVA_1_5 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5)
org.apache.commons.lang3.JavaVersion.JAVA_1_6 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6)
org.apache.commons.lang3.JavaVersion.JAVA_1_7 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7)
org.apache.commons.lang3.JavaVersion.JAVA_1_8 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8)
org.apache.commons.lang3.JavaVersion.JAVA_1_9 == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.value)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name)
org.apache.commons.lang3.JavaVersion.$VALUES == orig(org.apache.commons.lang3.JavaVersion.$VALUES)
org.apache.commons.lang3.JavaVersion.$VALUES[] == orig(org.apache.commons.lang3.JavaVersion.$VALUES[])
org.apache.commons.lang3.JavaVersion.$VALUES[].value == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].value)
org.apache.commons.lang3.JavaVersion.$VALUES[].name == orig(org.apache.commons.lang3.JavaVersion.$VALUES[].name)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.value == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.value)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name)
org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name)
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString)
org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName() == orig(org.apache.commons.lang3.JavaVersion.$VALUES.getClass().getName())
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_RECENT.name.toString)
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < property.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString != return.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString == orig(org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString)
property.toString != return.toString
property.toString == orig(property.toString)
====================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
(return == false)  <==>  (version.toString != versionPrefix.toString)
(return == true)  ==>  (orig(versionPrefix) has only one value)
(return == true)  ==>  (versionPrefix.toString == "1.8")
====================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String):::EXIT
return == true
====================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::ENTER
osName has only one value
osName.toString == "Linux"
osVersion has only one value
osVersion.toString == "4.4.0-45-generic"
osNamePrefix has only one value
osNamePrefix.toString == "Mac OS X"
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_0_9.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_1.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_2.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_3.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_4.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_5.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_6.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_7.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_8.name.toString < osVersionPrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osName.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osVersion.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osNamePrefix.toString
org.apache.commons.lang3.JavaVersion.JAVA_1_9.name.toString < osVersionPrefix.toString
osName.toString > osVersion.toString
osName.toString < osNamePrefix.toString
osName.toString > osVersionPrefix.toString
osVersion.toString < osNamePrefix.toString
osVersion.toString > osVersionPrefix.toString
osNamePrefix.toString > osVersionPrefix.toString
====================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
(return == false)  <==>  (osName.toString != osNamePrefix.toString)
(return == true)  ==>  (orig(osNamePrefix) has only one value)
(return == true)  ==>  (osNamePrefix.toString == "Linux")
====================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
====================
org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String):::EXIT
return == true
orig(osNamePrefix) has only one value
====================
org.apache.commons.lang3.Validate.isTrue(boolean, java.lang.String, java.lang.Object[]):::EXIT
values[] == orig(values[])
message.toString one of { "Both range values must be non-negative.", "Count cannot be negative.", "Start value must be smaller or equal to end value." }
values[] == []
message.toString == orig(message.toString)
====================
org.apache.commons.lang3.Validate.noNullElements(java.lang.Object[]):::EXIT
array[] == return[]
array[] == orig(array[])
return == orig(array)
array[] elements != null
size(return[]) >= 1
return.getClass().getName() == orig(array.getClass().getName())
====================
org.apache.commons.lang3.Validate.noNullElements(java.lang.Object[], java.lang.String, java.lang.Object[]):::EXIT
array[] == return[]
array[] == orig(array[])
values[] == orig(values[])
return == orig(array)
array[] elements != null
values[] == []
size(return[]) >= 1
return.getClass().getName() == orig(array.getClass().getName())
return.getClass().getName() != orig(values.getClass().getName())
size(array[])-1 >= orig(size(values[]))
====================
org.apache.commons.lang3.Validate.notEmpty(java.lang.Object[]):::EXIT
array[] == return[]
array[] == orig(array[])
return == orig(array)
return.getClass().getName() == orig(array.getClass().getName())
====================
org.apache.commons.lang3.Validate.notEmpty(java.lang.Object[], java.lang.String, java.lang.Object[]):::EXIT
array[] == return[]
array[] == orig(array[])
values[] == orig(values[])
return == orig(array)
array[] elements != null
message.toString one of { "The validated array is empty", "null/empty items" }
values[] == []
size(return[]) >= 1
message.toString == orig(message.toString)
return.getClass().getName() == orig(array.getClass().getName())
return.getClass().getName() != orig(values.getClass().getName())
size(array[])-1 >= orig(size(values[]))
====================
org.apache.commons.lang3.Validate.notNull(java.lang.Object):::EXIT
return == orig(object)
return.getClass().getName() == orig(object.getClass().getName())
====================
org.apache.commons.lang3.Validate.notNull(java.lang.Object, java.lang.String, java.lang.Object[]):::EXIT
values[] == orig(values[])
return == orig(object)
message.toString one of { "The validated object is null", "null comparator" }
values[] == []
message.toString == orig(message.toString)
return.getClass().getName() == orig(object.getClass().getName())
return.getClass().getName() != orig(values.getClass().getName())
====================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::ENTER
lhs.getClass().getName() == rhs.getClass().getName()
====================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object):::EXIT
org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY == orig(org.apache.commons.lang3.builder.EqualsBuilder.REGISTRY)
this.isEquals == return.isEquals
this.isEquals == orig(this.isEquals)
return == orig(this)
====================
org.apache.commons.lang3.builder.EqualsBuilder.append(java.lang.Object[], java.lang.Object[]):::EXIT
====================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::ENTER
====================
org.apache.commons.lang3.builder.EqualsBuilder.isEquals():::EXIT
====================
org.apache.commons.lang3.exception.CloneFailedException.CloneFailedException(java.lang.String, java.lang.Throwable):::EXIT
message.toString == "Cloneable type org.apache.commons.lang3.ObjectUtilsTest$UncloneableString has no clone method"
message.toString == orig(message.toString)
====================
org.apache.commons.lang3.mutable.MutableInt.MutableInt(int):::EXIT
this.value == orig(value)
this.value == 1
====================
org.apache.commons.lang3.mutable.MutableInt.increment():::EXIT
this.value == 2
====================
org.apache.commons.lang3.mutable.MutableInt.intValue():::EXIT
this.value == return
return == orig(this.value)
return one of { 1, 2 }
====================
org.apache.commons.lang3.mutable.MutableObject.MutableObject(java.lang.Object):::EXIT
this.value == orig(value)
this.value.getClass().getName() == orig(value.getClass().getName())
====================
org.apache.commons.lang3.mutable.MutableObject.getValue():::EXIT
this.value == return
return == orig(this.value)
return has only one value
return.getClass().getName() == java.lang.String.class
this.value.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.value.getClass().getName())
====================
org.apache.commons.lang3.text.StrBuilder.StrBuilder():::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.buffer[] elements == this.size
====================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(int):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == orig(initialCapacity)
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this.size == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.size == this.buffer[this.size]
this.size == this.buffer[orig(initialCapacity)-1]
this.buffer[] == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.buffer[] elements == 0
this.size == 0
this.buffer[] elements == this.size
====================
org.apache.commons.lang3.text.StrBuilder.StrBuilder(java.lang.String):::EXIT
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[] == [97, 98, 99, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
str.toString == "abcxyz"
size(this.buffer[]) == 38
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 122
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.text.StrBuilder.append(char):::EXIT
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(return.buffer[])
this.buffer == return.buffer
this.buffer == orig(this.buffer)
this.buffer[] == return.buffer[]
this.size == return.size
this.newLine == return.newLine
this.newLine == return.nullText
this.newLine == orig(this.newLine)
this.newLine == orig(this.nullText)
return == orig(this)
orig(ch) == this.buffer[this.size-1]
orig(ch) == this.buffer[return.size-1]
orig(ch) == this.buffer[orig(this.size)]
orig(ch) == return.buffer[this.size-1]
orig(ch) == return.buffer[return.size-1]
orig(ch) == return.buffer[orig(this.size)]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(org.apache.commons.lang3.text.StrBuilder.CAPACITY)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[this.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(this.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == return.buffer[return.size]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[post(return.size)-1])
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == orig(this.buffer[this.size])
this.buffer[orig(this.size)-1] == orig(this.buffer[this.size-1])
this.buffer has only one value
this.buffer[] == [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 18
return has only one value
this.buffer[orig(this.size)-1] == 114
====================
org.apache.commons.lang3.text.StrBuilder.append(java.lang.String):::EXIT
====================
org.apache.commons.lang3.text.StrBuilder.charAt(int):::ENTER
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == this.buffer[this.size]
this.buffer[] == [97, 98, 99, 120, 121, 122, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
this.size == 6
size(this.buffer[]) == 38
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] == 0
this.buffer[this.size-1] == 122
org.apache.commons.lang3.text.StrBuilder.CAPACITY > index
org.apache.commons.lang3.text.StrBuilder.CAPACITY < this.buffer[index]
this.buffer[] elements >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
this.buffer[] elements <= this.buffer[this.size-1]
this.size > index
this.size < this.buffer[index]
index < size(this.buffer[])-1
index >= this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY]
index < this.buffer[this.size-1]
index < this.buffer[index]
size(this.buffer[]) < this.buffer[index]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY] < this.buffer[index]
this.buffer[this.size-1] >= this.buffer[index]
====================
org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int):::ENTER
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[capacity]
this.buffer[org.apache.commons.lang3.text.StrBuilder.CAPACITY-1] == this.buffer[capacity-1]
this.size one of { 0, 17, 18 }
====================
org.apache.commons.lang3.text.StrBuilder.length():::ENTER
====================
org.apache.commons.lang3.text.StrBuilder.toString():::ENTER
org.apache.commons.lang3.text.StrBuilder.CAPACITY == size(this.buffer[])
this has only one value
this.buffer has only one value
this.buffer[] == [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 73, 110, 116, 101, 103, 101, 114, 64, 50, 48, 51, 52, 98, 54, 52, 99, 0, 0, 0, 0, 0, 0]
this.size == 26
this.buffer[this.size-1] == 99
====================
org.apache.commons.lang3.text.WordUtils.swapCase(java.lang.String):::ENTER
str.toString one of { "I", "This String contains a TitleCase character: \307\210", "i" }
====================
org.apache.commons.lang3.text.WordUtils.swapCase(java.lang.String):::EXIT
str.toString one of { "I", "This String contains a TitleCase character: \307\210", "i" }
return.toString one of { "I", "i", "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \307\211" }
str.toString == orig(str.toString)
====================
org.apache.commons.lang3.text.translate.AggregateTranslator.AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::EXIT
this.translators[] == translators[]
translators[] == orig(translators[])
translators[] elements != null
this.translators.getClass().getName() == orig(translators.getClass().getName())
====================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.translators == orig(this.translators)
this.translators[] == orig(this.translators[])
(return == 0)  ==>  (return < size(this.translators[])-1)
(return == 0)  ==>  (return <= orig(index))
return >= 0
this.translators.getClass().getName() == orig(this.translators.getClass().getName())
this.translators.getClass().getName() != orig(input.getClass().getName())
this.translators.getClass().getName() != orig(out.getClass().getName())
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.hex(int):::ENTER
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::ENTER
input.getClass().getName() == java.lang.String.class
this.getClass().getName() != input.getClass().getName()
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence):::EXIT
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::ENTER
input.getClass().getName() == java.lang.String.class
out.getClass().getName() == java.io.StringWriter.class
this.getClass().getName() != input.getClass().getName()
this.getClass().getName() != out.getClass().getName()
input.getClass().getName() != out.getClass().getName()
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer):::EXIT
orig(input) == null
====================
org.apache.commons.lang3.text.translate.CharSequenceTranslator.with(org.apache.commons.lang3.text.translate.CharSequenceTranslator[]):::ENTER
translators.getClass().getName() == org.apache.commons.lang3.text.translate.CharSequenceTranslator[].class
size(translators[]) one of { 1, 6 }
====================
org.apache.commons.lang3.text.translate.CodePointTranslator.CodePointTranslator():::EXIT
====================
org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return one of { 0, 1 }
====================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE():::ENTER
====================
org.apache.commons.lang3.text.translate.EntityArrays.invert(java.lang.String[][]):::ENTER
array.getClass().getName() == java.lang.String[][].class
====================
org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.JavaUnicodeEscaper(int, int, boolean):::ENTER
below == 32
above == 127
between == false
====================
org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.outsideOf(int, int):::ENTER
codepointLow == 32
codepointHigh == 127
====================
org.apache.commons.lang3.text.translate.JavaUnicodeEscaper.toUtf16Escape(int):::ENTER
codepoint one of { 128128, 128276, 1114109 }
====================
org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(java.lang.CharSequence[][]):::ENTER
lookup.getClass().getName() == java.lang.String[][].class
lookup[] elements != null
size(lookup[]) >= 1
====================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::ENTER
input.getClass().getName() == java.lang.String.class
index >= 0
out.getClass().getName() == java.io.StringWriter.class
input.getClass().getName() != out.getClass().getName()
====================
org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return == 0
return % this.shortest == 0
this.shortest > return
return % this.longest == 0
this.longest > return
return <= orig(index)
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.NumericEntityEscaper(int, int, boolean):::ENTER
below < above
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.above(int):::ENTER
codepoint == 1114112
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.below(int):::ENTER
codepoint == 9
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.between(int, int):::ENTER
codepointLow < codepointHigh
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.outsideOf(int, int):::ENTER
codepointLow one of { 0, 9 }
codepointHigh one of { 1114112, 2147483647 }
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::ENTER
out.getClass().getName() == java.io.StringWriter.class
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.NumericEntityEscaper.translate(int, java.io.Writer):::EXIT
return == true
this.above >= orig(codepoint)
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.OPTION(java.lang.String, int):::ENTER
$hidden$1.toString one of { "errorIfNoSemiColon", "semiColonOptional", "semiColonRequired" }
$hidden$2 one of { 0, 1, 2 }
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.values():::ENTER
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[]):::ENTER
options.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
options[] == []
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::ENTER
option == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired
this has only one value
this.options has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES has only one value
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES.getClass().getName() == org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION[].class
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[] contains no nulls and has only one value, of length 3
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() == [org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION, org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[].getClass().getName() elements == org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION.class
size(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]) == 3
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonRequired in org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.semiColonOptional in org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]
org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.errorIfNoSemiColon in org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION.$VALUES[]
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.isSet(org.apache.commons.lang3.text.translate.NumericEntityUnescaper$OPTION):::EXIT
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.options has only one value
return == 0
orig(this) has only one value
orig(index) == 5
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return >= orig(index)
====================
org.apache.commons.lang3.text.translate.NumericEntityUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
this.options == orig(this.options)
return >= 0
this.options.getClass().getName() == orig(this.options.getClass().getName())
this.options.getClass().getName() != orig(input.getClass().getName())
this.options.getClass().getName() != orig(out.getClass().getName())
====================
org.apache.commons.lang3.text.translate.OctalUnescaper.isOctalDigit(char):::ENTER
====================
org.apache.commons.lang3.text.translate.OctalUnescaper.isOctalDigit(char):::EXIT
====================
org.apache.commons.lang3.text.translate.OctalUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean):::ENTER
below == 32
above == 127
between == false
====================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::ENTER
out.getClass().getName() == java.io.StringWriter.class
this.above != codepoint
====================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeEscaper.translate(int, java.io.Writer):::EXIT
return == true
this.below != orig(codepoint)
====================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.UnicodeUnescaper():::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
return == 6
====================
org.apache.commons.lang3.text.translate.UnicodeUnescaper.translate(java.lang.CharSequence, int, java.io.Writer):::EXIT
(return == 0)  ==>  (return <= orig(index))
return one of { 0, 6 }
====================
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, java.io.Writer):::ENTER
out.getClass().getName() == java.io.StringWriter.class
====================
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, java.io.Writer):::EXIT
====================
org.apache.commons.lang3.text.translate.UnicodeUnpairedSurrogateRemover.translate(int, java.io.Writer):::EXIT
return == true
orig(codepoint) one of { 55296, 57343 }
====================
org.hamcrest.MatcherAssert.assertThat(java.lang.String, java.lang.Object, org.hamcrest.Matcher):::ENTER
reason has only one value
reason.toString == ""
matcher.getClass().getName() == org.hamcrest.core.IsNot.class
====================
org.hamcrest.core.IsEqual.IsEqual(java.lang.Object):::EXIT
this.expectedValue == orig(equalArg)
this.expectedValue.getClass().getName() == orig(equalArg.getClass().getName())
====================
org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object):::EXIT
====================
org.hamcrest.core.IsEqual.areEqual(java.lang.Object, java.lang.Object):::EXIT
return == false
====================
org.hamcrest.core.IsEqual.equalTo(java.lang.Object):::ENTER
====================
org.hamcrest.core.IsEqual.isArray(java.lang.Object):::ENTER
====================
org.hamcrest.core.IsEqual.isArray(java.lang.Object):::EXIT
====================
org.hamcrest.core.IsEqual.matches(java.lang.Object):::EXIT
this.expectedValue == orig(this.expectedValue)
return == false
this.expectedValue.getClass().getName() == orig(this.expectedValue.getClass().getName())
====================
org.hamcrest.core.IsNot.IsNot(org.hamcrest.Matcher):::EXIT
this.matcher == orig(matcher)
this.matcher.getClass().getName() == orig(matcher.getClass().getName())
====================
org.hamcrest.core.IsNot.matches(java.lang.Object):::EXIT
this.matcher == orig(this.matcher)
return == true
this.matcher.getClass().getName() == orig(this.matcher.getClass().getName())
====================
org.hamcrest.core.IsNot.not(java.lang.Object):::ENTER
====================
org.hamcrest.core.IsNot.not(org.hamcrest.Matcher):::ENTER
matcher.getClass().getName() == org.hamcrest.core.IsEqual.class

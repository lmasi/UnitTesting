===========================================================================
com.sun.proxy.$Proxy2:::CLASS
com.sun.proxy.$Proxy2.m1 has only one value
com.sun.proxy.$Proxy2.m4 has only one value
com.sun.proxy.$Proxy2.m0 has only one value
com.sun.proxy.$Proxy2.m3 has only one value
com.sun.proxy.$Proxy2.m5 has only one value
com.sun.proxy.$Proxy2.m2 has only one value
===========================================================================
com.sun.proxy.$Proxy2:::OBJECT
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::ENTER
arg0.getClass().getName() == sun.reflect.annotation.AnnotationInvocationHandler.class
===========================================================================
com.sun.proxy.$Proxy2.$Proxy2(java.lang.reflect.InvocationHandler):::EXIT
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.annotationType():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.expected():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.expected():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
return has only one value
===========================================================================
com.sun.proxy.$Proxy2.timeout():::ENTER
===========================================================================
com.sun.proxy.$Proxy2.timeout():::EXIT
com.sun.proxy.$Proxy2.m1 == orig(com.sun.proxy.$Proxy2.m1)
com.sun.proxy.$Proxy2.m4 == orig(com.sun.proxy.$Proxy2.m4)
com.sun.proxy.$Proxy2.m0 == orig(com.sun.proxy.$Proxy2.m0)
com.sun.proxy.$Proxy2.m3 == orig(com.sun.proxy.$Proxy2.m3)
com.sun.proxy.$Proxy2.m5 == orig(com.sun.proxy.$Proxy2.m5)
com.sun.proxy.$Proxy2.m2 == orig(com.sun.proxy.$Proxy2.m2)
return == 0
===========================================================================
junit.runner.Version.id():::EXIT
return has only one value
return.toString == "4.8"
===========================================================================
org.apache.commons.lang3.ArrayUtils:::CLASS
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == java.lang.Object[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[].getClass().getName() == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == java.lang.Class[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == java.lang.String[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[].toString == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == java.lang.Long[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == java.lang.Integer[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == java.lang.Short[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == java.lang.Byte[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == java.lang.Double[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == java.lang.Float[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == java.lang.Boolean[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY has only one value
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == java.lang.Character[].class
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == []
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] is the reverse of org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[]
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName()
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::ENTER
array.getClass().getName() == org.apache.commons.lang3.CharRange[].class
array[] elements != null
objectToFind.getClass().getName() == org.apache.commons.lang3.CharRange.class
size(array[]) >= 1
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
array[] elements != null
return == true
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.contains(java.lang.Object[], java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object):::ENTER
array.getClass().getName() == org.apache.commons.lang3.CharRange[].class
array[] elements != null
objectToFind.getClass().getName() == org.apache.commons.lang3.CharRange.class
size(array[]) >= 1
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
array[] elements != null
return >= 0
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < return
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
return >= size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
return <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::ENTER
startIndex == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
array.getClass().getName() == org.apache.commons.lang3.CharRange[].class
array[] elements != null
objectToFind.getClass().getName() == org.apache.commons.lang3.CharRange.class
startIndex == 0
size(array[]) >= 1
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != array.getClass().getName()
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != objectToFind.getClass().getName()
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
array.getClass().getName() != objectToFind.getClass().getName()
startIndex <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT1920
===========================================================================
org.apache.commons.lang3.ArrayUtils.indexOf(java.lang.Object[], java.lang.Object, int):::EXIT
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY[])
org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY)
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[] == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY[])
array[] == orig(array[])
orig(startIndex) == size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY[]))
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) == orig(size(org.apache.commons.lang3.ArrayUtils.EMPTY_CHAR_ARRAY[]))
array[] elements != null
return >= 0
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() == orig(org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(array.getClass().getName())
org.apache.commons.lang3.ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY.getClass().getName() != orig(objectToFind.getClass().getName())
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < return
org.apache.commons.lang3.ArrayUtils.INDEX_NOT_FOUND < size(array[])-1
return >= orig(startIndex)
return >= size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[])
return <= size(array[])-1
orig(startIndex) <= size(array[])-1
size(org.apache.commons.lang3.ArrayUtils.EMPTY_OBJECT_ARRAY[]) <= size(array[])-1
===========================================================================
org.apache.commons.lang3.CharRange:::CLASS
===========================================================================
org.apache.commons.lang3.CharRange:::OBJECT
org.apache.commons.lang3.CharRange.serialVersionUID > this.start
org.apache.commons.lang3.CharRange.serialVersionUID > this.end
this.start <= this.end
===========================================================================
org.apache.commons.lang3.CharRange.CharRange(char, char, boolean):::ENTER
===========================================================================
org.apache.commons.lang3.CharRange.CharRange(char, char, boolean):::EXIT
this.negated == orig(negated)
this.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > orig(start)
org.apache.commons.lang3.CharRange.serialVersionUID > orig(end)
this.start <= orig(start)
this.start <= orig(end)
this.end >= orig(start)
this.end >= orig(end)
===========================================================================
org.apache.commons.lang3.CharRange.contains(char):::ENTER
this.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > ch
===========================================================================
org.apache.commons.lang3.CharRange.contains(char):::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.negated == orig(this.negated)
this.iToString == orig(this.iToString)
this.iToString == null
===========================================================================
org.apache.commons.lang3.CharRange.contains(char):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.CharRange.contains(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::ENTER
this.iToString == null
obj.getClass().getName() == org.apache.commons.lang3.CharRange.class
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT216
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT216;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT216;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.negated == orig(this.negated)
this.iToString == orig(this.iToString)
this.iToString == null
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.CharRange.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharRange.hashCode():::ENTER
this.iToString == null
===========================================================================
org.apache.commons.lang3.CharRange.hashCode():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.negated == orig(this.negated)
this.iToString == orig(this.iToString)
this.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > return
this.start < return
this.end < return
===========================================================================
org.apache.commons.lang3.CharRange.is(char):::ENTER
org.apache.commons.lang3.CharRange.serialVersionUID > ch
===========================================================================
org.apache.commons.lang3.CharRange.is(char):::EXIT
return.start == return.end
return.start == orig(ch)
return.negated == false
return.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > return.start
===========================================================================
org.apache.commons.lang3.CharRange.isIn(char, char):::ENTER
org.apache.commons.lang3.CharRange.serialVersionUID > start
org.apache.commons.lang3.CharRange.serialVersionUID > end
===========================================================================
org.apache.commons.lang3.CharRange.isIn(char, char):::EXIT
return.negated == false
return.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > return.start
org.apache.commons.lang3.CharRange.serialVersionUID > return.end
return.start <= return.end
return.start <= orig(start)
return.start <= orig(end)
return.end >= orig(start)
return.end >= orig(end)
===========================================================================
org.apache.commons.lang3.CharRange.isNegated():::ENTER
this.start one of { 97, 98 }
this.end one of { 97, 100, 101 }
this.iToString == null
===========================================================================
org.apache.commons.lang3.CharRange.isNegated():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.negated == return
this.iToString == orig(this.iToString)
return == orig(this.negated)
(return == false)  ==>  (this.end one of { 97, 100, 101 })
(return == false)  ==>  (this.start one of { 97, 98 })
(return == true)  ==>  (this.end one of { 97, 101 })
(return == true)  ==>  (this.start == 97)
this.start one of { 97, 98 }
this.end one of { 97, 100, 101 }
this.iToString == null
===========================================================================
org.apache.commons.lang3.CharRange.isNegated():::EXIT;condition="return == true"
this.start == 97
this.end one of { 97, 101 }
return == true
===========================================================================
org.apache.commons.lang3.CharRange.isNegated():::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharRange.isNot(char):::ENTER
org.apache.commons.lang3.CharRange.serialVersionUID > ch
===========================================================================
org.apache.commons.lang3.CharRange.isNot(char):::EXIT
return.start == return.end
return.start == orig(ch)
return.negated == true
return.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > return.start
===========================================================================
org.apache.commons.lang3.CharRange.isNotIn(char, char):::ENTER
org.apache.commons.lang3.CharRange.serialVersionUID > start
org.apache.commons.lang3.CharRange.serialVersionUID > end
start != end
===========================================================================
org.apache.commons.lang3.CharRange.isNotIn(char, char):::EXIT
return.negated == true
return.iToString == null
org.apache.commons.lang3.CharRange.serialVersionUID > return.start
org.apache.commons.lang3.CharRange.serialVersionUID > return.end
return.start < return.end
return.start <= orig(start)
return.start <= orig(end)
return.end >= orig(start)
return.end >= orig(end)
===========================================================================
org.apache.commons.lang3.CharRange.toString():::ENTER
this.start one of { 97, 98 }
this.end one of { 97, 100, 101 }
===========================================================================
org.apache.commons.lang3.CharRange.toString():::EXIT
this.start == orig(this.start)
this.end == orig(this.end)
this.negated == orig(this.negated)
this.iToString == return
this.start one of { 97, 98 }
this.end one of { 97, 100, 101 }
this.iToString.toString == return.toString
return.toString == orig(this.iToString.toString)
===========================================================================
org.apache.commons.lang3.CharSet:::CLASS
org.apache.commons.lang3.CharSet.EMPTY has only one value
org.apache.commons.lang3.CharSet.ASCII_ALPHA has only one value
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER has only one value
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER has only one value
org.apache.commons.lang3.CharSet.ASCII_NUMERIC has only one value
org.apache.commons.lang3.CharSet.COMMON has only one value
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == java.util.Collections$SynchronizedMap.class
org.apache.commons.lang3.CharSet.EMPTY.set has only one value
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == java.util.Collections$SynchronizedSet.class
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set has only one value
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set has only one value
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set has only one value
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set has only one value
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName()
===========================================================================
org.apache.commons.lang3.CharSet:::OBJECT
this.set.getClass().getName() == java.util.Collections$SynchronizedSet.class
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != this.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == this.set.getClass().getName()
===========================================================================
org.apache.commons.lang3.CharSet.CharSet(java.lang.String[]):::ENTER
set.getClass().getName() == java.lang.String[].class
size(set[]) one of { 0, 1, 2 }
===========================================================================
org.apache.commons.lang3.CharSet.CharSet(java.lang.String[]):::EXIT
set[] == orig(set[])
org.apache.commons.lang3.CharSet.serialVersionUID > orig(size(set[]))
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != orig(set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != orig(set.getClass().getName())
this.set.getClass().getName() != orig(set.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSet.add(java.lang.String):::ENTER
===========================================================================
org.apache.commons.lang3.CharSet.add(java.lang.String):::EXIT175
this.set has only one value
orig(this) has only one value
orig(str) == null
===========================================================================
org.apache.commons.lang3.CharSet.add(java.lang.String):::EXIT200
===========================================================================
org.apache.commons.lang3.CharSet.add(java.lang.String):::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
this.set.getClass().getName() == orig(this.set.getClass().getName())
str.toString == orig(str.toString)
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::ENTER
org.apache.commons.lang3.CharSet.serialVersionUID > ch
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT226
return == true
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT226;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT229
return == false
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT229;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(this.set.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.CharSet.contains(char):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::ENTER
obj.getClass().getName() == org.apache.commons.lang3.CharSet.class
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != obj.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != obj.getClass().getName()
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT248
orig(this) == orig(obj)
return == true
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT248;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT251
this.set has only one value
return == false
orig(this) has only one value
orig(obj) == null
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT251;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT254
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT254;condition="return == true"
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT254;condition="not(return == true)"
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != orig(obj.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(this.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != orig(obj.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT;condition="return == true"
return == true
===========================================================================
org.apache.commons.lang3.CharSet.equals(java.lang.Object):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.apache.commons.lang3.CharSet.getCharRanges():::ENTER
===========================================================================
org.apache.commons.lang3.CharSet.getCharRanges():::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
return[].start <= return[].end (lexically)
return.getClass().getName() == org.apache.commons.lang3.CharRange[].class
return[] elements != null
return[].iToString elements == null
return[].iToString.toString elements == null
return[].start elements < org.apache.commons.lang3.CharSet.serialVersionUID
return[].end elements < org.apache.commons.lang3.CharSet.serialVersionUID
org.apache.commons.lang3.CharSet.serialVersionUID > size(return[])
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != return.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(this.set.getClass().getName())
return[].start elements > size(return[])
return[].end elements > size(return[])
===========================================================================
org.apache.commons.lang3.CharSet.getInstance(java.lang.String[]):::ENTER
setStrs.getClass().getName() == java.lang.String[].class
size(setStrs[]) one of { 0, 1, 2 }
org.apache.commons.lang3.CharSet.serialVersionUID > size(setStrs[])
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != setStrs.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != setStrs.getClass().getName()
===========================================================================
org.apache.commons.lang3.CharSet.getInstance(java.lang.String[]):::EXIT140
return == null
orig(setStrs) == null
===========================================================================
org.apache.commons.lang3.CharSet.getInstance(java.lang.String[]):::EXIT145
orig(size(setStrs[])) == 1
===========================================================================
org.apache.commons.lang3.CharSet.getInstance(java.lang.String[]):::EXIT148
setStrs[] elements != null
===========================================================================
org.apache.commons.lang3.CharSet.getInstance(java.lang.String[]):::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
setStrs[] == orig(setStrs[])
return.set.getClass().getName() == java.util.Collections$SynchronizedSet.class
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != return.set.getClass().getName()
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() != orig(setStrs.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == return.set.getClass().getName()
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() != orig(setStrs.getClass().getName())
return.set.getClass().getName() != orig(setStrs.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSet.hashCode():::ENTER
===========================================================================
org.apache.commons.lang3.CharSet.hashCode():::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
return one of { 962, 963, 2690 }
org.apache.commons.lang3.CharSet.serialVersionUID > return
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(this.set.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSet.toString():::ENTER
===========================================================================
org.apache.commons.lang3.CharSet.toString():::EXIT
org.apache.commons.lang3.CharSet.EMPTY == orig(org.apache.commons.lang3.CharSet.EMPTY)
org.apache.commons.lang3.CharSet.ASCII_ALPHA == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC)
org.apache.commons.lang3.CharSet.COMMON == orig(org.apache.commons.lang3.CharSet.COMMON)
org.apache.commons.lang3.CharSet.EMPTY.set == orig(org.apache.commons.lang3.CharSet.EMPTY.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set)
org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set)
org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set)
this.set == orig(this.set)
org.apache.commons.lang3.CharSet.COMMON.getClass().getName() == orig(org.apache.commons.lang3.CharSet.COMMON.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_LOWER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_ALPHA_UPPER.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(org.apache.commons.lang3.CharSet.ASCII_NUMERIC.set.getClass().getName())
org.apache.commons.lang3.CharSet.EMPTY.set.getClass().getName() == orig(this.set.getClass().getName())
===========================================================================
org.apache.commons.lang3.CharSetTest:::OBJECT
===========================================================================
org.apache.commons.lang3.CharSetTest.CharSetTest():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testClass():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testClass():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_combo():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_combo():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_comboNegated():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddCombinations():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddDash():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_oddNegate():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_simple():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testConstructor_String_simple():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testContains_Char():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testContains_Char():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testEquals_Object():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testEquals_Object():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testGetInstance():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testGetInstance():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testGetInstance_Stringarray():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testHashCode():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testHashCode():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testJavadocExamples():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testJavadocExamples():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testSerialization():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testSerialization():::EXIT
===========================================================================
org.apache.commons.lang3.CharSetTest.testStatics():::ENTER
this has only one value
===========================================================================
org.apache.commons.lang3.CharSetTest.testStatics():::EXIT
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:::CLASS
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes has only one value
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() == java.util.HashMap.class
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream:::OBJECT
this.classLoader has only one value
this.classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() != this.classLoader.getClass().getName()
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader):::ENTER
in.getClass().getName() == java.io.ByteArrayInputStream.class
classLoader has only one value
classLoader.getClass().getName() == sun.misc.Launcher$AppClassLoader.class
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader):::EXIT
this.classLoader == orig(classLoader)
this.classLoader.getClass().getName() == orig(classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::ENTER
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::EXIT322
===========================================================================
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass):::EXIT
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes == orig(org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes)
this.classLoader == orig(this.classLoader)
org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName() == orig(org.apache.commons.lang3.SerializationUtils$ClassLoaderAwareObjectInputStream.primitiveTypes.getClass().getName())
this.classLoader.getClass().getName() == orig(this.classLoader.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::ENTER
object.getClass().getName() == org.apache.commons.lang3.CharSet.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT108
===========================================================================
org.apache.commons.lang3.SerializationUtils.clone(java.io.Serializable):::EXIT
return.getClass().getName() == org.apache.commons.lang3.CharSet.class
return.getClass().getName() == orig(object.getClass().getName())
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::ENTER
obj.getClass().getName() == org.apache.commons.lang3.CharSet.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable):::EXIT
return[] one of { [-84, -19, 0, 5, 115, 114, 0, 32, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 83, 101, 116, 82, -118, -1, -91, -11, 122, 57, 54, 2, 0, 1, 76, 0, 3, 115, 101, 116, 116, 0, 15, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 83, 101, 116, 59, 120, 112, 115, 114, 0, 37, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 83, 101, 116, 6, -61, -62, 121, 2, -18, -33, 60, 2, 0, 0, 120, 114, 0, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 42, 97, -8, 77, 9, -100, -103, -75, 3, 0, 2, 76, 0, 1, 99, 116, 0, 22, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 59, 76, 0, 5, 109, 117, 116, 101, 120, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 83, 101, 116, -70, 68, -123, -107, -106, -72, -73, 52, 3, 0, 0, 120, 112, 119, 12, 0, 0, 0, 16, 63, 64, 0, 0, 0, 0, 0, 1, 115, 114, 0, 34, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 82, 97, 110, 103, 101, 114, -59, -105, -59, 3, 120, 7, -18, 2, 0, 3, 67, 0, 3, 101, 110, 100, 90, 0, 7, 110, 101, 103, 97, 116, 101, 100, 67, 0, 5, 115, 116, 97, 114, 116, 120, 112, 0, 97, 0, 0, 97, 120, 113, 0, 126, 0, 7, 120], [-84, -19, 0, 5, 115, 114, 0, 32, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 83, 101, 116, 82, -118, -1, -91, -11, 122, 57, 54, 2, 0, 1, 76, 0, 3, 115, 101, 116, 116, 0, 15, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 83, 101, 116, 59, 120, 112, 115, 114, 0, 37, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 83, 101, 116, 6, -61, -62, 121, 2, -18, -33, 60, 2, 0, 0, 120, 114, 0, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 42, 97, -8, 77, 9, -100, -103, -75, 3, 0, 2, 76, 0, 1, 99, 116, 0, 22, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 59, 76, 0, 5, 109, 117, 116, 101, 120, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 83, 101, 116, -70, 68, -123, -107, -106, -72, -73, 52, 3, 0, 0, 120, 112, 119, 12, 0, 0, 0, 16, 63, 64, 0, 0, 0, 0, 0, 1, 115, 114, 0, 34, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 82, 97, 110, 103, 101, 114, -59, -105, -59, 3, 120, 7, -18, 2, 0, 3, 67, 0, 3, 101, 110, 100, 90, 0, 7, 110, 101, 103, 97, 116, 101, 100, 67, 0, 5, 115, 116, 97, 114, 116, 120, 112, 0, 101, 0, 0, 97, 120, 113, 0, 126, 0, 7, 120], [-84, -19, 0, 5, 115, 114, 0, 32, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 83, 101, 116, 82, -118, -1, -91, -11, 122, 57, 54, 2, 0, 1, 76, 0, 3, 115, 101, 116, 116, 0, 15, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 83, 101, 116, 59, 120, 112, 115, 114, 0, 37, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 83, 101, 116, 6, -61, -62, 121, 2, -18, -33, 60, 2, 0, 0, 120, 114, 0, 44, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 36, 83, 121, 110, 99, 104, 114, 111, 110, 105, 122, 101, 100, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 42, 97, -8, 77, 9, -100, -103, -75, 3, 0, 2, 76, 0, 1, 99, 116, 0, 22, 76, 106, 97, 118, 97, 47, 117, 116, 105, 108, 47, 67, 111, 108, 108, 101, 99, 116, 105, 111, 110, 59, 76, 0, 5, 109, 117, 116, 101, 120, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 79, 98, 106, 101, 99, 116, 59, 120, 112, 115, 114, 0, 17, 106, 97, 118, 97, 46, 117, 116, 105, 108, 46, 72, 97, 115, 104, 83, 101, 116, -70, 68, -123, -107, -106, -72, -73, 52, 3, 0, 0, 120, 112, 119, 12, 0, 0, 0, 16, 63, 64, 0, 0, 0, 0, 0, 3, 115, 114, 0, 34, 111, 114, 103, 46, 97, 112, 97, 99, 104, 101, 46, 99, 111, 109, 109, 111, 110, 115, 46, 108, 97, 110, 103, 51, 46, 67, 104, 97, 114, 82, 97, 110, 103, 101, 114, -59, -105, -59, 3, 120, 7, -18, 2, 0, 3, 67, 0, 3, 101, 110, 100, 90, 0, 7, 110, 101, 103, 97, 116, 101, 100, 67, 0, 5, 115, 116, 97, 114, 116, 120, 112, 0, 122, 1, 0, 97, 115, 113, 0, 126, 0, 10, 0, 98, 0, 0, 98, 115, 113, 0, 126, 0, 10, 0, 102, 0, 0, 101, 120, 113, 0, 126, 0, 7, 120] }
size(return[]) one of { 383, 405 }
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::ENTER
obj.getClass().getName() == org.apache.commons.lang3.CharSet.class
outputStream.getClass().getName() == java.io.ByteArrayOutputStream.class
===========================================================================
org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
message == null
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT118
orig(message) == orig(expected)
orig(expected) == orig(actual)
orig(expected) == null
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT120
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::ENTER
expected == actual
message == null
expected >= 0
===========================================================================
org.junit.Assert.assertEquals(java.lang.String, long, long):::EXIT
===========================================================================
org.junit.Assert.assertEquals(long, long):::ENTER
expected == actual
expected >= 0
===========================================================================
org.junit.Assert.assertEquals(long, long):::EXIT
===========================================================================
org.junit.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
org.junit.Assert.assertFalse(boolean):::EXIT
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::ENTER
message == null
condition == false
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::ENTER
expected == actual
expected.getClass().getName() == org.apache.commons.lang3.CharSet.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::ENTER
expected == actual
message == null
expected.getClass().getName() == org.apache.commons.lang3.CharSet.class
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT577
===========================================================================
org.junit.Assert.assertSame(java.lang.String, java.lang.Object, java.lang.Object):::EXIT
===========================================================================
org.junit.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(boolean):::EXIT
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::ENTER
message == null
condition == true
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::EXIT
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::ENTER
expected.getClass().getName() == actual.getClass().getName()
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT
return == true
===========================================================================
org.junit.Assert.isEquals(java.lang.Object, java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.internal.RealSystem:::OBJECT
this has only one value
===========================================================================
org.junit.internal.RealSystem.RealSystem():::EXIT
===========================================================================
org.junit.internal.RealSystem.out():::ENTER
===========================================================================
org.junit.internal.RealSystem.out():::EXIT
return has only one value
===========================================================================
org.junit.internal.TextListener:::OBJECT
this has only one value
this.fWriter has only one value
this.fWriter != null
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::ENTER
writer has only one value
===========================================================================
org.junit.internal.TextListener.TextListener(java.io.PrintStream):::EXIT
this.fWriter == orig(writer)
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::ENTER
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
===========================================================================
org.junit.internal.TextListener.TextListener(org.junit.internal.JUnitSystem):::EXIT
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::ENTER
runTime == 1248
===========================================================================
org.junit.internal.TextListener.elapsedTimeAsString(long):::EXIT
this.fWriter == orig(this.fWriter)
return has only one value
return.toString == "1.248"
===========================================================================
org.junit.internal.TextListener.getWriter():::ENTER
===========================================================================
org.junit.internal.TextListener.getWriter():::EXIT
this.fWriter == return
return == orig(this.fWriter)
return has only one value
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::ENTER
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT62
===========================================================================
org.junit.internal.TextListener.printFailures(org.junit.runner.Result):::EXIT
this.fWriter == orig(this.fWriter)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fRunTime == orig(result.fRunTime)
result.fStartTime == orig(result.fStartTime)
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::ENTER
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
===========================================================================
org.junit.internal.TextListener.printFooter(org.junit.runner.Result):::EXIT
this.fWriter == orig(this.fWriter)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fRunTime == orig(result.fRunTime)
result.fStartTime == orig(result.fStartTime)
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.internal.TextListener.printHeader(long):::ENTER
runTime == 1248
===========================================================================
org.junit.internal.TextListener.printHeader(long):::EXIT
this.fWriter == orig(this.fWriter)
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::ENTER
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
===========================================================================
org.junit.internal.TextListener.testRunFinished(org.junit.runner.Result):::EXIT
this.fWriter == orig(this.fWriter)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fRunTime == orig(result.fRunTime)
result.fStartTime == orig(result.fStartTime)
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.internal.TextListener.testStarted(org.junit.runner.Description):::EXIT
this.fWriter == orig(this.fWriter)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder:::OBJECT
this has only one value
this.fCanUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::ENTER
canUseSuiteMethod == true
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.AllDefaultPossibilitiesBuilder(boolean):::EXIT
this.fCanUseSuiteMethod == orig(canUseSuiteMethod)
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.annotatedBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
return.fSuiteBuilder has only one value
return.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
return.fSuiteBuilder.parents has only one value
return.fSuiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.ignoredBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit3Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.junit4Builder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT31
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(java.lang.Class):::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::ENTER
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT54
===========================================================================
org.junit.internal.builders.AllDefaultPossibilitiesBuilder.suiteMethodBuilder():::EXIT
this.fCanUseSuiteMethod == orig(this.fCanUseSuiteMethod)
return has only one value
return.getClass().getName() == org.junit.internal.builders.SuiteMethodBuilder.class
return.parents has only one value
return.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::CLASS
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT has only one value
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == "Custom runner class %s should have a public constructor with signature %s(Class testClass)"
===========================================================================
org.junit.internal.builders.AnnotatedBuilder:::OBJECT
this has only one value
this.fSuiteBuilder has only one value
this.fSuiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.fSuiteBuilder.parents has only one value
this.fSuiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::ENTER
suiteBuilder has only one value
suiteBuilder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.AnnotatedBuilder(org.junit.runners.model.RunnerBuilder):::EXIT
this.fSuiteBuilder == orig(suiteBuilder)
this.fSuiteBuilder.parents == suiteBuilder.parents
suiteBuilder.parents == orig(suiteBuilder.parents)
suiteBuilder.parents has only one value
suiteBuilder.parents.getClass().getName() == java.util.HashSet.class
this.fSuiteBuilder.getClass().getName() == orig(suiteBuilder.getClass().getName())
this.fSuiteBuilder.parents.getClass().getName() == suiteBuilder.parents.getClass().getName()
suiteBuilder.parents.getClass().getName() == orig(suiteBuilder.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT25
===========================================================================
org.junit.internal.builders.AnnotatedBuilder.runnerForClass(java.lang.Class):::EXIT
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT)
this.fSuiteBuilder == orig(this.fSuiteBuilder)
this.fSuiteBuilder.parents == orig(this.fSuiteBuilder.parents)
return == null
org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString == orig(org.junit.internal.builders.AnnotatedBuilder.CONSTRUCTOR_ERROR_FORMAT.toString)
this.fSuiteBuilder.getClass().getName() == orig(this.fSuiteBuilder.getClass().getName())
this.fSuiteBuilder.parents.getClass().getName() == orig(this.fSuiteBuilder.parents.getClass().getName())
===========================================================================
org.junit.internal.builders.IgnoredBuilder:::OBJECT
this has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.IgnoredBuilder():::EXIT
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.IgnoredBuilder.runnerForClass(java.lang.Class):::EXIT
return == null
===========================================================================
org.junit.internal.builders.JUnit3Builder:::OBJECT
this has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.JUnit3Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT
return == false
===========================================================================
org.junit.internal.builders.JUnit3Builder.isPre4Test(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.JUnit3Builder.runnerForClass(java.lang.Class):::EXIT
return == null
===========================================================================
org.junit.internal.builders.JUnit4Builder:::OBJECT
this has only one value
===========================================================================
org.junit.internal.builders.JUnit4Builder.JUnit4Builder():::EXIT
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.JUnit4Builder.runnerForClass(java.lang.Class):::EXIT
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder:::OBJECT
this has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.SuiteMethodBuilder():::EXIT
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT22;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT
return == false
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.hasSuiteMethod(java.lang.Class):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::ENTER
each has only one value
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT15
===========================================================================
org.junit.internal.builders.SuiteMethodBuilder.runnerForClass(java.lang.Class):::EXIT
return == null
===========================================================================
org.junit.internal.runners.model.EachTestNotifier:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
this.fNotifier has only one value
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 2
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
this.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fNotifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.fDescription.fChildren[] elements != null
this.fDescription.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fDescription.fAnnotations[] elements != null
this.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fDescription.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fNotifier.fListeners[]) == 2
size(this.fDescription.fChildren[]) one of { 0, 1, 15 }
size(this.fDescription.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDescription.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fDescription.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDescription.fDisplayName.toString
size(this.fNotifier.fListeners[]) != size(this.fDescription.fChildren[])
size(this.fNotifier.fListeners[]) != size(this.fDescription.fChildren[])-1
size(this.fNotifier.fListeners[])-1 != size(this.fDescription.fChildren[])-1
size(this.fNotifier.fListeners[])-1 >= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[]) != size(this.fDescription.fAnnotations[])
size(this.fDescription.fChildren[]) >= size(this.fDescription.fAnnotations[])-1
size(this.fDescription.fChildren[])-1 != size(this.fDescription.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 2
size(description.fChildren[]) one of { 0, 1, 15 }
size(description.fAnnotations[]) one of { 0, 1 }
notifier.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
size(notifier.fListeners[]) != size(description.fChildren[])
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[])-1 != size(description.fChildren[])-1
size(notifier.fListeners[])-1 >= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.EachTestNotifier(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.fNotifier == orig(notifier)
this.fNotifier.fListeners == notifier.fListeners
this.fNotifier.fListeners[] == notifier.fListeners[]
this.fNotifier.fPleaseStop == notifier.fPleaseStop
this.fDescription == orig(description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == description.fChildren
this.fDescription.fChildren[] == description.fChildren[]
this.fDescription.fDisplayName == description.fDisplayName
this.fDescription.fAnnotations == description.fAnnotations
this.fDescription.fAnnotations[] == description.fAnnotations[]
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(notifier.fListeners[]) == 2
size(description.fChildren[]) one of { 0, 1, 15 }
size(description.fAnnotations[]) one of { 0, 1 }
this.fNotifier.fListeners.getClass().getName() == notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != notifier.fListeners.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == description.fDisplayName.toString
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(notifier.fListeners[]) != size(description.fChildren[])
size(notifier.fListeners[]) != size(description.fChildren[])-1
size(notifier.fListeners[])-1 != size(description.fChildren[])-1
size(notifier.fListeners[])-1 >= size(description.fAnnotations[])
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[])-1 == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestFinished():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[])-1 == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
size(this.fDescription.fAnnotations[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
size(this.fNotifier.fListeners[])-1 == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
===========================================================================
org.junit.internal.runners.model.EachTestNotifier.fireTestStarted():::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
this.fDescription == orig(this.fDescription)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == this.fDescription.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.fDescription.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fDescription.fChildren == orig(this.fDescription.fChildren)
this.fDescription.fDisplayName == orig(this.fDescription.fDisplayName)
this.fDescription.fAnnotations == orig(this.fDescription.fAnnotations)
this.fDescription.fAnnotations[] == orig(this.fDescription.fAnnotations[])
size(this.fNotifier.fListeners[])-1 == size(this.fDescription.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fDescription.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fDescription.fAnnotations[]))-1
size(this.fDescription.fAnnotations[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fDescription.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDescription.fDisplayName.toString == orig(this.fDescription.fDisplayName.toString)
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable:::OBJECT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.ReflectiveCallable():::EXIT
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::ENTER
===========================================================================
org.junit.internal.runners.model.ReflectiveCallable.run():::EXIT
return.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod:::OBJECT
this.fTarget.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.InvokeMethod(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
this.fTestMethod == orig(testMethod)
this.fTestMethod.fMethod == testMethod.fMethod
this.fTarget == orig(target)
testMethod.fMethod == orig(testMethod.fMethod)
this.fTarget.getClass().getName() == orig(target.getClass().getName())
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::ENTER
===========================================================================
org.junit.internal.runners.statements.InvokeMethod.evaluate():::EXIT
this.fTestMethod == orig(this.fTestMethod)
this.fTestMethod.fMethod == orig(this.fTestMethod.fMethod)
this.fTarget == orig(this.fTarget)
this.fTarget.getClass().getName() == orig(this.fTarget.getClass().getName())
===========================================================================
org.junit.runner.Computer$1:::OBJECT
this has only one value
this.val$builder has only one value
this.val$builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
this.val$builder.parents has only one value
this.val$builder.parents.getClass().getName() == java.util.HashSet.class
org.junit.runner.Computer.this has only one value
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::ENTER
org.junit.runner.Computer.this has only one value
$hidden$2 has only one value
$hidden$2.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
$hidden$2.parents has only one value
$hidden$2.parents.getClass().getName() == java.util.HashSet.class
===========================================================================
org.junit.runner.Computer$1.(org.junit.runner.Computer, org.junit.runners.model.RunnerBuilder):::EXIT
this.val$builder == orig($hidden$2)
this.val$builder.parents == orig($hidden$2.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
this.val$builder.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$builder.parents.getClass().getName() == orig($hidden$2.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runner.Computer$1.runnerForClass(java.lang.Class):::EXIT
this.val$builder == orig(this.val$builder)
this.val$builder.parents == orig(this.val$builder.parents)
org.junit.runner.Computer.this == orig(org.junit.runner.Computer.this)
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.val$builder.getClass().getName() == orig(this.val$builder.getClass().getName())
this.val$builder.parents.getClass().getName() == orig(this.val$builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer:::OBJECT
this has only one value
===========================================================================
org.junit.runner.Computer.Computer():::EXIT
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
testClass has only one value
===========================================================================
org.junit.runner.Computer.getRunner(org.junit.runners.model.RunnerBuilder, java.lang.Class):::EXIT
builder.parents == orig(builder.parents)
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
return has only one value
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.internal.builders.AllDefaultPossibilitiesBuilder.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runner.Description:::CLASS
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.Description:::OBJECT
this.fChildren[] elements != null
this.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
this.fAnnotations[] elements != null
this.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
this.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(this.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(this.fAnnotations[])-1
size(this.fChildren[]) >= size(this.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
annotations.getClass().getName() == java.lang.annotation.Annotation[].class
annotations[] elements != null
size(annotations[]) one of { 0, 1 }
===========================================================================
org.junit.runner.Description.Description(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY.fChildren[] == this.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == this.fChildren[].getClass().getName()
this.fDisplayName == orig(displayName)
this.fAnnotations == orig(annotations)
this.fAnnotations[] == annotations[]
annotations[] == orig(annotations[])
this.fChildren[] == []
this.fChildren[].getClass().getName() == []
annotations[] elements != null
org.junit.runner.Description.EMPTY.fChildren[] is the reverse of this.fChildren[]
org.junit.runner.Description.EMPTY.fDisplayName.toString < displayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < displayName.toString
this.fDisplayName.toString == displayName.toString
this.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
displayName.toString == orig(displayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(annotations[])-1
size(this.fChildren[]) <= size(this.fAnnotations[])
size(this.fChildren[]) >= size(annotations[])-1
size(this.fChildren[])-1 <= size(annotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(description.fChildren[]) one of { 0, 15 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString < description.fDisplayName.toString
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) % size(description.fChildren[])-1 == 0
size(this.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.addChild(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == orig(this.fChildren)
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
size(this.fChildren[])-1 == orig(size(this.fChildren[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
description.fChildren[] elements != null
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fChildren[].getClass().getName() one of { [], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
description.fAnnotations[].getClass().getName() one of { [], [com.sun.proxy.$Proxy2] }
size(this.fChildren[]) >= 1
size(description.fChildren[]) one of { 0, 15 }
size(description.fAnnotations[]) one of { 0, 1 }
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
orig(description) in this.fChildren[]
this.fDisplayName.toString < description.fDisplayName.toString
this.fDisplayName.toString == orig(this.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(this.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) != size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) >= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= orig(size(this.fChildren[]))-1
size(description.fChildren[]) % size(this.fChildren[]) == 0
size(this.fChildren[]) != size(description.fChildren[])
size(this.fChildren[]) != size(description.fChildren[])-1
size(this.fChildren[]) >= size(description.fAnnotations[])
size(description.fAnnotations[])-1 % size(this.fChildren[]) == 0
size(this.fChildren[])-1 != size(description.fChildren[])-1
size(this.fChildren[])-1 % size(description.fChildren[])-1 == 0
size(this.fChildren[])-1 >= size(description.fAnnotations[])-1
size(description.fChildren[]) != size(description.fAnnotations[])
size(description.fChildren[]) >= size(description.fAnnotations[])-1
size(description.fChildren[])-1 != size(description.fAnnotations[])
size(description.fChildren[])-1 != size(description.fAnnotations[])-1
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])
name.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
===========================================================================
org.junit.runner.Description.createSuiteDescription(java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == annotations[]
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations[] == annotations[]
annotations[] == return.fAnnotations[]
annotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
annotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
annotations[] == orig(annotations[])
return.fDisplayName == orig(name)
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))
name.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
annotations[] == []
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString == return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::ENTER
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
clazz has only one value
annotations[] elements != null
size(annotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == annotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
===========================================================================
org.junit.runner.Description.createTestDescription(java.lang.Class, java.lang.String, java.lang.annotation.Annotation[]):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
annotations[] == return.fAnnotations[]
annotations[] == orig(annotations[])
return.fAnnotations == orig(annotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(annotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(annotations[]))-1
annotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < name.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(annotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < name.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
name.toString < return.fDisplayName.toString
name.toString == orig(name.toString)
===========================================================================
org.junit.runner.Description.getChildren():::ENTER
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
===========================================================================
org.junit.runner.Description.getChildren():::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == this.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.fChildren == return
this.fChildren[] == return[]
this.fDisplayName == orig(this.fDisplayName)
this.fAnnotations == orig(this.fAnnotations)
return == orig(this.fChildren)
return[] == orig(this.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fAnnotations[]))
this.fDisplayName.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
return[] elements != null
return[].getClass().getName() elements == org.junit.runner.Description.class
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.fDisplayName.toString == orig(this.fDisplayName.toString)
size(org.junit.runner.Description.EMPTY.fChildren[]) <= size(return[])
size(org.junit.runner.Description.EMPTY.fChildren[])-1 <= size(return[])-1
===========================================================================
org.junit.runner.JUnitCore:::OBJECT
this has only one value
this.fNotifier has only one value
this.fNotifier != null
this.fNotifier.fListeners has only one value
this.fNotifier.fListeners != null
this.fNotifier.fListeners[] elements != null
this.fNotifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fNotifier.fPleaseStop == false
size(this.fNotifier.fListeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.JUnitCore.JUnitCore():::EXIT
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.JUnitCore.addListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[])-1 == orig(size(this.fNotifier.fListeners[]))
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
size(this.fNotifier.fListeners[]) == 1
orig(listener) in this.fNotifier.fListeners[]
this.fNotifier.fListeners[] elements == orig(listener)
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.defaultComputer():::EXIT
return has only one value
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 2
this.fNotifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
listener has only one value
size(this.fNotifier.fListeners[]) == 2
listener in this.fNotifier.fListeners[]
===========================================================================
org.junit.runner.JUnitCore.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
this.fNotifier.fListeners.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(java.lang.Class[]):::ENTER
size(this.fNotifier.fListeners[]) == size(classes[])
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(this.fNotifier.fListeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(java.lang.Class[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
classes[] == orig(classes[])
size(this.fNotifier.fListeners[]) == orig(size(classes[]))
size(classes[])-1 == size(return.fFailures[])
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 1248
return.fStartTime == 1477907340610L
orig(size(classes[])) == 1
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
request has only one value
request.getClass().getName() == org.junit.runner.Request$1.class
size(this.fNotifier.fListeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Request):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[])-1 == size(return.fFailures[])
size(return.fFailures[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 1248
return.fStartTime == 1477907340610L
size(this.fNotifier.fListeners[]) == 1
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::ENTER
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
size(this.fNotifier.fListeners[]) == 1
===========================================================================
org.junit.runner.JUnitCore.run(org.junit.runner.Runner):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fListeners[] == orig(this.fNotifier.fListeners[])
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
size(this.fNotifier.fListeners[])-1 == size(return.fFailures[])
size(return.fFailures[]) == orig(size(this.fNotifier.fListeners[]))-1
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 1248
return.fStartTime == 1477907340610L
size(this.fNotifier.fListeners[]) == 1
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::ENTER
size(this.fNotifier.fListeners[]) == size(args[])-1
this.fNotifier.fListeners[] == []
this.fNotifier.fListeners[].getClass().getName() == []
system has only one value
system.getClass().getName() == org.junit.internal.RealSystem.class
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.lang3.CharSetTest]
args[].toString elements == "org.apache.commons.lang3.CharSetTest"
size(args[]) == 1
===========================================================================
org.junit.runner.JUnitCore.runMain(org.junit.internal.JUnitSystem, java.lang.String[]):::EXIT
this.fNotifier == orig(this.fNotifier)
this.fNotifier.fListeners == orig(this.fNotifier.fListeners)
this.fNotifier.fPleaseStop == orig(this.fNotifier.fPleaseStop)
args[] == orig(args[])
return.fFailures[] == orig(this.fNotifier.fListeners[])
size(this.fNotifier.fListeners[]) == orig(size(args[]))
size(args[])-1 == size(return.fFailures[])
size(args[])-1 == orig(size(this.fNotifier.fListeners[]))
this.fNotifier.fListeners[] contains no nulls and has only one value, of length 1
this.fNotifier.fListeners[] elements has only one value
this.fNotifier.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fNotifier.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
args[] contains no nulls and has only one value, of length 1
args[] elements has only one value
args[].toString == [org.apache.commons.lang3.CharSetTest]
args[].toString elements == "org.apache.commons.lang3.CharSetTest"
return has only one value
return.fCount has only one value
return.fIgnoreCount has only one value
return.fFailures has only one value
return.fFailures[] == []
return.fFailures[].getClass().getName() == []
return.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
return.fRunTime == 1248
return.fStartTime == 1477907340610L
this.fNotifier.fListeners.getClass().getName() == return.fFailures.getClass().getName()
return.fFailures.getClass().getName() == orig(this.fNotifier.fListeners.getClass().getName())
===========================================================================
org.junit.runner.Request$1:::OBJECT
this has only one value
this.val$runner has only one value
this.val$runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::ENTER
$hidden$1 has only one value
$hidden$1.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request$1.(org.junit.runner.Runner):::EXIT
this.val$runner == orig($hidden$1)
this.val$runner.getClass().getName() == orig($hidden$1.getClass().getName())
===========================================================================
org.junit.runner.Request$1.getRunner():::ENTER
===========================================================================
org.junit.runner.Request$1.getRunner():::EXIT
this.val$runner == return
return == orig(this.val$runner)
return has only one value
return.getClass().getName() == org.junit.runners.Suite.class
this.val$runner.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.val$runner.getClass().getName())
===========================================================================
org.junit.runner.Request:::OBJECT
this has only one value
this.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.Request():::EXIT
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::ENTER
computer has only one value
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runner.Request.classes(org.junit.runner.Computer, java.lang.Class[]):::EXIT
classes[] == orig(classes[])
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::ENTER
runner has only one value
runner.getClass().getName() == org.junit.runners.Suite.class
===========================================================================
org.junit.runner.Request.runner(org.junit.runner.Runner):::EXIT
return has only one value
return.getClass().getName() == org.junit.runner.Request$1.class
===========================================================================
org.junit.runner.Result$Listener:::OBJECT
this has only one value
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount has only one value
org.junit.runner.Result.this.fIgnoreCount has only one value
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.Result.this.fRunTime one of { 0, 1248 }
org.junit.runner.Result.this.fStartTime one of { 0, 1477907340610L }
org.junit.runner.Result.this.fRunTime <= org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime >= size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime >= size(org.junit.runner.Result.this.fFailures[])
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this.fRunTime == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this has only one value
org.junit.runner.Result.this.fCount has only one value
org.junit.runner.Result.this.fIgnoreCount has only one value
org.junit.runner.Result.this.fFailures has only one value
org.junit.runner.Result.this.fFailures[] == []
org.junit.runner.Result.this.fFailures[].getClass().getName() == []
org.junit.runner.Result.this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.Result.this.fRunTime == 0
===========================================================================
org.junit.runner.Result$Listener.Listener(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fRunTime == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1477907340610L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fRunTime]
===========================================================================
org.junit.runner.Result$Listener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Result.this.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1477907340610L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
description.fAnnotations[] elements == description.fAnnotations[org.junit.runner.Result.this.fRunTime]
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::ENTER
org.junit.runner.Result.this == result
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fRunTime == result.fRunTime
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fStartTime == result.fStartTime
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1477907340610L
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.Result$Listener.testRunFinished(org.junit.runner.Result):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this == orig(result)
org.junit.runner.Result.this.fCount == result.fCount
org.junit.runner.Result.this.fIgnoreCount == result.fIgnoreCount
org.junit.runner.Result.this.fFailures == result.fFailures
org.junit.runner.Result.this.fFailures[] == result.fFailures[]
org.junit.runner.Result.this.fRunTime == result.fRunTime
org.junit.runner.Result.this.fStartTime == result.fStartTime
result.fCount == orig(org.junit.runner.Result.this.fCount)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(org.junit.runner.Result.this.fFailures)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(org.junit.runner.Result.this.fStartTime)
result.fStartTime == orig(result.fStartTime)
orig(result.fRunTime) == size(result.fFailures[])
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
result.fRunTime == 1248
result.fStartTime == 1477907340610L
orig(result.fRunTime) == 0
org.junit.runner.Result.this.fFailures.getClass().getName() == result.fFailures.getClass().getName()
result.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
result.fFailures.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Result.this.fRunTime == org.junit.runner.Result.this.fStartTime
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
org.junit.runner.Result.this.fRunTime == 0
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fRunTime]
===========================================================================
org.junit.runner.Result$Listener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Result.this == orig(org.junit.runner.Result.this)
org.junit.runner.Result.this.fCount == orig(org.junit.runner.Result.this.fCount)
org.junit.runner.Result.this.fIgnoreCount == orig(org.junit.runner.Result.this.fIgnoreCount)
org.junit.runner.Result.this.fFailures == orig(org.junit.runner.Result.this.fFailures)
org.junit.runner.Result.this.fFailures[] == orig(org.junit.runner.Result.this.fFailures[])
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fRunTime)
org.junit.runner.Result.this.fRunTime == orig(org.junit.runner.Result.this.fStartTime)
org.junit.runner.Result.this.fRunTime == size(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Result.this.fFailures[]) == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Result.this.fFailures[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
org.junit.runner.Result.this.fRunTime == 0
org.junit.runner.Result.this.fStartTime == 1477907340610L
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Result.this.fFailures.getClass().getName() == orig(org.junit.runner.Result.this.fFailures.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fChildren[] elements == description.fChildren[org.junit.runner.Result.this.fRunTime]
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.Result:::OBJECT
this has only one value
this.fCount has only one value
this.fCount != null
this.fIgnoreCount has only one value
this.fIgnoreCount != null
this.fFailures has only one value
this.fFailures != null
this.fFailures[] == []
this.fFailures[].getClass().getName() == []
this.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fRunTime one of { 0, 1248 }
this.fStartTime one of { 0, 1477907340610L }
this.fRunTime <= this.fStartTime
this.fRunTime >= size(this.fFailures[])
this.fStartTime >= size(this.fFailures[])
===========================================================================
org.junit.runner.Result.Result():::EXIT
this.fRunTime == this.fStartTime
this.fRunTime == size(this.fFailures[])
===========================================================================
org.junit.runner.Result.createListener():::ENTER
this.fRunTime == this.fStartTime
this.fRunTime == size(this.fFailures[])
===========================================================================
org.junit.runner.Result.createListener():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fRunTime == this.fStartTime
this.fRunTime == orig(this.fRunTime)
this.fRunTime == orig(this.fStartTime)
this.fRunTime == size(this.fFailures[])
this.fRunTime == orig(size(this.fFailures[]))
return has only one value
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.getFailureCount():::ENTER
this.fRunTime == 1248
this.fStartTime == 1477907340610L
===========================================================================
org.junit.runner.Result.getFailureCount():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
return == size(this.fFailures[])
return == orig(size(this.fFailures[]))
this.fRunTime == 1248
this.fStartTime == 1477907340610L
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.getFailures():::ENTER
this.fRunTime == 1248
this.fStartTime == 1477907340610L
===========================================================================
org.junit.runner.Result.getFailures():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == return
this.fFailures[] == return[]
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
return == orig(this.fFailures)
return[] == orig(this.fFailures[])
this.fRunTime == 1248
this.fStartTime == 1477907340610L
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fFailures.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.getRunCount():::ENTER
this.fRunTime == 1248
this.fStartTime == 1477907340610L
===========================================================================
org.junit.runner.Result.getRunCount():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fRunTime == 1248
this.fStartTime == 1477907340610L
return == 15
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.getRunTime():::ENTER
this.fRunTime == 1248
this.fStartTime == 1477907340610L
===========================================================================
org.junit.runner.Result.getRunTime():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fRunTime == return
this.fStartTime == orig(this.fStartTime)
return == orig(this.fRunTime)
this.fStartTime == 1477907340610L
return == 1248
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.wasSuccessful():::ENTER
this.fRunTime == 1248
this.fStartTime == 1477907340610L
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT
this.fCount == orig(this.fCount)
this.fIgnoreCount == orig(this.fIgnoreCount)
this.fFailures == orig(this.fFailures)
this.fFailures[] == orig(this.fFailures[])
this.fRunTime == orig(this.fRunTime)
this.fStartTime == orig(this.fStartTime)
this.fRunTime == 1248
this.fStartTime == 1477907340610L
return == true
this.fFailures.getClass().getName() == orig(this.fFailures.getClass().getName())
===========================================================================
org.junit.runner.Result.wasSuccessful():::EXIT;condition="return == true"
===========================================================================
org.junit.runner.Runner:::OBJECT
===========================================================================
org.junit.runner.Runner.Runner():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1:::OBJECT
this has only one value
===========================================================================
org.junit.runner.manipulation.Sorter$1.():::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter$1.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.manipulation.Sorter:::CLASS
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter:::OBJECT
this == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fComparator
this has only one value
this.fComparator has only one value
this.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fComparator.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::ENTER
comparator has only one value
comparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
===========================================================================
org.junit.runner.manipulation.Sorter.Sorter(java.util.Comparator):::EXIT
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::ENTER
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != object.getClass().getName()
===========================================================================
org.junit.runner.manipulation.Sorter.apply(java.lang.Object):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(object.getClass().getName())
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
o1.fDisplayName.toString != o2.fDisplayName.toString
===========================================================================
org.junit.runner.manipulation.Sorter.compare(org.junit.runner.Description, org.junit.runner.Description):::EXIT
org.junit.runner.manipulation.Sorter.NULL == orig(this)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fComparator)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o1.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == o2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o1.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(o2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
o1.fChildren == orig(o1.fChildren)
o1.fDisplayName == orig(o1.fDisplayName)
o1.fAnnotations == orig(o1.fAnnotations)
o1.fAnnotations[] == orig(o1.fAnnotations[])
o2.fChildren == orig(o2.fChildren)
o2.fDisplayName == orig(o2.fDisplayName)
o2.fAnnotations == orig(o2.fAnnotations)
o2.fAnnotations[] == orig(o2.fAnnotations[])
return == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o1.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(o2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o1.fAnnotations[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(o2.fAnnotations[]))-1
size(o1.fAnnotations[]) == size(o2.fAnnotations[])
size(o1.fAnnotations[]) == orig(size(o2.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
o1.fAnnotations[] elements != null
o1.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
o1.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
o2.fAnnotations[] elements != null
return == 0
size(o1.fAnnotations[]) == 1
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fComparator.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o1.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == o2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o1.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(o2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o1.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < o2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
o1.fDisplayName.toString != o2.fDisplayName.toString
o1.fDisplayName.toString == orig(o1.fDisplayName.toString)
o1.fAnnotations[] elements == o1.fAnnotations[return]
o2.fDisplayName.toString == orig(o2.fDisplayName.toString)
o2.fAnnotations[] elements == o2.fAnnotations[return]
===========================================================================
org.junit.runner.notification.RunListener:::OBJECT
===========================================================================
org.junit.runner.notification.RunListener.RunListener():::EXIT
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this has only one value
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testFinished(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
this has only one value
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunListener.testRunStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(description.fChildren[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this has only one value
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunListener.testStarted(org.junit.runner.Description):::EXIT
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(description.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == this.val$description.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])
size(this.val$description.fChildren[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
this has only one value
this.val$description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fChildren has only one value
this.val$description.fChildren[] contains no nulls and has only one value, of length 1
this.val$description.fChildren[] elements has only one value
this.val$description.fChildren[].getClass().getName() == [org.junit.runner.Description]
this.val$description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
this.val$description.fDisplayName has only one value
this.val$description.fDisplayName.toString == "null"
this.val$description.fAnnotations has only one value
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$1.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig($hidden$2.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fChildren[] == $hidden$2.fChildren[]
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fChildren[] == orig($hidden$2.fChildren[])
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fChildren[])
size($hidden$2.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
$hidden$2.fChildren has only one value
$hidden$2.fChildren[] contains no nulls and has only one value, of length 1
$hidden$2.fChildren[] elements has only one value
$hidden$2.fChildren[].getClass().getName() == [org.junit.runner.Description]
$hidden$2.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
$hidden$2.fDisplayName has only one value
$hidden$2.fDisplayName.toString == "null"
$hidden$2.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$1.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fChildren[] == orig(this.val$description.fChildren[])
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))
size(this.val$description.fChildren[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2:::OBJECT
this has only one value
this.val$result has only one value
this.val$result.fCount has only one value
this.val$result.fIgnoreCount has only one value
this.val$result.fFailures has only one value
this.val$result.fFailures[] == []
this.val$result.fFailures[].getClass().getName() == []
this.val$result.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$result.fRunTime one of { 0, 1248 }
this.val$result.fStartTime == 1477907340610L
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
this.val$result.fFailures.getClass().getName() == org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::ENTER
$hidden$2.fRunTime == size($hidden$2.fFailures[])
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
$hidden$2 has only one value
$hidden$2.fCount has only one value
$hidden$2.fIgnoreCount has only one value
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fRunTime == 0
$hidden$2.fStartTime == 1477907340610L
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fRunTime] has only one value
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$2.(org.junit.runner.notification.RunNotifier, org.junit.runner.Result):::EXIT
this.val$result == orig($hidden$2)
this.val$result.fCount == $hidden$2.fCount
this.val$result.fIgnoreCount == $hidden$2.fIgnoreCount
this.val$result.fFailures == $hidden$2.fFailures
this.val$result.fFailures[] == $hidden$2.fFailures[]
this.val$result.fRunTime == $hidden$2.fRunTime
this.val$result.fStartTime == $hidden$2.fStartTime
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fCount == orig($hidden$2.fCount)
$hidden$2.fIgnoreCount == orig($hidden$2.fIgnoreCount)
$hidden$2.fFailures == orig($hidden$2.fFailures)
$hidden$2.fFailures[] == orig($hidden$2.fFailures[])
$hidden$2.fRunTime == orig($hidden$2.fRunTime)
$hidden$2.fRunTime == size($hidden$2.fFailures[])
$hidden$2.fStartTime == orig($hidden$2.fStartTime)
$hidden$2.fCount has only one value
$hidden$2.fIgnoreCount has only one value
$hidden$2.fFailures has only one value
$hidden$2.fFailures[] == []
$hidden$2.fFailures[].getClass().getName() == []
$hidden$2.fFailures.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fRunTime == 0
$hidden$2.fStartTime == 1477907340610L
org.junit.runner.notification.RunNotifier.this.fListeners[$hidden$2.fRunTime] has only one value
this.val$result.fFailures.getClass().getName() == $hidden$2.fFailures.getClass().getName()
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == $hidden$2.fFailures.getClass().getName()
$hidden$2.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fFailures.getClass().getName() == orig($hidden$2.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$2.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$result == orig(this.val$result)
this.val$result.fCount == orig(this.val$result.fCount)
this.val$result.fIgnoreCount == orig(this.val$result.fIgnoreCount)
this.val$result.fFailures == orig(this.val$result.fFailures)
this.val$result.fFailures[] == orig(this.val$result.fFailures[])
this.val$result.fStartTime == orig(this.val$result.fStartTime)
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
this.val$result.fRunTime == 1248
this.val$result.fFailures.getClass().getName() == orig(this.val$result.fFailures.getClass().getName())
this.val$result.fFailures.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$3.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$3.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$7:::OBJECT
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == this.val$description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(this.val$description.fAnnotations[])-1
size(this.val$description.fAnnotations[]) == size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
this.val$description.fAnnotations[] elements != null
this.val$description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
this.val$description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < this.val$description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == this.val$description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < this.val$description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier$7.(org.junit.runner.notification.RunNotifier, org.junit.runner.Description):::EXIT
this.val$description == orig($hidden$2)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == $hidden$2.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig($hidden$2.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == $hidden$2.fChildren
this.val$description.fDisplayName == $hidden$2.fDisplayName
this.val$description.fAnnotations == $hidden$2.fAnnotations
this.val$description.fAnnotations[] == $hidden$2.fAnnotations[]
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
$hidden$2.fChildren == orig($hidden$2.fChildren)
$hidden$2.fDisplayName == orig($hidden$2.fDisplayName)
$hidden$2.fAnnotations == orig($hidden$2.fAnnotations)
$hidden$2.fAnnotations[] == orig($hidden$2.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size($hidden$2.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size($hidden$2.fAnnotations[]))-1
size(org.junit.runner.notification.RunNotifier.this.fListeners[])-1 == size($hidden$2.fAnnotations[])
size($hidden$2.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
$hidden$2.fAnnotations[] elements != null
$hidden$2.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
$hidden$2.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
org.junit.runner.Description.EMPTY.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == $hidden$2.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig($hidden$2.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < $hidden$2.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == $hidden$2.fDisplayName.toString
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
$hidden$2.fDisplayName.toString == orig($hidden$2.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::ENTER
each in org.junit.runner.notification.RunNotifier.this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier$7.notifyListener(org.junit.runner.notification.RunListener):::EXIT
this.val$description == orig(this.val$description)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(this.val$description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
this.val$description.fChildren == orig(this.val$description.fChildren)
this.val$description.fDisplayName == orig(this.val$description.fDisplayName)
this.val$description.fAnnotations == orig(this.val$description.fAnnotations)
this.val$description.fAnnotations[] == orig(this.val$description.fAnnotations[])
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.val$description.fAnnotations[]))-1
size(this.val$description.fAnnotations[]) == orig(size(org.junit.runner.notification.RunNotifier.this.fListeners[]))-1
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(this.val$description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
this.val$description.fDisplayName.toString == orig(this.val$description.fDisplayName.toString)
orig(each) in org.junit.runner.notification.RunNotifier.this.fListeners[]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier:::OBJECT
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
this.getClass().getName() != org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runner.notification.RunNotifier.this has only one value
org.junit.runner.notification.RunNotifier.this.fListeners has only one value
org.junit.runner.notification.RunNotifier.this.fListeners[] contains no nulls and has only one value, of length 2
org.junit.runner.notification.RunNotifier.this.fListeners[] elements != null
org.junit.runner.notification.RunNotifier.this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
org.junit.runner.notification.RunNotifier.this.fPleaseStop == false
size(org.junit.runner.notification.RunNotifier.this.fListeners[]) == 2
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.SafeNotifier(org.junit.runner.notification.RunNotifier):::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::ENTER
===========================================================================
org.junit.runner.notification.RunNotifier$SafeNotifier.run():::EXIT
org.junit.runner.notification.RunNotifier.this == orig(org.junit.runner.notification.RunNotifier.this)
org.junit.runner.notification.RunNotifier.this.fListeners == orig(org.junit.runner.notification.RunNotifier.this.fListeners)
org.junit.runner.notification.RunNotifier.this.fListeners[] == orig(org.junit.runner.notification.RunNotifier.this.fListeners[])
org.junit.runner.notification.RunNotifier.this.fPleaseStop == orig(org.junit.runner.notification.RunNotifier.this.fPleaseStop)
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName() == orig(org.junit.runner.notification.RunNotifier.this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier:::OBJECT
this has only one value
this.fListeners has only one value
this.fListeners != null
this.fListeners[] elements != null
this.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.fPleaseStop == false
size(this.fListeners[]) one of { 0, 1, 2 }
===========================================================================
org.junit.runner.notification.RunNotifier.RunNotifier():::EXIT
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[] elements has only one value
this.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
listener has only one value
size(this.fListeners[]) == 1
===========================================================================
org.junit.runner.notification.RunNotifier.addFirstListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
size(this.fListeners[]) == 2
orig(listener) in this.fListeners[]
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] == []
this.fListeners[].getClass().getName() == []
listener has only one value
===========================================================================
org.junit.runner.notification.RunNotifier.addListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[])-1 == orig(size(this.fListeners[]))
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[] elements has only one value
this.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
size(this.fListeners[]) == 1
orig(listener) in this.fListeners[]
this.fListeners[] elements == orig(listener)
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[])-1 == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 2
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestFinished(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[])-1 == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
size(description.fAnnotations[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 2
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::ENTER
result.fRunTime == size(result.fFailures[])
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
result has only one value
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fStartTime == 1477907340610L
size(this.fListeners[]) == 2
this.fListeners[result.fRunTime] has only one value
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunFinished(org.junit.runner.Result):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
result.fCount == orig(result.fCount)
result.fIgnoreCount == orig(result.fIgnoreCount)
result.fFailures == orig(result.fFailures)
result.fFailures[] == orig(result.fFailures[])
result.fStartTime == orig(result.fStartTime)
orig(result.fRunTime) == size(result.fFailures[])
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
result.fCount has only one value
result.fIgnoreCount has only one value
result.fFailures has only one value
result.fFailures[] == []
result.fFailures[].getClass().getName() == []
result.fRunTime == 1248
result.fStartTime == 1477907340610L
size(this.fListeners[]) == 2
this.fListeners[orig(result.fRunTime)] has only one value
this.fListeners.getClass().getName() == result.fFailures.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
this.fListeners.getClass().getName() == orig(result.fFailures.getClass().getName())
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
size(this.fListeners[])-1 == size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
description has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 2
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestRunStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == description.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(description.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fChildren[] == orig(description.fChildren[])
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
size(this.fListeners[])-1 == size(description.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fChildren[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fChildren[]))-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))
size(description.fChildren[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
description.fChildren has only one value
description.fChildren[] contains no nulls and has only one value, of length 1
description.fChildren[] elements has only one value
description.fChildren[].getClass().getName() == [org.junit.runner.Description]
description.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
description.fDisplayName has only one value
description.fDisplayName.toString == "null"
description.fAnnotations has only one value
size(this.fListeners[]) == 2
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::ENTER
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(this.fListeners[])-1 == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
description != null
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 2
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
===========================================================================
org.junit.runner.notification.RunNotifier.fireTestStarted(org.junit.runner.Description):::EXIT
this.fListeners == orig(this.fListeners)
this.fListeners[] == orig(this.fListeners[])
this.fPleaseStop == orig(this.fPleaseStop)
org.junit.runner.Description.EMPTY == orig(org.junit.runner.Description.EMPTY)
org.junit.runner.Description.TEST_MECHANISM == orig(org.junit.runner.Description.TEST_MECHANISM)
org.junit.runner.Description.EMPTY.fChildren == orig(org.junit.runner.Description.EMPTY.fChildren)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == description.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.EMPTY.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren[])
org.junit.runner.Description.EMPTY.fChildren[] == orig(description.fChildren[])
org.junit.runner.Description.EMPTY.fDisplayName == orig(org.junit.runner.Description.EMPTY.fDisplayName)
org.junit.runner.Description.EMPTY.fAnnotations == orig(org.junit.runner.Description.EMPTY.fAnnotations)
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.EMPTY.fAnnotations[])
org.junit.runner.Description.EMPTY.fAnnotations[] == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
org.junit.runner.Description.TEST_MECHANISM.fChildren == orig(org.junit.runner.Description.TEST_MECHANISM.fChildren)
org.junit.runner.Description.TEST_MECHANISM.fDisplayName == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName)
org.junit.runner.Description.TEST_MECHANISM.fAnnotations == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations)
description.fChildren == orig(description.fChildren)
description.fDisplayName == orig(description.fDisplayName)
description.fAnnotations == orig(description.fAnnotations)
description.fAnnotations[] == orig(description.fAnnotations[])
size(this.fListeners[])-1 == size(description.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(description.fAnnotations[])-1
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.EMPTY.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]))
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(description.fAnnotations[]))-1
size(description.fAnnotations[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.EMPTY != null
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.TEST_MECHANISM != null
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren != null
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName != null
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations != null
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fChildren != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName != null
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
org.junit.runner.Description.TEST_MECHANISM.fAnnotations != null
description.fChildren != null
description.fDisplayName != null
description.fAnnotations != null
description.fAnnotations[] elements != null
description.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
description.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(this.fListeners[]) == 2
this.fListeners.getClass().getName() != org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName()
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString == orig(org.junit.runner.Description.EMPTY.fDisplayName.toString)
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == description.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == orig(description.fAnnotations.getClass().getName())
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < description.fDisplayName.toString
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == orig(org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString)
description.fDisplayName.toString == orig(description.fDisplayName.toString)
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::ENTER
this.fListeners[] contains no nulls and has only one value, of length 2
this.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
listener has only one value
size(this.fListeners[]) == 2
listener in this.fListeners[]
===========================================================================
org.junit.runner.notification.RunNotifier.removeListener(org.junit.runner.notification.RunListener):::EXIT
this.fListeners == orig(this.fListeners)
this.fPleaseStop == orig(this.fPleaseStop)
size(this.fListeners[]) == orig(size(this.fListeners[]))-1
this.fListeners[] contains no nulls and has only one value, of length 1
this.fListeners[] elements has only one value
this.fListeners[].getClass().getName() == [org.junit.internal.TextListener]
this.fListeners[].getClass().getName() elements == org.junit.internal.TextListener.class
this.fListeners.getClass().getName() == orig(this.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1:::OBJECT
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::ENTER
org.junit.runners.BlockJUnit4ClassRunner.this has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.(org.junit.runners.BlockJUnit4ClassRunner):::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall():::EXIT
org.junit.runners.BlockJUnit4ClassRunner.this == orig(org.junit.runners.BlockJUnit4ClassRunner.this)
return.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner:::OBJECT
this has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::ENTER
klass has only one value
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.BlockJUnit4ClassRunner(java.lang.Class):::EXIT
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.computeTestMethods():::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 15
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 15
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.createTest():::EXIT
return.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.describeChild(org.junit.runners.model.FrameworkMethod):::EXIT
method.fMethod == orig(method.fMethod)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fChildren[] == return.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fAnnotations[] elements != null
return.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(return.fAnnotations[]) == 1
org.junit.runner.Description.EMPTY.fDisplayName.toString < org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString
org.junit.runner.Description.EMPTY.fDisplayName.toString < return.fDisplayName.toString
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString < return.fDisplayName.toString
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT
return == false
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.expectsException(org.junit.Test):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getChildren():::EXIT
return has only one value
return[] contains no nulls and has only one value, of length 15
return[].getClass().getName() == [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod]
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 15
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT381
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getExpectedException(org.junit.Test):::EXIT
return == null
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::ENTER
annotation.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT393
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.getTimeout(org.junit.Test):::EXIT
return == 0
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT
return == true
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.hasOneConstructor():::EXIT;condition="return == true"
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.makeNotifier(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
method.fMethod == orig(method.fMethod)
notifier.fListeners == return.fNotifier.fListeners
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == return.fNotifier.fListeners[]
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == return.fNotifier.fPleaseStop
notifier.fPleaseStop == orig(notifier.fPleaseStop)
return.fNotifier == orig(notifier)
size(notifier.fListeners[])-1 == size(return.fDescription.fAnnotations[])
size(return.fDescription.fChildren[]) == size(return.fDescription.fAnnotations[])-1
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
return.fNotifier has only one value
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
return.fDescription.fChildren[] == []
return.fDescription.fChildren[].getClass().getName() == []
return.fDescription.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
return.fDescription.fAnnotations[] elements != null
return.fDescription.fAnnotations[].getClass().getName() == [com.sun.proxy.$Proxy2]
return.fDescription.fAnnotations[].getClass().getName() elements == com.sun.proxy.$Proxy2.class
size(notifier.fListeners[]) == 2
notifier.fListeners.getClass().getName() == return.fNotifier.fListeners.getClass().getName()
notifier.fListeners.getClass().getName() != return.fDescription.fAnnotations.getClass().getName()
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT264
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod):::EXIT
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.methodInvoker(org.junit.runners.model.FrameworkMethod, java.lang.Object):::EXIT
method.fMethod == orig(method.fMethod)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.possiblyExpectingExceptions(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
method.fMethod == orig(method.fMethod)
return == orig(next)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.ruleFields():::EXIT
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::ENTER
test.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.rules(java.lang.Object):::EXIT
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
return.getClass().getName() != orig(test.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT84
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod, org.junit.runner.notification.RunNotifier):::EXIT
method.fMethod == orig(method.fMethod)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[] elements != null
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.testName(org.junit.runners.model.FrameworkMethod):::EXIT
method.fMethod == orig(method.fMethod)
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateConstructor(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateFields(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateOnlyOneConstructor(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateTestMethods(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::ENTER
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List):::EXIT
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withAfters(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withBefores(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
test.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
next.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
test.getClass().getName() != next.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withPotentialTimeout(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
method.fMethod == orig(method.fMethod)
return == orig(next)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(test.getClass().getName())
return.getClass().getName() == orig(next.getClass().getName())
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::ENTER
target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
statement.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
target.getClass().getName() != statement.getClass().getName()
===========================================================================
org.junit.runners.BlockJUnit4ClassRunner.withRules(org.junit.runners.model.FrameworkMethod, java.lang.Object, org.junit.runners.model.Statement):::EXIT
method.fMethod == orig(method.fMethod)
return == orig(statement)
return.getClass().getName() == org.junit.internal.runners.statements.InvokeMethod.class
return.getClass().getName() != orig(target.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler == null
===========================================================================
org.junit.runners.ParentRunner$1.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.fTestClass == null
org.junit.runners.ParentRunner.this.fScheduler == null
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.finished():::ENTER
===========================================================================
org.junit.runners.ParentRunner$1.finished():::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::ENTER
childStatement.getClass().getName() == org.junit.runners.ParentRunner$3.class
org.junit.runners.ParentRunner.this.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != childStatement.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != childStatement.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$1.schedule(java.lang.Runnable):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(childStatement.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(childStatement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 2
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
this.val$notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 2
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$2 has only one value
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 2
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
$hidden$2.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 2
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$2.(org.junit.runners.ParentRunner, org.junit.runner.notification.RunNotifier):::EXIT
this.val$notifier == orig($hidden$2)
this.val$notifier.fListeners == $hidden$2.fListeners
this.val$notifier.fListeners[] == $hidden$2.fListeners[]
this.val$notifier.fPleaseStop == $hidden$2.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$2.fListeners == orig($hidden$2.fListeners)
$hidden$2.fListeners[] == orig($hidden$2.fListeners[])
$hidden$2.fPleaseStop == orig($hidden$2.fPleaseStop)
$hidden$2.fListeners has only one value
$hidden$2.fListeners[] contains no nulls and has only one value, of length 2
$hidden$2.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
$hidden$2.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$2.fPleaseStop == false
size($hidden$2.fListeners[]) == 2
this.val$notifier.fListeners.getClass().getName() == $hidden$2.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$2.fListeners.getClass().getName() == orig($hidden$2.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::ENTER
===========================================================================
org.junit.runners.ParentRunner$2.evaluate():::EXIT
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
this.val$notifier has only one value
this.val$notifier.fListeners has only one value
this.val$notifier.fListeners[] contains no nulls and has only one value, of length 2
this.val$notifier.fListeners[] elements != null
this.val$notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
this.val$notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
this.val$notifier.fPleaseStop == false
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
size(this.val$notifier.fListeners[]) == 2
this.val$each.getClass().getName() != this.val$notifier.fListeners.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$each.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
this.val$notifier.fListeners.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
$hidden$3 has only one value
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 2
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
$hidden$3.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 2
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$2.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
$hidden$2.getClass().getName() != $hidden$3.fListeners.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$3.(org.junit.runners.ParentRunner, java.lang.Object, org.junit.runner.notification.RunNotifier):::EXIT
this.val$each == orig($hidden$2)
this.val$notifier == orig($hidden$3)
this.val$notifier.fListeners == $hidden$3.fListeners
this.val$notifier.fListeners[] == $hidden$3.fListeners[]
this.val$notifier.fPleaseStop == $hidden$3.fPleaseStop
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
$hidden$3.fListeners == orig($hidden$3.fListeners)
$hidden$3.fListeners[] == orig($hidden$3.fListeners[])
$hidden$3.fPleaseStop == orig($hidden$3.fPleaseStop)
$hidden$3.fListeners has only one value
$hidden$3.fListeners[] contains no nulls and has only one value, of length 2
$hidden$3.fListeners[] elements != null
$hidden$3.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
$hidden$3.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
$hidden$3.fPleaseStop == false
size($hidden$3.fListeners[]) == 2
this.val$each.getClass().getName() != $hidden$3.fListeners.getClass().getName()
this.val$each.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != $hidden$3.fListeners.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
$hidden$3.fListeners.getClass().getName() == orig($hidden$3.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$3.run():::ENTER
===========================================================================
org.junit.runners.ParentRunner$3.run():::EXIT
this.val$each == orig(this.val$each)
this.val$notifier == orig(this.val$notifier)
this.val$notifier.fListeners == orig(this.val$notifier.fListeners)
this.val$notifier.fListeners[] == orig(this.val$notifier.fListeners[])
this.val$notifier.fPleaseStop == orig(this.val$notifier.fPleaseStop)
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
this.val$each.getClass().getName() == orig(this.val$each.getClass().getName())
this.val$notifier.fListeners.getClass().getName() == orig(this.val$notifier.fListeners.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4:::OBJECT
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::ENTER
org.junit.runners.ParentRunner.this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
org.junit.runners.ParentRunner.this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator has only one value
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != org.junit.runners.ParentRunner.this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.(org.junit.runners.ParentRunner):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::ENTER
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
o1.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
org.junit.runners.ParentRunner.this.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != o1.getClass().getName()
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != o1.getClass().getName()
o1.getClass().getName() == o2.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner$4.compare(java.lang.Object, java.lang.Object):::EXIT
org.junit.runners.ParentRunner.this == orig(org.junit.runners.ParentRunner.this)
org.junit.runners.ParentRunner.this.fTestClass == orig(org.junit.runners.ParentRunner.this.fTestClass)
org.junit.runners.ParentRunner.this.fTestClass.fClass == orig(org.junit.runners.ParentRunner.this.fTestClass.fClass)
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations)
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations)
org.junit.runners.ParentRunner.this.fFilter == orig(org.junit.runners.ParentRunner.this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runners.ParentRunner.this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runners.ParentRunner.this.fSorter.fComparator == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator)
org.junit.runners.ParentRunner.this.fScheduler == orig(org.junit.runners.ParentRunner.this.fScheduler)
org.junit.runners.ParentRunner.this has only one value
org.junit.runners.ParentRunner.this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
org.junit.runners.ParentRunner.this.fTestClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fClass has only one value
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations has only one value
org.junit.runners.ParentRunner.this.fScheduler has only one value
return == 0
org.junit.runners.ParentRunner.this.getClass().getName() == orig(org.junit.runners.ParentRunner.this.getClass().getName())
org.junit.runners.ParentRunner.this.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runners.ParentRunner.this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName())
org.junit.runners.ParentRunner.this.fSorter.fComparator.getClass().getName() != orig(o1.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() == orig(org.junit.runners.ParentRunner.this.fScheduler.getClass().getName())
org.junit.runners.ParentRunner.this.fScheduler.getClass().getName() != orig(o1.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner:::OBJECT
this.fSorter == org.junit.runner.manipulation.Sorter.NULL
org.junit.runner.manipulation.Sorter.NULL.fComparator == this.fSorter.fComparator
this.fTestClass.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fFilter == null
org.junit.runner.manipulation.Sorter.NULL has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == org.junit.runner.manipulation.Sorter$1.class
this.fScheduler.getClass().getName() == org.junit.runners.ParentRunner$1.class
this.getClass().getName() != this.fTestClass.fMethodsForAnnotations.getClass().getName()
this.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.getClass().getName() != this.fScheduler.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() == this.fTestClass.fFieldsForAnnotations.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != this.fScheduler.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == this.fSorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != this.fScheduler.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.ParentRunner.ParentRunner(java.lang.Class):::EXIT
this.fTestClass.fClass == orig(testClass)
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.childrenInvoker(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 2
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
size(notifier.fListeners[]) == 2
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.ParentRunner.collectInitializationErrors(java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.comparator():::ENTER
===========================================================================
org.junit.runners.ParentRunner.comparator():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.getClass().getName() == org.junit.runners.ParentRunner$4.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.filterChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getDescription():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getDescription():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fChildren[].getClass().getName() one of { [org.junit.runner.Description], [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description] }
return.fDisplayName.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
size(return.fChildren[]) one of { 1, 15 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getFilteredChildren():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return[].getClass().getName() one of { [org.junit.runners.BlockJUnit4ClassRunner], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 1, 15 }
this.fTestClass.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() != orig(this.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getName():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getName():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::ENTER
===========================================================================
org.junit.runners.ParentRunner.getTestClass():::EXIT
this.fTestClass == return
this.fTestClass.fClass == return.fClass
this.fTestClass.fMethodsForAnnotations == return.fMethodsForAnnotations
this.fTestClass.fFieldsForAnnotations == return.fFieldsForAnnotations
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(this.fTestClass)
return.fClass == orig(this.fTestClass.fClass)
return.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
return.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
return.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
this.fTestClass.fFieldsForAnnotations.getClass().getName() == return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() != return.fMethodsForAnnotations.getClass().getName()
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == return.fFieldsForAnnotations.getClass().getName()
return.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
return.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.run(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::ENTER
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
===========================================================================
org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::ENTER
this.getClass().getName() != each.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != each.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != each.getClass().getName()
this.fScheduler.getClass().getName() != each.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == true
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(each.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(each.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(each.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.shouldRun(java.lang.Object):::EXIT;condition="return == true"
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::ENTER
org.junit.runner.manipulation.Sorter.NULL == sorter
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
this has only one value
this.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sort(org.junit.runner.manipulation.Sorter):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL == orig(sorter)
org.junit.runner.manipulation.Sorter.NULL.fComparator == sorter.fComparator
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(sorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass has only one value
this.fTestClass.fClass has only one value
this.fTestClass.fMethodsForAnnotations has only one value
this.fTestClass.fFieldsForAnnotations has only one value
this.fScheduler has only one value
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == sorter.fComparator.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(sorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::ENTER
this.getClass().getName() != child.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != child.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != child.getClass().getName()
this.fScheduler.getClass().getName() != child.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.sortChild(java.lang.Object):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(child.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(child.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(child.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validate():::ENTER
===========================================================================
org.junit.runners.ParentRunner.validate():::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::ENTER
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != errors.getClass().getName()
this.fTestClass.fMethodsForAnnotations.getClass().getName() != errors.getClass().getName()
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != errors.getClass().getName()
this.fScheduler.getClass().getName() != errors.getClass().getName()
===========================================================================
org.junit.runners.ParentRunner.validatePublicVoidNoArgMethods(java.lang.Class, boolean, java.util.List):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(this.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() != orig(errors.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(this.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() != orig(errors.getClass().getName())
this.fScheduler.getClass().getName() != orig(this.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
this.fScheduler.getClass().getName() != orig(errors.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withAfterClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::ENTER
statement.getClass().getName() == org.junit.runners.ParentRunner$2.class
===========================================================================
org.junit.runners.ParentRunner.withBeforeClasses(org.junit.runners.model.Statement):::EXIT
this.fTestClass == orig(this.fTestClass)
this.fTestClass.fClass == orig(this.fTestClass.fClass)
this.fTestClass.fMethodsForAnnotations == orig(this.fTestClass.fMethodsForAnnotations)
this.fTestClass.fFieldsForAnnotations == orig(this.fTestClass.fFieldsForAnnotations)
this.fFilter == orig(this.fFilter)
org.junit.runner.manipulation.Sorter.NULL == orig(this.fSorter)
org.junit.runner.manipulation.Sorter.NULL == orig(org.junit.runner.manipulation.Sorter.NULL)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator)
org.junit.runner.manipulation.Sorter.NULL.fComparator == orig(this.fSorter.fComparator)
this.fScheduler == orig(this.fScheduler)
return == orig(statement)
return.getClass().getName() == org.junit.runners.ParentRunner$2.class
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fMethodsForAnnotations.getClass().getName())
this.fTestClass.fMethodsForAnnotations.getClass().getName() == orig(this.fTestClass.fFieldsForAnnotations.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName())
org.junit.runner.manipulation.Sorter.NULL.fComparator.getClass().getName() == orig(this.fSorter.fComparator.getClass().getName())
this.fScheduler.getClass().getName() == orig(this.fScheduler.getClass().getName())
return.getClass().getName() == orig(statement.getClass().getName())
===========================================================================
org.junit.runners.Suite:::OBJECT
this has only one value
this.fRunners has only one value
this.fRunners[] contains no nulls and has only one value, of length 1
this.fRunners[] elements has only one value
this.fRunners[] elements != null
this.fRunners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
this.fRunners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == java.util.ArrayList.class
size(this.fRunners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::ENTER
klass == null
runners has only one value
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
runners.getClass().getName() == java.util.ArrayList.class
size(runners[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(java.lang.Class, java.util.List):::EXIT
this.fRunners == orig(runners)
this.fRunners[] == runners[]
runners[] == orig(runners[])
runners[] contains no nulls and has only one value, of length 1
runners[] elements has only one value
runners[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
runners[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
this.fRunners.getClass().getName() == orig(runners.getClass().getName())
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::ENTER
builder has only one value
builder.getClass().getName() == org.junit.runner.Computer$1.class
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes has only one value
classes.getClass().getName() == java.lang.Class[].class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
size(classes[]) == 1
===========================================================================
org.junit.runners.Suite.Suite(org.junit.runners.model.RunnerBuilder, java.lang.Class[]):::EXIT
builder.parents == orig(builder.parents)
classes[] == orig(classes[])
size(this.fRunners[]) == orig(size(classes[]))
builder.parents has only one value
builder.parents.getClass().getName() == java.util.HashSet.class
classes[] contains no nulls and has only one value, of length 1
classes[] elements has only one value
builder.parents.getClass().getName() == orig(builder.parents.getClass().getName())
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::ENTER
child has only one value
child.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
child in this.fRunners[]
this.fRunners[] elements == child
child.getClass().getName() in this.fRunners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.describeChild(org.junit.runner.Runner):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
org.junit.runner.Description.EMPTY.fChildren[] == org.junit.runner.Description.TEST_MECHANISM.fChildren[]
org.junit.runner.Description.EMPTY.fAnnotations[] == org.junit.runner.Description.TEST_MECHANISM.fAnnotations[]
org.junit.runner.Description.EMPTY.fAnnotations[] == return.fAnnotations[]
size(this.fRunners[])-1 == size(org.junit.runner.Description.EMPTY.fChildren[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.EMPTY.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(org.junit.runner.Description.TEST_MECHANISM.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == size(return.fAnnotations[])
size(org.junit.runner.Description.EMPTY.fChildren[]) == orig(size(this.fRunners[]))-1
org.junit.runner.Description.EMPTY has only one value
org.junit.runner.Description.TEST_MECHANISM has only one value
org.junit.runner.Description.EMPTY.fChildren has only one value
org.junit.runner.Description.EMPTY.fChildren[] == []
org.junit.runner.Description.EMPTY.fChildren[].getClass().getName() == []
org.junit.runner.Description.EMPTY.fDisplayName has only one value
org.junit.runner.Description.EMPTY.fDisplayName.toString == "No Tests"
org.junit.runner.Description.EMPTY.fAnnotations has only one value
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == java.lang.annotation.Annotation[].class
org.junit.runner.Description.EMPTY.fAnnotations[] == []
org.junit.runner.Description.TEST_MECHANISM.fChildren has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName has only one value
org.junit.runner.Description.TEST_MECHANISM.fDisplayName.toString == "Test mechanism"
org.junit.runner.Description.TEST_MECHANISM.fAnnotations has only one value
return.fChildren[].getClass().getName() == [org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description, org.junit.runner.Description]
return.fChildren[].getClass().getName() elements == org.junit.runner.Description.class
return.fDisplayName has only one value
return.fDisplayName.toString == "org.apache.commons.lang3.CharSetTest"
return.fAnnotations has only one value
size(return.fChildren[]) == 15
orig(child) in this.fRunners[]
this.fRunners[] elements == orig(child)
orig(child.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == org.junit.runner.Description.TEST_MECHANISM.fAnnotations.getClass().getName()
org.junit.runner.Description.EMPTY.fAnnotations.getClass().getName() == return.fAnnotations.getClass().getName()
===========================================================================
org.junit.runners.Suite.getChildren():::ENTER
===========================================================================
org.junit.runners.Suite.getChildren():::EXIT
this.fRunners == return
this.fRunners[] == return[]
return == orig(this.fRunners)
return[] == orig(this.fRunners[])
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.fRunners.getClass().getName() == return.getClass().getName()
return.getClass().getName() == orig(this.fRunners.getClass().getName())
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::ENTER
size(this.fRunners[]) == size(notifier.fListeners[])-1
runner has only one value
runner.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
notifier has only one value
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
runner in this.fRunners[]
this.fRunners[] elements == runner
runner.getClass().getName() in this.fRunners[].getClass().getName()
===========================================================================
org.junit.runners.Suite.runChild(org.junit.runner.Runner, org.junit.runner.notification.RunNotifier):::EXIT
this.fRunners == orig(this.fRunners)
this.fRunners[] == orig(this.fRunners[])
notifier.fListeners == orig(notifier.fListeners)
notifier.fListeners[] == orig(notifier.fListeners[])
notifier.fPleaseStop == orig(notifier.fPleaseStop)
size(this.fRunners[]) == size(notifier.fListeners[])-1
size(this.fRunners[]) == orig(size(notifier.fListeners[]))-1
notifier.fListeners has only one value
notifier.fListeners[] contains no nulls and has only one value, of length 2
notifier.fListeners[].getClass().getName() == [org.junit.runner.Result.Listener, org.junit.internal.TextListener]
notifier.fListeners.getClass().getName() == java.util.Collections$SynchronizedRandomAccessList.class
notifier.fPleaseStop == false
size(notifier.fListeners[]) == 2
orig(runner) in this.fRunners[]
this.fRunners[] elements == orig(runner)
orig(runner.getClass().getName()) in this.fRunners[].getClass().getName()
this.fRunners.getClass().getName() == orig(this.fRunners.getClass().getName())
notifier.fListeners.getClass().getName() == orig(notifier.fListeners.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMember:::OBJECT
this.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
===========================================================================
org.junit.runners.model.FrameworkMember.FrameworkMember():::EXIT
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::ENTER
members has only one value
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
members.getClass().getName() == java.util.ArrayList.class
this.getClass().getName() != members.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT18;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT
members[] == orig(members[])
members[] elements != null
members[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return == false
===========================================================================
org.junit.runners.model.FrameworkMember.isShadowedBy(java.util.List):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod$1:::OBJECT
this.val$target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
this.val$params.getClass().getName() == java.lang.Object[].class
this.val$params[] == []
this.val$params[].getClass().getName() == []
this.val$target.getClass().getName() != this.val$params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::ENTER
$hidden$2.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
$hidden$3.getClass().getName() == java.lang.Object[].class
$hidden$3[] == []
$hidden$2.getClass().getName() != $hidden$3.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod$1.(org.junit.runners.model.FrameworkMethod, java.lang.Object, java.lang.Object[]):::EXIT
this.val$target == orig($hidden$2)
this.val$params == orig($hidden$3)
this.val$params[] == $hidden$3[]
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
$hidden$3[] == orig($hidden$3[])
$hidden$3[] == []
this.val$target.getClass().getName() == orig($hidden$2.getClass().getName())
this.val$params.getClass().getName() == orig($hidden$3.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall():::EXIT
this.val$target == orig(this.val$target)
this.val$params == orig(this.val$params)
this.val$params[] == orig(this.val$params[])
org.junit.runners.model.FrameworkMethod.this == orig(org.junit.runners.model.FrameworkMethod.this)
org.junit.runners.model.FrameworkMethod.this.fMethod == orig(org.junit.runners.model.FrameworkMethod.this.fMethod)
return == null
this.val$target.getClass().getName() == orig(this.val$target.getClass().getName())
this.val$params.getClass().getName() == orig(this.val$params.getClass().getName())
===========================================================================
org.junit.runners.model.FrameworkMethod:::OBJECT
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.FrameworkMethod(java.lang.reflect.Method):::EXIT
this.fMethod == orig(method)
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotation(java.lang.Class):::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == com.sun.proxy.$Proxy2.class
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getAnnotations():::EXIT
this.fMethod == orig(this.fMethod)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] elements != null
size(return[]) one of { 0, 1 }
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.getName():::EXIT
this.fMethod == orig(this.fMethod)
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::ENTER
target.getClass().getName() == org.apache.commons.lang3.CharSetTest.class
params.getClass().getName() == java.lang.Object[].class
params[] == []
target.getClass().getName() != params.getClass().getName()
===========================================================================
org.junit.runners.model.FrameworkMethod.invokeExplosively(java.lang.Object, java.lang.Object[]):::EXIT
this.fMethod == orig(this.fMethod)
params[] == orig(params[])
params[] == []
return == null
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::ENTER
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT96;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT
this.fMethod == orig(this.fMethod)
other.fMethod == orig(other.fMethod)
return == false
===========================================================================
org.junit.runners.model.FrameworkMethod.isShadowedBy(org.junit.runners.model.FrameworkMethod):::EXIT;condition="not(return == true)"
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoid(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::ENTER
isStatic == false
errors has only one value
errors[] == []
errors[].getClass().getName() == []
errors.getClass().getName() == java.util.ArrayList.class
===========================================================================
org.junit.runners.model.FrameworkMethod.validatePublicVoidNoArg(boolean, java.util.List):::EXIT
this.fMethod == orig(this.fMethod)
errors[] == orig(errors[])
errors[] == []
errors[].getClass().getName() == []
===========================================================================
org.junit.runners.model.RunnerBuilder:::OBJECT
this.parents != null
this.parents.getClass().getName() == java.util.HashSet.class
this.getClass().getName() != this.parents.getClass().getName()
===========================================================================
org.junit.runners.model.RunnerBuilder.RunnerBuilder():::EXIT
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
===========================================================================
org.junit.runners.model.RunnerBuilder.addParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return == orig(parent)
this.parents has only one value
return == null
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
klass == null
===========================================================================
org.junit.runners.model.RunnerBuilder.removeParent(java.lang.Class):::EXIT
this.parents == orig(this.parents)
this.parents has only one value
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
parent == null
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class, java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::ENTER
this has only one value
this.getClass().getName() == org.junit.runner.Computer$1.class
this.parents has only one value
children has only one value
children.getClass().getName() == java.lang.Class[].class
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
size(children[]) == 1
===========================================================================
org.junit.runners.model.RunnerBuilder.runners(java.lang.Class[]):::EXIT
this.parents == orig(this.parents)
children[] == orig(children[])
size(return[]) == orig(size(children[]))
this.parents has only one value
children[] contains no nulls and has only one value, of length 1
children[] elements has only one value
return has only one value
return[] contains no nulls and has only one value, of length 1
return[] elements has only one value
return[].getClass().getName() == [org.junit.runners.BlockJUnit4ClassRunner]
return[].getClass().getName() elements == org.junit.runners.BlockJUnit4ClassRunner.class
return.getClass().getName() == java.util.ArrayList.class
size(return[]) == 1
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::ENTER
testClass has only one value
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT57
===========================================================================
org.junit.runners.model.RunnerBuilder.safeRunnerForClass(java.lang.Class):::EXIT
this.parents == orig(this.parents)
return.getClass().getName() == org.junit.runners.BlockJUnit4ClassRunner.class
this.parents.getClass().getName() == orig(this.parents.getClass().getName())
===========================================================================
org.junit.runners.model.Statement:::OBJECT
===========================================================================
org.junit.runners.model.Statement.Statement():::EXIT
===========================================================================
org.junit.runners.model.TestClass:::OBJECT
this.fMethodsForAnnotations.getClass().getName() == java.util.HashMap.class
this.fMethodsForAnnotations.getClass().getName() == this.fFieldsForAnnotations.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.TestClass(java.lang.Class):::EXIT
this.fClass == orig(klass)
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::ENTER
this.fMethodsForAnnotations == map
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
member.getClass().getName() == org.junit.runners.model.FrameworkMethod.class
this.fMethodsForAnnotations.getClass().getName() != member.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT56
===========================================================================
org.junit.runners.model.TestClass.addToAnnotationLists(org.junit.runners.model.FrameworkMember, java.util.Map):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fMethodsForAnnotations == orig(map)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() != orig(member.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotationClass has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedFields(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return[] == []
return[].getClass().getName() == []
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::ENTER
this.fMethodsForAnnotations.getClass().getName() == map.getClass().getName()
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMembers(java.util.Map, java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return.getClass().getName() == java.util.ArrayList.class
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(map.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotatedMethods(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[] elements != null
return[].getClass().getName() elements == org.junit.runners.model.FrameworkMethod.class
return[].getClass().getName() one of { [], [org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod, org.junit.runners.model.FrameworkMethod] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 15 }
this.fMethodsForAnnotations.getClass().getName() != return.getClass().getName()
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT129
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT130
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getAnnotations():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass has only one value)  ==>  (return has only one value)
return.getClass().getName() == java.lang.annotation.Annotation[].class
return[] == []
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getJavaClass():::EXIT
this.fClass == return
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return == orig(this.fClass)
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getName():::ENTER
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT109
this.fClass == null
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "null"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT110
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return has only one value
return.toString == "org.apache.commons.lang3.CharSetTest"
orig(this) has only one value
===========================================================================
org.junit.runners.model.TestClass.getName():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
(this.fClass == null)  <==>  (return.toString == "null")
(this.fClass has only one value)  <==>  (return.toString == "org.apache.commons.lang3.CharSetTest")
return.toString one of { "null", "org.apache.commons.lang3.CharSetTest" }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
===========================================================================
org.junit.runners.model.TestClass.getOnlyConstructor():::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::ENTER
this.fClass == testClass
===========================================================================
org.junit.runners.model.TestClass.getSuperClasses(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fClass == orig(testClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
return[].getClass().getName() elements == java.lang.Class.class
return[].getClass().getName() one of { [], [java.lang.Class, java.lang.Class] }
return.getClass().getName() == java.util.ArrayList.class
size(return[]) one of { 0, 2 }
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::ENTER
this has only one value
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
annotation has only one value
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT
this.fClass == orig(this.fClass)
this.fMethodsForAnnotations == orig(this.fMethodsForAnnotations)
this.fFieldsForAnnotations == orig(this.fFieldsForAnnotations)
this.fClass has only one value
this.fMethodsForAnnotations has only one value
this.fFieldsForAnnotations has only one value
return == false
this.fMethodsForAnnotations.getClass().getName() == orig(this.fMethodsForAnnotations.getClass().getName())
this.fMethodsForAnnotations.getClass().getName() == orig(this.fFieldsForAnnotations.getClass().getName())
===========================================================================
org.junit.runners.model.TestClass.runsTopToBottom(java.lang.Class):::EXIT;condition="not(return == true)"

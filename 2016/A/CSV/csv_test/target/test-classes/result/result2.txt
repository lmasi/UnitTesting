===========================================================================
org.apache.commons.csv.CSVFormat:::CLASS
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.EXCEL.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.RFC4180.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.DEFAULT.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.EXCEL.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.RFC4180.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.TDF.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.TDF.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.EXCEL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.MYSQL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.RFC4180.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.TDF.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.TDF.recordSeparator
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == org.apache.commons.csv.CSVFormat.TDF.delimiter
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID-1]
org.apache.commons.csv.QuoteMode.MINIMAL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID]
org.apache.commons.csv.CSVFormat.DEFAULT has only one value
org.apache.commons.csv.CSVFormat.DEFAULT != null
org.apache.commons.csv.CSVFormat.EXCEL has only one value
org.apache.commons.csv.CSVFormat.EXCEL != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV != null
org.apache.commons.csv.CSVFormat.MYSQL has only one value
org.apache.commons.csv.CSVFormat.MYSQL != null
org.apache.commons.csv.CSVFormat.RFC4180 has only one value
org.apache.commons.csv.CSVFormat.RFC4180 != null
org.apache.commons.csv.CSVFormat.TDF has only one value
org.apache.commons.csv.CSVFormat.TDF != null
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == false
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == 44
org.apache.commons.csv.CSVFormat.DEFAULT.header == null
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == true
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == 124
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == "\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator != null
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == 9
org.apache.commons.csv.CSVFormat.MYSQL.nullString has only one value
org.apache.commons.csv.CSVFormat.MYSQL.nullString != null
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == "\\N"
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator != null
org.apache.commons.csv.QuoteMode.ALL has only one value
org.apache.commons.csv.QuoteMode.MINIMAL has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC != null
org.apache.commons.csv.QuoteMode.NONE has only one value
org.apache.commons.csv.QuoteMode.NONE != null
org.apache.commons.csv.QuoteMode.$VALUES has only one value
org.apache.commons.csv.QuoteMode.$VALUES != null
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == org.apache.commons.csv.QuoteMode[].class
org.apache.commons.csv.QuoteMode.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.csv.QuoteMode.$VALUES[] elements != null
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == [org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode]
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() elements == org.apache.commons.csv.QuoteMode.class
size(org.apache.commons.csv.QuoteMode.$VALUES[]) == 4
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString > org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString
org.apache.commons.csv.QuoteMode.NON_NUMERIC in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NONE in org.apache.commons.csv.QuoteMode.$VALUES[]
===========================================================================
org.apache.commons.csv.CSVFormat:::OBJECT
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.header
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == this.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == this.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == this.recordSeparator
this.header == this.headerComments
this.ignoreHeaderCase == this.skipHeaderRecord
this.ignoreHeaderCase == this.trailingDelimiter
this.ignoreHeaderCase == this.trim
this.header == null
this.ignoreHeaderCase == false
this.nullString.toString == "\\N"
this.quoteMode == null
this.recordSeparator != null
this.recordSeparator.toString one of { "\n", "\r\n" }
org.apache.commons.csv.CSVFormat.serialVersionUID < this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == this.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > this.delimiter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < this.recordSeparator.toString
org.apache.commons.csv.CSVFormat.MYSQL.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString > this.recordSeparator.toString
this.delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.CSVFormat.CSVFormat(char, java.lang.Character, org.apache.commons.csv.QuoteMode, java.lang.Character, java.lang.Character, boolean, boolean, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String[], boolean, boolean, boolean, boolean, boolean):::ENTER
headerComments == header
skipHeaderRecord == ignoreHeaderCase
skipHeaderRecord == trim
skipHeaderRecord == trailingDelimiter
quoteMode == null
org.apache.commons.csv.QuoteMode.ALL has only one value
org.apache.commons.csv.QuoteMode.ALL != null
org.apache.commons.csv.QuoteMode.MINIMAL has only one value
org.apache.commons.csv.QuoteMode.MINIMAL != null
org.apache.commons.csv.QuoteMode.NON_NUMERIC has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC != null
org.apache.commons.csv.QuoteMode.NONE has only one value
org.apache.commons.csv.QuoteMode.NONE != null
org.apache.commons.csv.QuoteMode.$VALUES has only one value
org.apache.commons.csv.QuoteMode.$VALUES != null
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == org.apache.commons.csv.QuoteMode[].class
org.apache.commons.csv.QuoteMode.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.csv.QuoteMode.$VALUES[] elements != null
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == [org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode]
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() elements == org.apache.commons.csv.QuoteMode.class
recordSeparator != null
recordSeparator.toString one of { "\n", "\r\n" }
nullString.toString == "\\N"
headerComments == null
header == null
skipHeaderRecord == false
size(org.apache.commons.csv.QuoteMode.$VALUES[]) == 4
delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.ALL in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.MINIMAL in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NON_NUMERIC in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NONE in org.apache.commons.csv.QuoteMode.$VALUES[]
===========================================================================
org.apache.commons.csv.CSVFormat.CSVFormat(char, java.lang.Character, org.apache.commons.csv.QuoteMode, java.lang.Character, java.lang.Character, boolean, boolean, java.lang.String, java.lang.String, java.lang.Object[], java.lang.String[], boolean, boolean, boolean, boolean, boolean):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(headerComments)
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName())
this.allowMissingColumnNames == orig(allowMissingColumnNames)
this.commentMarker == orig(commentStart)
this.delimiter == orig(delimiter)
this.escapeCharacter == orig(escape)
this.header == orig(headerComments)
this.header == orig(header)
this.ignoreEmptyLines == orig(ignoreEmptyLines)
this.ignoreHeaderCase == orig(skipHeaderRecord)
this.ignoreHeaderCase == orig(ignoreHeaderCase)
this.ignoreHeaderCase == orig(trim)
this.ignoreHeaderCase == orig(trailingDelimiter)
this.ignoreSurroundingSpaces == orig(ignoreSurroundingSpaces)
this.nullString == orig(nullString)
this.quoteCharacter == orig(quoteChar)
this.quoteMode == orig(quoteMode)
this.recordSeparator == orig(recordSeparator)
orig(org.apache.commons.csv.QuoteMode.ALL) == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
orig(org.apache.commons.csv.QuoteMode.MINIMAL) == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
recordSeparator.toString one of { "\n", "\r\n" }
nullString.toString == "\\N"
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < recordSeparator.toString
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString > recordSeparator.toString
org.apache.commons.csv.QuoteMode.ALL in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.MINIMAL in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.NON_NUMERIC in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.NONE in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
orig(org.apache.commons.csv.QuoteMode.ALL) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.MINIMAL) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.NONE) in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[]) (elementwise)
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName()) (elementwise)
this.delimiter > orig(size(org.apache.commons.csv.QuoteMode.$VALUES[]))
this.recordSeparator.toString == recordSeparator.toString
recordSeparator.toString == orig(recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.getCommentMarker():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getCommentMarker():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == return
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.quoteCharacter == orig(this.quoteCharacter)
return == orig(this.commentMarker)
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.getDelimiter():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getDelimiter():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == orig(this.commentMarker)
this.delimiter == return
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.quoteCharacter == orig(this.quoteCharacter)
return == orig(this.delimiter)
this.quoteCharacter != null
return one of { 9, 44, 59 }
org.apache.commons.csv.CSVFormat.serialVersionUID < return
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter <= return
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
return > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.CSVFormat.getEscapeCharacter():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getEscapeCharacter():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.quoteCharacter == orig(this.quoteCharacter)
return == orig(this.escapeCharacter)
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == return
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.quoteCharacter == orig(this.quoteCharacter)
return == orig(this.ignoreEmptyLines)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter)
(return == false)  ==>  (this.delimiter == 44)
(return == false)  ==>  (this.ignoreSurroundingSpaces == false)
(return == false)  ==>  (this.ignoreSurroundingSpaces == return)
(return == false)  ==>  (this.quoteCharacter has only one value)
(return == true)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return)
(return == true)  ==>  (this.delimiter one of { 9, 44, 59 })
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines():::EXIT;condition="return == true"
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
return == true
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreEmptyLines():::EXIT;condition="not(return == true)"
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.DEFAULT.trim == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.EXCEL.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim == return
org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.MYSQL.trim == return
org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.RFC4180.trim == return
org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.TDF.trim == return
this.allowMissingColumnNames == return
this.ignoreHeaderCase == return
this.ignoreSurroundingSpaces == return
this.skipHeaderRecord == return
this.trailingDelimiter == return
this.trim == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
return == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
return == orig(this.allowMissingColumnNames)
return == orig(this.ignoreHeaderCase)
return == orig(this.ignoreSurroundingSpaces)
return == orig(this.skipHeaderRecord)
return == orig(this.trailingDelimiter)
return == orig(this.trim)
return == false
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == return
this.quoteCharacter == orig(this.quoteCharacter)
return == orig(this.ignoreSurroundingSpaces)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter)
(return == false)  ==>  (org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter)
(return == false)  ==>  (this.delimiter one of { 44, 59 })
(return == true)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker)
(return == true)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter)
(return == true)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return)
(return == true)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter)
(return == true)  ==>  (this.commentMarker == null)
(return == true)  ==>  (this.delimiter one of { 9, 44 })
(return == true)  ==>  (this.escapeCharacter == null)
(return == true)  ==>  (this.ignoreEmptyLines == return)
(return == true)  ==>  (this.ignoreEmptyLines == true)
(return == true)  ==>  (this.quoteCharacter has only one value)
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces():::EXIT;condition="return == true"
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces == return
this.ignoreEmptyLines == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
return == orig(this.ignoreEmptyLines)
this.delimiter one of { 9, 44 }
return == true
===========================================================================
org.apache.commons.csv.CSVFormat.getIgnoreSurroundingSpaces():::EXIT;condition="not(return == true)"
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.DEFAULT.trim == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.EXCEL.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim == return
org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.MYSQL.trim == return
org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.RFC4180.trim == return
org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.TDF.trim == return
this.allowMissingColumnNames == return
this.ignoreHeaderCase == return
this.skipHeaderRecord == return
this.trailingDelimiter == return
this.trim == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
return == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
return == orig(this.allowMissingColumnNames)
return == orig(this.ignoreHeaderCase)
return == orig(this.skipHeaderRecord)
return == orig(this.trailingDelimiter)
return == orig(this.trim)
this.delimiter one of { 44, 59 }
return == false
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
===========================================================================
org.apache.commons.csv.CSVFormat.getQuoteCharacter():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
this.delimiter one of { 9, 44, 59 }
this.quoteCharacter != null
===========================================================================
org.apache.commons.csv.CSVFormat.getQuoteCharacter():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.quoteCharacter == return
return == orig(this.quoteCharacter)
this.delimiter one of { 9, 44, 59 }
return != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.isEscapeCharacterSet():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
===========================================================================
org.apache.commons.csv.CSVFormat.isEscapeCharacterSet():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.escapeCharacter == orig(this.escapeCharacter)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
(this.escapeCharacter == null)  <==>  (return == false)
(this.escapeCharacter == null)  <==>  (this.ignoreEmptyLines == true)
(this.escapeCharacter == null)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT == orig(this))
(this.escapeCharacter == null)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return)
(this.escapeCharacter == null)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter)
(this.escapeCharacter == null)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines)
(this.escapeCharacter has only one value)  <==>  (return == true)
(this.escapeCharacter has only one value)  <==>  (this.ignoreEmptyLines == false)
(this.escapeCharacter has only one value)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreEmptyLines)
(this.escapeCharacter has only one value)  ==>  (org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return)
(this.escapeCharacter has only one value)  ==>  (org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == this.escapeCharacter)
===========================================================================
org.apache.commons.csv.CSVFormat.isEscapeCharacterSet():::EXIT;condition="return == true"
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == this.escapeCharacter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
return == true
orig(this) has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.isEscapeCharacterSet():::EXIT;condition="not(return == true)"
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.DEFAULT.trim == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.EXCEL.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim == return
org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.MYSQL.trim == return
org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces == return
org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.RFC4180.trim == return
org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase == return
org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord == return
org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter == return
org.apache.commons.csv.CSVFormat.TDF.trim == return
this.allowMissingColumnNames == return
this.ignoreHeaderCase == return
this.ignoreSurroundingSpaces == return
this.skipHeaderRecord == return
this.trailingDelimiter == return
this.trim == return
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
return == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
return == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
return == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
return == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
return == orig(this.allowMissingColumnNames)
return == orig(this.ignoreHeaderCase)
return == orig(this.ignoreSurroundingSpaces)
return == orig(this.skipHeaderRecord)
return == orig(this.trailingDelimiter)
return == orig(this.trim)
return == false
orig(this) has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(char):::ENTER
org.apache.commons.csv.CSVFormat.serialVersionUID < c
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > c
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < c
c > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(char):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
return == false
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > orig(c)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < orig(c)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
orig(c) > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(char):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(java.lang.Character):::ENTER
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(java.lang.Character):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
return == false
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.isLineBreak(java.lang.Character):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.CSVFormat.toStringArray(java.lang.Object[]):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.header == values
this.header == values
values == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
===========================================================================
org.apache.commons.csv.CSVFormat.toStringArray(java.lang.Object[]):::EXIT1150
===========================================================================
org.apache.commons.csv.CSVFormat.toStringArray(java.lang.Object[]):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == return
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(values)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return
this.headerComments == return
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreHeaderCase == orig(this.ignoreHeaderCase)
this.ignoreHeaderCase == orig(this.skipHeaderRecord)
this.ignoreHeaderCase == orig(this.trailingDelimiter)
this.ignoreHeaderCase == orig(this.trim)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.nullString == orig(this.nullString)
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == orig(this.recordSeparator)
return == orig(this.header)
return == orig(this.headerComments)
return == orig(values)
return == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.validate():::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
===========================================================================
org.apache.commons.csv.CSVFormat.validate():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName())
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == orig(this.escapeCharacter)
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreHeaderCase == orig(this.ignoreHeaderCase)
this.ignoreHeaderCase == orig(this.skipHeaderRecord)
this.ignoreHeaderCase == orig(this.trailingDelimiter)
this.ignoreHeaderCase == orig(this.trim)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.nullString == orig(this.nullString)
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter <= this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < this.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.ALL in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.MINIMAL in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.NON_NUMERIC in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.NONE in orig(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
orig(org.apache.commons.csv.QuoteMode.ALL) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.MINIMAL) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC) in org.apache.commons.csv.QuoteMode.$VALUES[]
orig(org.apache.commons.csv.QuoteMode.NONE) in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[]) (elementwise)
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName()) (elementwise)
this.delimiter > orig(size(org.apache.commons.csv.QuoteMode.$VALUES[]))
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames():::ENTER
this has only one value
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 44
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames():::EXIT
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 44
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
return has only one value
return.allowMissingColumnNames == true
===========================================================================
org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean):::ENTER
this has only one value
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 44
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
allowMissingColumnNames == true
===========================================================================
org.apache.commons.csv.CSVFormat.withAllowMissingColumnNames(boolean):::EXIT
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 44
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
return has only one value
return.allowMissingColumnNames == true
===========================================================================
org.apache.commons.csv.CSVFormat.withCommentMarker(char):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
commentMarker one of { 33, 35 }
===========================================================================
org.apache.commons.csv.CSVFormat.withCommentMarker(char):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == return.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == return.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == return.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == return.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == return.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.withCommentMarker(java.lang.Character):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
===========================================================================
org.apache.commons.csv.CSVFormat.withCommentMarker(java.lang.Character):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == return.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == return.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == return.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == return.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
return.commentMarker == orig(commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == return.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.CSVFormat.withDelimiter(char):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == false
this.delimiter == 44
this.escapeCharacter == null
this.ignoreEmptyLines == true
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withDelimiter(char):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return.escapeCharacter
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
return.delimiter == orig(delimiter)
this.allowMissingColumnNames == false
this.delimiter == 44
this.escapeCharacter == null
this.ignoreEmptyLines == true
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withEscape(char):::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.commentMarker == this.escapeCharacter
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
escape one of { 33, 92 }
===========================================================================
org.apache.commons.csv.CSVFormat.withEscape(char):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == this.escapeCharacter
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.commentMarker == orig(this.escapeCharacter)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withEscape(java.lang.Character):::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.commentMarker == this.escapeCharacter
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withEscape(java.lang.Character):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == this.escapeCharacter
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.commentMarker == orig(this.escapeCharacter)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
return.escapeCharacter == orig(escape)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines():::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == return.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == return.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == return.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == return.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == return.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
return has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == false
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreEmptyLines(boolean):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return.escapeCharacter
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
return.ignoreEmptyLines == orig(ignoreEmptyLines)
this.allowMissingColumnNames == false
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces():::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.commentMarker == this.escapeCharacter
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces():::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == this.escapeCharacter
this.commentMarker == return.commentMarker
this.commentMarker == return.escapeCharacter
this.commentMarker == orig(this.commentMarker)
this.commentMarker == orig(this.escapeCharacter)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == return.ignoreSurroundingSpaces
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean):::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.commentMarker == this.escapeCharacter
this.ignoreEmptyLines == ignoreSurroundingSpaces
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withIgnoreSurroundingSpaces(boolean):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == this.escapeCharacter
this.commentMarker == return.commentMarker
this.commentMarker == return.escapeCharacter
this.commentMarker == orig(this.commentMarker)
this.commentMarker == orig(this.escapeCharacter)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == return.ignoreSurroundingSpaces
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.ignoreEmptyLines == orig(ignoreSurroundingSpaces)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44 }
this.ignoreEmptyLines == true
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withNullString(java.lang.String):::ENTER
this has only one value
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 9
this.escapeCharacter has only one value
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\n"
nullString has only one value
nullString.toString == "\\N"
===========================================================================
org.apache.commons.csv.CSVFormat.withNullString(java.lang.String):::EXIT
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter == 9
this.escapeCharacter has only one value
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\n"
nullString.toString == "\\N"
return has only one value
return.nullString has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.withQuote(char):::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this has only one value
quoteChar == 39
===========================================================================
org.apache.commons.csv.CSVFormat.withQuote(char):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == return.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == return.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == return.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == return.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == return.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == return.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == return.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
return has only one value
return.quoteCharacter has only one value
===========================================================================
org.apache.commons.csv.CSVFormat.withQuote(java.lang.Character):::ENTER
this == org.apache.commons.csv.CSVFormat.DEFAULT
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withQuote(java.lang.Character):::EXIT
org.apache.commons.csv.CSVFormat.DEFAULT == orig(this)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return.escapeCharacter
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == return.recordSeparator
this.recordSeparator == orig(this.recordSeparator)
return.quoteCharacter == orig(quoteChar)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.quoteCharacter has only one value
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == return.recordSeparator.toString
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withRecordSeparator(char):::ENTER
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
recordSeparator == 10
===========================================================================
org.apache.commons.csv.CSVFormat.withRecordSeparator(char):::EXIT
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return.escapeCharacter
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == orig(this.recordSeparator)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
return.recordSeparator.toString == "\n"
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == orig(this.recordSeparator.toString)
===========================================================================
org.apache.commons.csv.CSVFormat.withRecordSeparator(java.lang.String):::ENTER
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
recordSeparator.toString == "\n"
===========================================================================
org.apache.commons.csv.CSVFormat.withRecordSeparator(java.lang.String):::EXIT
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
this.allowMissingColumnNames == this.ignoreHeaderCase
this.allowMissingColumnNames == this.ignoreSurroundingSpaces
this.allowMissingColumnNames == this.skipHeaderRecord
this.allowMissingColumnNames == this.trailingDelimiter
this.allowMissingColumnNames == this.trim
this.allowMissingColumnNames == return.allowMissingColumnNames
this.allowMissingColumnNames == return.ignoreHeaderCase
this.allowMissingColumnNames == return.ignoreSurroundingSpaces
this.allowMissingColumnNames == return.skipHeaderRecord
this.allowMissingColumnNames == return.trailingDelimiter
this.allowMissingColumnNames == return.trim
this.allowMissingColumnNames == orig(this.allowMissingColumnNames)
this.allowMissingColumnNames == orig(this.ignoreHeaderCase)
this.allowMissingColumnNames == orig(this.ignoreSurroundingSpaces)
this.allowMissingColumnNames == orig(this.skipHeaderRecord)
this.allowMissingColumnNames == orig(this.trailingDelimiter)
this.allowMissingColumnNames == orig(this.trim)
this.commentMarker == return.commentMarker
this.commentMarker == orig(this.commentMarker)
this.delimiter == return.delimiter
this.delimiter == orig(this.delimiter)
this.escapeCharacter == return.escapeCharacter
this.escapeCharacter == orig(this.escapeCharacter)
this.header == return.header
this.header == return.headerComments
this.header == orig(this.header)
this.header == orig(this.headerComments)
this.ignoreEmptyLines == return.ignoreEmptyLines
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.nullString == return.nullString
this.nullString == orig(this.nullString)
this.quoteCharacter == return.quoteCharacter
this.quoteCharacter == orig(this.quoteCharacter)
this.quoteMode == return.quoteMode
this.quoteMode == orig(this.quoteMode)
this.recordSeparator == orig(this.recordSeparator)
return.recordSeparator == orig(recordSeparator)
this.allowMissingColumnNames == false
this.commentMarker == null
this.delimiter one of { 9, 44, 124 }
this.nullString == null
this.recordSeparator has only one value
this.recordSeparator.toString == "\r\n"
recordSeparator.toString == "\n"
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
this.recordSeparator.toString == orig(this.recordSeparator.toString)
recordSeparator.toString == return.recordSeparator.toString
recordSeparator.toString == orig(recordSeparator.toString)
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader:::OBJECT
this.lastChar != 0
this.eolCounter one of { 0, 1 }
this.position >= 0
this.closed == false
this.lastChar != this.eolCounter
this.eolCounter <= this.position
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(java.io.Reader):::ENTER
reader != null
reader.getClass().getName() == java.io.StringReader.class
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.ExtendedBufferedReader(java.io.Reader):::EXIT
this.eolCounter == this.position
this.lastChar == -2
this.eolCounter == 0
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.getLastChar():::ENTER
this.lastChar one of { -2, 78, 97 }
this.eolCounter == 0
this.position one of { 0, 11 }
this.lastChar != this.position
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.getLastChar():::EXIT
this.lastChar == return
this.eolCounter == orig(this.eolCounter)
this.position == orig(this.position)
this.closed == orig(this.closed)
return == orig(this.lastChar)
this.eolCounter == 0
this.position one of { 0, 11 }
return one of { -2, 78, 97 }
this.eolCounter != return
this.position != return
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.lookAhead():::ENTER
this has only one value
this.lastChar == 13
this.eolCounter == 1
this.position == 10
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.lookAhead():::EXIT
this.lastChar == orig(this.lastChar)
this.eolCounter == orig(this.eolCounter)
this.position == orig(this.position)
this.closed == orig(this.closed)
this.lastChar == 13
this.eolCounter == 1
this.position == 10
return == 78
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.read():::ENTER
this.lastChar != this.position
===========================================================================
org.apache.commons.csv.ExtendedBufferedReader.read():::EXIT
this.lastChar == return
this.closed == orig(this.closed)
this.position >= 1
return != 0
this.eolCounter < this.position
this.eolCounter != return
this.eolCounter != orig(this.lastChar)
this.eolCounter >= orig(this.eolCounter)
this.eolCounter <= orig(this.position)
this.position > orig(this.eolCounter)
this.position - orig(this.position) - 1 == 0
return != orig(this.lastChar)
return != orig(this.eolCounter)
===========================================================================
org.apache.commons.csv.Lexer:::CLASS
===========================================================================
org.apache.commons.csv.Lexer:::OBJECT
this.delimiter one of { 9, 44, 59 }
this.escape >= 0
this.quoteChar one of { 0, 34, 39 }
this.commentStart >= 0
this.reader != null
this.reader.lastChar != 0
this.reader.eolCounter one of { 0, 1 }
this.reader.position >= 0
this.reader.closed == false
org.apache.commons.csv.Lexer.DISABLED > this.delimiter
org.apache.commons.csv.Lexer.DISABLED >= this.escape
org.apache.commons.csv.Lexer.DISABLED > this.quoteChar
org.apache.commons.csv.Lexer.DISABLED >= this.commentStart
org.apache.commons.csv.Lexer.DISABLED > this.reader.lastChar
org.apache.commons.csv.Lexer.DISABLED > this.reader.eolCounter
org.apache.commons.csv.Lexer.DISABLED > this.reader.position
this.delimiter != this.escape
this.delimiter != this.quoteChar
this.delimiter != this.commentStart
this.delimiter > this.reader.eolCounter
this.delimiter > this.reader.position
this.escape >= this.reader.eolCounter
this.escape >= this.reader.position
this.quoteChar != this.reader.lastChar
this.quoteChar >= this.reader.eolCounter
this.quoteChar >= this.reader.position
this.commentStart != this.reader.lastChar
this.commentStart >= this.reader.eolCounter
this.commentStart >= this.reader.position
this.reader.lastChar != this.reader.eolCounter
this.reader.eolCounter <= this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.Lexer(org.apache.commons.csv.CSVFormat, org.apache.commons.csv.ExtendedBufferedReader):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == reader.closed
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.EXCEL.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.RFC4180.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.DEFAULT.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.EXCEL.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.RFC4180.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.TDF.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == format.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.TDF.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.EXCEL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.MYSQL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.RFC4180.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.TDF.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == format.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.TDF.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == format.recordSeparator
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == org.apache.commons.csv.CSVFormat.TDF.delimiter
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID-1]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[reader.eolCounter]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[reader.position]
org.apache.commons.csv.QuoteMode.MINIMAL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID]
reader.eolCounter == reader.position
format != null
org.apache.commons.csv.CSVFormat.DEFAULT has only one value
org.apache.commons.csv.CSVFormat.DEFAULT != null
org.apache.commons.csv.CSVFormat.EXCEL has only one value
org.apache.commons.csv.CSVFormat.EXCEL != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV != null
org.apache.commons.csv.CSVFormat.MYSQL has only one value
org.apache.commons.csv.CSVFormat.MYSQL != null
org.apache.commons.csv.CSVFormat.RFC4180 has only one value
org.apache.commons.csv.CSVFormat.RFC4180 != null
org.apache.commons.csv.CSVFormat.TDF has only one value
org.apache.commons.csv.CSVFormat.TDF != null
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == false
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == 44
org.apache.commons.csv.CSVFormat.DEFAULT.header == null
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == true
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == 124
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == "\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator != null
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == 9
org.apache.commons.csv.CSVFormat.MYSQL.nullString has only one value
org.apache.commons.csv.CSVFormat.MYSQL.nullString != null
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == "\\N"
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator != null
format.delimiter one of { 9, 44, 59 }
format.quoteCharacter != null
org.apache.commons.csv.QuoteMode.ALL has only one value
org.apache.commons.csv.QuoteMode.MINIMAL has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC != null
org.apache.commons.csv.QuoteMode.NONE has only one value
org.apache.commons.csv.QuoteMode.NONE != null
org.apache.commons.csv.QuoteMode.$VALUES has only one value
org.apache.commons.csv.QuoteMode.$VALUES != null
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == org.apache.commons.csv.QuoteMode[].class
org.apache.commons.csv.QuoteMode.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.csv.QuoteMode.$VALUES[] elements != null
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == [org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode]
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() elements == org.apache.commons.csv.QuoteMode.class
reader != null
reader.lastChar == -2
reader.eolCounter == 0
size(org.apache.commons.csv.QuoteMode.$VALUES[]) == 4
org.apache.commons.csv.CSVFormat.serialVersionUID < format.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString > org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == format.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > format.delimiter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.MYSQL.delimiter <= format.delimiter
format.delimiter > reader.lastChar
format.delimiter > reader.eolCounter
format.delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.QuoteMode.NON_NUMERIC in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NONE in org.apache.commons.csv.QuoteMode.$VALUES[]
===========================================================================
org.apache.commons.csv.Lexer.Lexer(org.apache.commons.csv.CSVFormat, org.apache.commons.csv.ExtendedBufferedReader):::EXIT
this.delimiter == format.delimiter
this.delimiter == orig(format.delimiter)
this.ignoreSurroundingSpaces == format.ignoreSurroundingSpaces
this.ignoreSurroundingSpaces == orig(format.ignoreSurroundingSpaces)
this.ignoreEmptyLines == format.ignoreEmptyLines
this.ignoreEmptyLines == orig(format.ignoreEmptyLines)
this.reader == orig(reader)
this.reader.lastChar == reader.lastChar
this.reader.eolCounter == reader.eolCounter
this.reader.position == reader.eolCounter
this.reader.closed == org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == reader.closed
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(reader.closed)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.EXCEL.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.RFC4180.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.DEFAULT.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(format.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(format.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.EXCEL.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.RFC4180.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.TDF.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == format.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(format.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.TDF.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.EXCEL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.MYSQL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.RFC4180.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.TDF.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == format.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(format.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.TDF.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == format.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(format.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == org.apache.commons.csv.CSVFormat.TDF.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
format.commentMarker == orig(format.commentMarker)
format.escapeCharacter == orig(format.escapeCharacter)
format.quoteCharacter == orig(format.quoteCharacter)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[this.reader.eolCounter]
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(this.reader.eolCounter)])
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[this.reader.position]
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(this.reader.position)])
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID-1]
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[reader.eolCounter]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[reader.position]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[orig(reader.eolCounter)]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[orig(reader.position)]
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(reader.eolCounter)])
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(reader.position)])
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[reader.eolCounter])
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[reader.position])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID]
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
reader.lastChar == orig(reader.lastChar)
reader.eolCounter == reader.position
reader.eolCounter == orig(reader.eolCounter)
reader.eolCounter == orig(reader.position)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
org.apache.commons.csv.CSVFormat.DEFAULT has only one value
org.apache.commons.csv.CSVFormat.DEFAULT != null
org.apache.commons.csv.CSVFormat.EXCEL has only one value
org.apache.commons.csv.CSVFormat.EXCEL != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV != null
org.apache.commons.csv.CSVFormat.MYSQL has only one value
org.apache.commons.csv.CSVFormat.MYSQL != null
org.apache.commons.csv.CSVFormat.RFC4180 has only one value
org.apache.commons.csv.CSVFormat.RFC4180 != null
org.apache.commons.csv.CSVFormat.TDF has only one value
org.apache.commons.csv.CSVFormat.TDF != null
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == false
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == 44
org.apache.commons.csv.CSVFormat.DEFAULT.header == null
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == true
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == 124
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == "\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator != null
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == 9
org.apache.commons.csv.CSVFormat.MYSQL.nullString has only one value
org.apache.commons.csv.CSVFormat.MYSQL.nullString != null
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == "\\N"
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator != null
format.quoteCharacter != null
org.apache.commons.csv.QuoteMode.ALL has only one value
org.apache.commons.csv.QuoteMode.MINIMAL has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC != null
org.apache.commons.csv.QuoteMode.NONE has only one value
org.apache.commons.csv.QuoteMode.NONE != null
org.apache.commons.csv.QuoteMode.$VALUES has only one value
org.apache.commons.csv.QuoteMode.$VALUES != null
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == org.apache.commons.csv.QuoteMode[].class
org.apache.commons.csv.QuoteMode.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.csv.QuoteMode.$VALUES[] elements != null
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == [org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode]
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() elements == org.apache.commons.csv.QuoteMode.class
reader.lastChar == -2
reader.eolCounter == 0
size(org.apache.commons.csv.QuoteMode.$VALUES[]) == 4
this.delimiter > org.apache.commons.csv.CSVFormat.serialVersionUID
this.delimiter < org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter
this.delimiter >= org.apache.commons.csv.CSVFormat.MYSQL.delimiter
this.delimiter > reader.lastChar
this.delimiter > reader.eolCounter
this.delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
this.escape != this.quoteChar
this.escape > org.apache.commons.csv.CSVFormat.serialVersionUID
this.escape != org.apache.commons.csv.CSVFormat.DEFAULT.delimiter
this.escape != org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter
this.escape > org.apache.commons.csv.CSVFormat.MYSQL.delimiter
this.escape > reader.lastChar
this.escape > reader.eolCounter
this.escape > size(org.apache.commons.csv.QuoteMode.$VALUES[])
this.quoteChar != this.commentStart
this.quoteChar > org.apache.commons.csv.CSVFormat.serialVersionUID
this.quoteChar < org.apache.commons.csv.CSVFormat.DEFAULT.delimiter
this.quoteChar < org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter
this.quoteChar > org.apache.commons.csv.CSVFormat.MYSQL.delimiter
this.quoteChar > reader.lastChar
this.quoteChar > reader.eolCounter
this.quoteChar > size(org.apache.commons.csv.QuoteMode.$VALUES[])
this.commentStart > org.apache.commons.csv.CSVFormat.serialVersionUID
this.commentStart != org.apache.commons.csv.CSVFormat.DEFAULT.delimiter
this.commentStart != org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter
this.commentStart > org.apache.commons.csv.CSVFormat.MYSQL.delimiter
this.commentStart > reader.lastChar
this.commentStart > reader.eolCounter
this.commentStart > size(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString > org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == format.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(format.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.NON_NUMERIC in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NONE in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.Lexer.isCommentStart(int):::ENTER
this.reader.lastChar == ch
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
this.delimiter < this.reader.lastChar
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar < this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar > this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.isCommentStart(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == return
return == orig(this.reader.closed)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
return == false
org.apache.commons.csv.Lexer.DISABLED > orig(ch)
this.delimiter < orig(ch)
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape != orig(ch)
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar < orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.eolCounter < orig(ch)
this.reader.position < orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isCommentStart(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.Lexer.isDelimiter(int):::ENTER
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
ch != 0
org.apache.commons.csv.Lexer.DISABLED > ch
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != ch
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != ch
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar != this.reader.position
this.reader.lastChar >= ch
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != ch
this.reader.position != ch
===========================================================================
org.apache.commons.csv.Lexer.isDelimiter(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(this.reader.lastChar)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
(return == false)  <==>  (this.delimiter != orig(ch))
(return == false)  <==>  (this.delimiter != this.reader.lastChar)
(return == false)  ==>  (this.escape one of { 33, 92, 65534 })
(return == false)  ==>  (this.reader.closed == return)
(return == false)  ==>  (this.reader.eolCounter one of { 0, 1 })
(return == false)  ==>  (this.reader.position >= 1)
(return == true)  <==>  (this.delimiter == orig(ch))
(return == true)  <==>  (this.delimiter == this.reader.lastChar)
(return == true)  ==>  (orig(ch) one of { 9, 44, 59 })
(return == true)  ==>  (this.delimiter < this.escape)
(return == true)  ==>  (this.escape > orig(ch))
(return == true)  ==>  (this.escape > this.quoteChar)
(return == true)  ==>  (this.escape > this.reader.lastChar)
(return == true)  ==>  (this.escape one of { 92, 65534 })
(return == true)  ==>  (this.reader.eolCounter < orig(ch))
(return == true)  ==>  (this.reader.eolCounter == 0)
(return == true)  ==>  (this.reader.lastChar > this.reader.position)
(return == true)  ==>  (this.reader.lastChar one of { 9, 44, 59 })
(return == true)  ==>  (this.reader.position < orig(ch))
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar != this.reader.position
this.reader.lastChar >= orig(ch)
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != orig(ch)
this.reader.position != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isDelimiter(int):::EXIT;condition="return == true"
this.delimiter == this.reader.lastChar
this.delimiter == orig(this.reader.lastChar)
this.delimiter == orig(ch)
this.escape one of { 92, 65534 }
this.reader.eolCounter == 0
return == true
this.delimiter < this.escape
this.escape > this.quoteChar
===========================================================================
org.apache.commons.csv.Lexer.isDelimiter(int):::EXIT;condition="not(return == true)"
this.reader.closed == return
return == orig(this.reader.closed)
return == false
this.delimiter != this.reader.lastChar
this.delimiter != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isEndOfFile(int):::ENTER
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
ch != 0
org.apache.commons.csv.Lexer.DISABLED > ch
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != ch
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != ch
this.reader.lastChar != this.reader.position
this.reader.lastChar >= ch
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != ch
this.reader.position != ch
===========================================================================
org.apache.commons.csv.Lexer.isEndOfFile(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(this.reader.lastChar)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
(return == false)  <==>  (this.reader.lastChar > this.reader.eolCounter)
(return == false)  ==>  (this.commentStart one of { 33, 35, 65534 })
(return == false)  ==>  (this.delimiter one of { 9, 44, 59 })
(return == false)  ==>  (this.escape one of { 33, 92, 65534 })
(return == false)  ==>  (this.quoteChar one of { 34, 39 })
(return == false)  ==>  (this.reader.closed == return)
(return == false)  ==>  (this.reader.position >= 1)
(this.reader.lastChar == -1)  <==>  (return == true)
(this.reader.lastChar == -1)  <==>  (this.reader.lastChar < this.reader.eolCounter)
(this.reader.lastChar == -1)  ==>  (org.apache.commons.csv.Lexer.DISABLED == this.commentStart)
(this.reader.lastChar == -1)  ==>  (org.apache.commons.csv.Lexer.DISABLED > this.escape)
(this.reader.lastChar == -1)  ==>  (orig(ch) == -1)
(this.reader.lastChar == -1)  ==>  (this.commentStart > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.commentStart > this.reader.lastChar)
(this.reader.lastChar == -1)  ==>  (this.delimiter < this.commentStart)
(this.reader.lastChar == -1)  ==>  (this.delimiter == 44)
(this.reader.lastChar == -1)  ==>  (this.delimiter > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.delimiter > this.quoteChar)
(this.reader.lastChar == -1)  ==>  (this.delimiter > this.reader.lastChar)
(this.reader.lastChar == -1)  ==>  (this.escape < this.commentStart)
(this.reader.lastChar == -1)  ==>  (this.escape > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.escape > this.reader.lastChar)
(this.reader.lastChar == -1)  ==>  (this.escape one of { 33, 92 })
(this.reader.lastChar == -1)  ==>  (this.ignoreEmptyLines == return)
(this.reader.lastChar == -1)  ==>  (this.ignoreEmptyLines == true)
(this.reader.lastChar == -1)  ==>  (this.ignoreSurroundingSpaces == false)
(this.reader.lastChar == -1)  ==>  (this.ignoreSurroundingSpaces == this.reader.closed)
(this.reader.lastChar == -1)  ==>  (this.quoteChar < this.commentStart)
(this.reader.lastChar == -1)  ==>  (this.quoteChar == 34)
(this.reader.lastChar == -1)  ==>  (this.quoteChar > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.quoteChar > this.reader.lastChar)
(this.reader.lastChar == -1)  ==>  (this.reader.eolCounter > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.reader.lastChar < this.reader.position)
(this.reader.lastChar == -1)  ==>  (this.reader.lastChar == orig(ch))
(this.reader.lastChar == -1)  ==>  (this.reader.position > orig(ch))
(this.reader.lastChar == -1)  ==>  (this.reader.position one of { 19, 21 })
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.lastChar != this.reader.position
this.reader.lastChar >= orig(ch)
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != orig(ch)
this.reader.position != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isEndOfFile(int):::EXIT;condition="return == true"
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
org.apache.commons.csv.Lexer.DISABLED == orig(this.commentStart)
this.ignoreSurroundingSpaces == this.reader.closed
this.ignoreSurroundingSpaces == orig(this.reader.closed)
this.ignoreEmptyLines == return
this.reader.lastChar == orig(ch)
return == orig(this.ignoreEmptyLines)
orig(this.reader.lastChar) == orig(ch)
this.delimiter == 44
this.escape one of { 33, 92 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.reader.position one of { 19, 21 }
return == true
orig(ch) == -1
org.apache.commons.csv.Lexer.DISABLED > this.escape
this.escape > orig(ch)
this.reader.eolCounter > orig(ch)
this.reader.position > orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isEndOfFile(int):::EXIT;condition="not(return == true)"
this.reader.closed == return
return == orig(this.reader.closed)
return == false
this.reader.lastChar > this.reader.eolCounter
===========================================================================
org.apache.commons.csv.Lexer.isEscape(int):::ENTER
this.reader.lastChar == ch
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
this.delimiter != this.reader.lastChar
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar != this.reader.position
this.reader.eolCounter < this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.isEscape(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
(return == false)  <==>  (this.escape != orig(ch))
(return == false)  ==>  (this.commentStart one of { 33, 35, 65534 })
(return == false)  ==>  (this.delimiter one of { 9, 44, 59 })
(return == false)  ==>  (this.escape one of { 33, 92, 65534 })
(return == false)  ==>  (this.quoteChar one of { 34, 39 })
(return == false)  ==>  (this.reader.closed == return)
(return == false)  ==>  (this.reader.eolCounter one of { 0, 1 })
(return == false)  ==>  (this.reader.position >= 1)
(return == true)  <==>  (this.escape == orig(ch))
(return == true)  ==>  (org.apache.commons.csv.Lexer.DISABLED == this.commentStart)
(return == true)  ==>  (org.apache.commons.csv.Lexer.DISABLED > this.escape)
(return == true)  ==>  (orig(ch) one of { 33, 92 })
(return == true)  ==>  (this.commentStart > orig(ch))
(return == true)  ==>  (this.delimiter < this.commentStart)
(return == true)  ==>  (this.delimiter == 44)
(return == true)  ==>  (this.delimiter > this.quoteChar)
(return == true)  ==>  (this.escape < this.commentStart)
(return == true)  ==>  (this.escape one of { 33, 92 })
(return == true)  ==>  (this.ignoreEmptyLines == return)
(return == true)  ==>  (this.ignoreEmptyLines == true)
(return == true)  ==>  (this.ignoreSurroundingSpaces == false)
(return == true)  ==>  (this.ignoreSurroundingSpaces == this.reader.closed)
(return == true)  ==>  (this.quoteChar < this.commentStart)
(return == true)  ==>  (this.quoteChar == 34)
(return == true)  ==>  (this.reader.eolCounter == 0)
(return == true)  ==>  (this.reader.position < orig(ch))
(return == true)  ==>  (this.reader.position one of { 10, 24 })
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
org.apache.commons.csv.Lexer.DISABLED > orig(ch)
this.delimiter != orig(ch)
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.eolCounter < this.reader.position
this.reader.eolCounter < orig(ch)
this.reader.position != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isEscape(int):::EXIT;condition="return == true"
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
org.apache.commons.csv.Lexer.DISABLED == orig(this.commentStart)
this.escape == this.reader.lastChar
this.escape == orig(this.reader.lastChar)
this.escape == orig(ch)
this.ignoreSurroundingSpaces == this.reader.closed
this.ignoreSurroundingSpaces == orig(this.reader.closed)
this.ignoreEmptyLines == return
return == orig(this.ignoreEmptyLines)
this.delimiter == 44
this.escape one of { 33, 92 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.reader.eolCounter == 0
this.reader.position one of { 10, 24 }
return == true
org.apache.commons.csv.Lexer.DISABLED > this.escape
===========================================================================
org.apache.commons.csv.Lexer.isEscape(int):::EXIT;condition="not(return == true)"
this.reader.closed == return
return == orig(this.reader.closed)
return == false
this.escape != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isMetaChar(int):::ENTER
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.ignoreSurroundingSpaces == this.reader.closed
this.reader.lastChar == ch
this.delimiter == 44
this.escape == 92
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.ignoreEmptyLines == true
this.reader.lastChar one of { 78, 97 }
this.reader.eolCounter == 0
this.reader.position == 11
===========================================================================
org.apache.commons.csv.Lexer.isMetaChar(int):::EXIT
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.ignoreSurroundingSpaces == return
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == return
return == orig(this.ignoreSurroundingSpaces)
return == orig(this.reader.closed)
this.delimiter == 44
this.escape == 92
this.quoteChar == 34
this.ignoreEmptyLines == true
this.reader.eolCounter == 0
this.reader.position == 11
return == false
orig(ch) one of { 78, 97 }
===========================================================================
org.apache.commons.csv.Lexer.isMetaChar(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.Lexer.isQuoteChar(int):::ENTER
this.reader.lastChar == ch
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
this.delimiter < this.reader.lastChar
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar < this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar > this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.isQuoteChar(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == return
return == orig(this.reader.closed)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
return == false
org.apache.commons.csv.Lexer.DISABLED > orig(ch)
this.delimiter < orig(ch)
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape != orig(ch)
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar < orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.eolCounter < orig(ch)
this.reader.position < orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isQuoteChar(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.Lexer.isStartOfLine(int):::ENTER
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
ch == -2
this.delimiter < this.reader.lastChar
this.delimiter > ch
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape > ch
this.quoteChar != this.commentStart
this.quoteChar < this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar > ch
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart > ch
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar > this.reader.position
this.reader.lastChar > ch
===========================================================================
org.apache.commons.csv.Lexer.isStartOfLine(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(this.reader.lastChar)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
return == true
this.delimiter < this.reader.lastChar
this.delimiter > orig(ch)
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape > orig(ch)
this.quoteChar != this.commentStart
this.quoteChar < this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar > orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart > orig(ch)
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar > this.reader.position
this.reader.lastChar > orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.isStartOfLine(int):::EXIT;condition="return == true"
===========================================================================
org.apache.commons.csv.Lexer.isWhitespace(int):::ENTER
org.apache.commons.csv.Lexer.DISABLED == this.escape
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.reader.lastChar == ch
this.delimiter one of { 9, 44 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == true
this.reader.lastChar one of { 97, 110, 111 }
this.reader.eolCounter == 0
this.reader.position == 1
===========================================================================
org.apache.commons.csv.Lexer.isWhitespace(int):::EXIT
org.apache.commons.csv.Lexer.DISABLED == this.escape
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.delimiter == orig(this.delimiter)
this.quoteChar == orig(this.quoteChar)
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreSurroundingSpaces == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == return
return == orig(this.reader.closed)
this.delimiter one of { 9, 44 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == true
this.reader.eolCounter == 0
this.reader.position == 1
return == false
orig(ch) one of { 97, 110, 111 }
===========================================================================
org.apache.commons.csv.Lexer.isWhitespace(int):::EXIT;condition="not(return == true)"
===========================================================================
org.apache.commons.csv.Lexer.mapNullToDisabled(java.lang.Character):::ENTER
this.commentStart == this.reader.eolCounter
this.commentStart == this.reader.position
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.ignoreSurroundingSpaces == this.reader.closed
this.commentStart == 0
this.ignoreSurroundingSpaces == false
this.reader.lastChar == -2
this.delimiter > this.commentStart
this.delimiter > this.reader.lastChar
this.escape >= this.commentStart
this.escape > this.reader.lastChar
this.quoteChar >= this.commentStart
this.quoteChar > this.reader.lastChar
===========================================================================
org.apache.commons.csv.Lexer.mapNullToDisabled(java.lang.Character):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == this.reader.eolCounter
this.commentStart == this.reader.position
this.commentStart == orig(this.commentStart)
this.commentStart == orig(this.reader.eolCounter)
this.commentStart == orig(this.reader.position)
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.ignoreSurroundingSpaces == this.reader.closed
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreSurroundingSpaces == orig(this.ignoreEmptyLines)
this.ignoreSurroundingSpaces == orig(this.reader.closed)
this.reader == orig(this.reader)
this.reader.lastChar == orig(this.reader.lastChar)
this.commentStart == 0
this.ignoreSurroundingSpaces == false
this.reader.lastChar == -2
org.apache.commons.csv.Lexer.DISABLED >= return
this.delimiter > this.commentStart
this.delimiter > this.reader.lastChar
this.delimiter != return
this.escape >= this.commentStart
this.escape > this.reader.lastChar
this.quoteChar >= this.commentStart
this.quoteChar > this.reader.lastChar
this.quoteChar != return
this.commentStart < return
this.reader.lastChar < return
===========================================================================
org.apache.commons.csv.Lexer.nextToken(org.apache.commons.csv.Token):::ENTER
this.reader.eolCounter == this.reader.position
this.reader.closed == token.isReady
token.type == org.apache.commons.csv.Token$Type.INVALID
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[this.reader.eolCounter]
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[this.reader.position]
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.lastChar == -2
this.reader.eolCounter == 0
token != null
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.TOKEN != null
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EOF != null
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.EORECORD != null
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.COMMENT != null
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES != null
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[] elements != null
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
token.content != null
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
this.delimiter > this.reader.lastChar
this.delimiter != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.delimiter > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.escape != this.quoteChar
this.escape > this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.escape > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.quoteChar != this.commentStart
this.quoteChar > this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.quoteChar > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.commentStart > this.reader.lastChar
this.commentStart > this.reader.eolCounter
this.commentStart != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.commentStart > size(org.apache.commons.csv.Token$Type.$VALUES[])
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.Lexer.nextToken(org.apache.commons.csv.Token):::EXIT164
===========================================================================
org.apache.commons.csv.Lexer.nextToken(org.apache.commons.csv.Token):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.closed == orig(this.reader.closed)
this.reader.closed == orig(token.isReady)
token.type == return.type
org.apache.commons.csv.Token$Type.INVALID == orig(token.type)
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.INVALID)
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[orig(this.reader.eolCounter)]
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[orig(this.reader.position)]
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.$VALUES[this.reader.eolCounter])
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.$VALUES[this.reader.position])
org.apache.commons.csv.Token$Type.TOKEN == orig(org.apache.commons.csv.Token$Type.TOKEN)
org.apache.commons.csv.Token$Type.EOF == orig(org.apache.commons.csv.Token$Type.EOF)
org.apache.commons.csv.Token$Type.EORECORD == orig(org.apache.commons.csv.Token$Type.EORECORD)
org.apache.commons.csv.Token$Type.COMMENT == orig(org.apache.commons.csv.Token$Type.COMMENT)
org.apache.commons.csv.Token$Type.$VALUES == orig(org.apache.commons.csv.Token$Type.$VALUES)
org.apache.commons.csv.Token$Type.$VALUES[] == orig(org.apache.commons.csv.Token$Type.$VALUES[])
token.content == return.content
token.content == orig(token.content)
token.isReady == return.isReady
return == orig(token)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.lastChar >= -1
token.type != null
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.TOKEN != null
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EOF != null
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.EORECORD != null
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.COMMENT != null
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES != null
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[] elements != null
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
token.content != null
return != null
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
this.delimiter >= this.reader.lastChar
this.delimiter != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.delimiter > orig(this.reader.lastChar)
this.delimiter > orig(this.reader.eolCounter)
this.delimiter > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.escape != this.quoteChar
this.escape > this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.escape > orig(this.reader.lastChar)
this.escape > orig(this.reader.eolCounter)
this.escape > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.quoteChar > orig(this.reader.lastChar)
this.quoteChar > orig(this.reader.eolCounter)
this.quoteChar > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.commentStart > orig(this.reader.lastChar)
this.commentStart > orig(this.reader.eolCounter)
this.commentStart > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.reader.lastChar != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.lastChar > orig(this.reader.lastChar)
this.reader.lastChar != orig(this.reader.eolCounter)
this.reader.lastChar != size(org.apache.commons.csv.Token$Type.$VALUES[])
this.reader.lastChar != size(org.apache.commons.csv.Token$Type.$VALUES[])-1
this.reader.eolCounter < this.reader.position
this.reader.eolCounter < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.eolCounter > orig(this.reader.lastChar)
this.reader.eolCounter >= orig(this.reader.eolCounter)
this.reader.eolCounter < size(org.apache.commons.csv.Token$Type.$VALUES[])-1
this.reader.position < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.position > orig(this.reader.lastChar)
this.reader.position > orig(this.reader.eolCounter)
this.reader.position != size(org.apache.commons.csv.Token$Type.$VALUES[])
token.type in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == orig(org.apache.commons.csv.Token$Type.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.Lexer.parseSimpleToken(org.apache.commons.csv.Token, int):::ENTER
this.reader.lastChar == ch
this.reader.closed == token.isReady
token.type == org.apache.commons.csv.Token$Type.INVALID
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[this.reader.eolCounter]
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[this.reader.position-1]
org.apache.commons.csv.Token$Type.TOKEN == org.apache.commons.csv.Token$Type.$VALUES[this.reader.position]
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.eolCounter == 0
this.reader.position == 1
token != null
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EOF != null
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.EORECORD != null
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.COMMENT != null
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES != null
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[] elements != null
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
token.content != null
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
this.delimiter < this.reader.lastChar
this.delimiter != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.delimiter > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.escape > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.quoteChar != this.commentStart
this.quoteChar < this.reader.lastChar
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.quoteChar > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.commentStart > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar > this.reader.position
this.reader.lastChar != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.lastChar > size(org.apache.commons.csv.Token$Type.$VALUES[])
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.Lexer.parseSimpleToken(org.apache.commons.csv.Token, int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.closed == orig(this.reader.closed)
this.reader.closed == orig(token.isReady)
token.type == return.type
org.apache.commons.csv.Token$Type.INVALID == orig(token.type)
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.INVALID)
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[orig(this.reader.eolCounter)]
org.apache.commons.csv.Token$Type.INVALID == org.apache.commons.csv.Token$Type.$VALUES[orig(this.reader.position)-1]
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.$VALUES[this.reader.eolCounter])
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.$VALUES[this.reader.position-1])
org.apache.commons.csv.Token$Type.TOKEN == orig(org.apache.commons.csv.Token$Type.TOKEN)
org.apache.commons.csv.Token$Type.TOKEN == org.apache.commons.csv.Token$Type.$VALUES[orig(this.reader.position)]
org.apache.commons.csv.Token$Type.TOKEN == orig(org.apache.commons.csv.Token$Type.$VALUES[this.reader.position])
org.apache.commons.csv.Token$Type.EOF == orig(org.apache.commons.csv.Token$Type.EOF)
org.apache.commons.csv.Token$Type.EORECORD == orig(org.apache.commons.csv.Token$Type.EORECORD)
org.apache.commons.csv.Token$Type.COMMENT == orig(org.apache.commons.csv.Token$Type.COMMENT)
org.apache.commons.csv.Token$Type.$VALUES == orig(org.apache.commons.csv.Token$Type.$VALUES)
org.apache.commons.csv.Token$Type.$VALUES[] == orig(org.apache.commons.csv.Token$Type.$VALUES[])
token.content == return.content
token.content == orig(token.content)
token.isReady == return.isReady
return == orig(token)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.lastChar >= -1
token.type != null
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EOF != null
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.EORECORD != null
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.COMMENT != null
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES != null
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[] elements != null
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
token.content != null
return != null
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Lexer.DISABLED > orig(ch)
this.delimiter >= this.reader.lastChar
this.delimiter != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.delimiter > orig(this.reader.eolCounter)
this.delimiter > orig(this.reader.position)
this.delimiter < orig(ch)
this.delimiter > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.escape != this.quoteChar
this.escape > this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.escape > orig(this.reader.eolCounter)
this.escape > orig(this.reader.position)
this.escape != orig(ch)
this.escape > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.quoteChar > orig(this.reader.eolCounter)
this.quoteChar > orig(this.reader.position)
this.quoteChar < orig(ch)
this.quoteChar > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.commentStart > orig(this.reader.eolCounter)
this.commentStart > orig(this.reader.position)
this.commentStart != orig(ch)
this.commentStart > size(org.apache.commons.csv.Token$Type.$VALUES[])
this.reader.lastChar != org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.lastChar != orig(this.reader.eolCounter)
this.reader.lastChar != orig(this.reader.position)
this.reader.lastChar < orig(ch)
this.reader.lastChar != size(org.apache.commons.csv.Token$Type.$VALUES[])
this.reader.lastChar != size(org.apache.commons.csv.Token$Type.$VALUES[])-1
this.reader.eolCounter < this.reader.position
this.reader.eolCounter < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.eolCounter >= orig(this.reader.eolCounter)
this.reader.eolCounter <= orig(this.reader.position)
this.reader.eolCounter < orig(ch)
this.reader.eolCounter < size(org.apache.commons.csv.Token$Type.$VALUES[])-1
this.reader.position < org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH
this.reader.position > orig(this.reader.eolCounter)
this.reader.position > orig(this.reader.position)
this.reader.position < orig(ch)
this.reader.position != size(org.apache.commons.csv.Token$Type.$VALUES[])
org.apache.commons.csv.Token.INITIAL_TOKEN_LENGTH != orig(ch)
token.type in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == orig(org.apache.commons.csv.Token$Type.$VALUES.getClass().getName())
orig(this.reader.eolCounter) < orig(ch)
orig(this.reader.position) < orig(ch)
orig(ch) > size(org.apache.commons.csv.Token$Type.$VALUES[])
===========================================================================
org.apache.commons.csv.Lexer.readEndOfLine(int):::ENTER
this.reader.lastChar == ch
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.reader.eolCounter < this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.readEndOfLine(int):::EXIT
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.quoteChar == orig(this.quoteChar)
this.commentStart == orig(this.commentStart)
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.lastChar == orig(ch)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
(return == false)  ==>  (this.commentStart one of { 33, 35, 65534 })
(return == false)  ==>  (this.delimiter one of { 9, 44, 59 })
(return == false)  ==>  (this.escape one of { 33, 92, 65534 })
(return == false)  ==>  (this.quoteChar one of { 34, 39 })
(return == false)  ==>  (this.reader.closed == return)
(return == false)  ==>  (this.reader.eolCounter one of { 0, 1 })
(return == false)  ==>  (this.reader.position != orig(ch))
(return == false)  ==>  (this.reader.position >= 1)
(return == true)  ==>  (org.apache.commons.csv.Lexer.DISABLED == this.commentStart)
(return == true)  ==>  (orig(ch) one of { 10, 13 })
(return == true)  ==>  (this.delimiter == 44)
(return == true)  ==>  (this.escape == 92)
(return == true)  ==>  (this.ignoreEmptyLines == return)
(return == true)  ==>  (this.ignoreEmptyLines == true)
(return == true)  ==>  (this.ignoreSurroundingSpaces == false)
(return == true)  ==>  (this.ignoreSurroundingSpaces == this.reader.closed)
(return == true)  ==>  (this.quoteChar == 34)
(return == true)  ==>  (this.reader.eolCounter == 1)
(return == true)  ==>  (this.reader.position == 10)
this.escape one of { 33, 92, 65534 }
this.quoteChar one of { 34, 39 }
this.commentStart one of { 33, 35, 65534 }
this.reader.position >= 1
orig(ch) != 0
org.apache.commons.csv.Lexer.DISABLED > orig(ch)
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.quoteChar != this.commentStart
this.quoteChar > this.reader.eolCounter
this.quoteChar > this.reader.position
this.quoteChar != orig(ch)
this.commentStart > this.reader.eolCounter
this.commentStart > this.reader.position
this.commentStart != orig(ch)
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.readEndOfLine(int):::EXIT;condition="return == true"
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
org.apache.commons.csv.Lexer.DISABLED == orig(this.commentStart)
this.ignoreSurroundingSpaces == this.reader.closed
this.ignoreSurroundingSpaces == orig(this.reader.closed)
this.ignoreEmptyLines == return
return == orig(this.ignoreEmptyLines)
this.delimiter == 44
this.escape == 92
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.reader.eolCounter == 1
this.reader.position == 10
return == true
orig(ch) one of { 10, 13 }
===========================================================================
org.apache.commons.csv.Lexer.readEndOfLine(int):::EXIT;condition="not(return == true)"
this.reader.closed == return
return == orig(this.reader.closed)
return == false
this.reader.position != orig(ch)
===========================================================================
org.apache.commons.csv.Lexer.readEscape():::ENTER
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.escape == this.reader.lastChar
this.ignoreSurroundingSpaces == this.reader.closed
this.delimiter == 44
this.escape one of { 33, 92 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.ignoreEmptyLines == true
this.reader.eolCounter == 0
this.reader.position == 10
org.apache.commons.csv.Lexer.DISABLED > this.escape
this.escape != this.quoteChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
===========================================================================
org.apache.commons.csv.Lexer.readEscape():::EXIT330
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.lastChar == 114
this.reader.eolCounter == 0
return == 13
===========================================================================
org.apache.commons.csv.Lexer.readEscape():::EXIT344
this.reader.lastChar == return
this.escape == 92
===========================================================================
org.apache.commons.csv.Lexer.readEscape():::EXIT353
this.reader.eolCounter == orig(this.reader.eolCounter)
this.escape == 92
this.reader.lastChar one of { 78, 97 }
this.reader.eolCounter == 0
return == -1
===========================================================================
org.apache.commons.csv.Lexer.readEscape():::EXIT
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.delimiter == orig(this.delimiter)
this.escape == orig(this.escape)
this.escape == orig(this.reader.lastChar)
this.quoteChar == orig(this.quoteChar)
this.ignoreSurroundingSpaces == this.reader.closed
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreSurroundingSpaces == orig(this.reader.closed)
this.ignoreEmptyLines == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.delimiter == 44
this.escape one of { 33, 92 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == false
this.ignoreEmptyLines == true
this.reader.position == 11
return >= -1
org.apache.commons.csv.Lexer.DISABLED > this.escape
org.apache.commons.csv.Lexer.DISABLED > return
this.delimiter != this.reader.lastChar
this.delimiter > return
this.escape != this.quoteChar
this.escape != this.reader.lastChar
this.escape > this.reader.eolCounter
this.escape > this.reader.position
this.escape > return
this.escape > orig(this.reader.eolCounter)
this.escape > orig(this.reader.position)
this.quoteChar > this.reader.eolCounter
this.quoteChar > return
this.reader.lastChar > this.reader.eolCounter
this.reader.lastChar != this.reader.position
this.reader.lastChar >= return
this.reader.lastChar > orig(this.reader.eolCounter)
this.reader.eolCounter < this.reader.position
this.reader.eolCounter != return
this.reader.eolCounter >= orig(this.reader.eolCounter)
this.reader.eolCounter < orig(this.reader.position)
this.reader.position != return
return != orig(this.reader.eolCounter)
===========================================================================
org.apache.commons.csv.Lexer.trimTrailingSpaces(java.lang.StringBuilder):::ENTER
org.apache.commons.csv.Lexer.DISABLED == this.escape
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.delimiter == this.reader.lastChar
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.delimiter one of { 9, 44 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == true
this.reader.eolCounter == 0
===========================================================================
org.apache.commons.csv.Lexer.trimTrailingSpaces(java.lang.StringBuilder):::EXIT
org.apache.commons.csv.Lexer.DISABLED == this.escape
org.apache.commons.csv.Lexer.DISABLED == this.commentStart
this.delimiter == this.reader.lastChar
this.delimiter == orig(this.delimiter)
this.delimiter == orig(this.reader.lastChar)
this.quoteChar == orig(this.quoteChar)
this.ignoreSurroundingSpaces == this.ignoreEmptyLines
this.ignoreSurroundingSpaces == orig(this.ignoreSurroundingSpaces)
this.ignoreSurroundingSpaces == orig(this.ignoreEmptyLines)
this.reader == orig(this.reader)
this.reader.eolCounter == orig(this.reader.eolCounter)
this.reader.position == orig(this.reader.position)
this.reader.closed == orig(this.reader.closed)
this.delimiter one of { 9, 44 }
this.quoteChar == 34
this.ignoreSurroundingSpaces == true
this.reader.eolCounter == 0
===========================================================================
org.apache.commons.csv.LexerTest:::OBJECT
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.DEFAULT.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.EXCEL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.MYSQL.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.RFC4180.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == org.apache.commons.csv.CSVFormat.TDF.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == this.formatWithEscaping.trim
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == org.apache.commons.csv.CSVFormat.TDF.escapeCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == this.formatWithEscaping.commentMarker
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.EXCEL.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == org.apache.commons.csv.CSVFormat.RFC4180.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == this.formatWithEscaping.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.DEFAULT.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.EXCEL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.MYSQL.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.RFC4180.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == org.apache.commons.csv.CSVFormat.TDF.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.formatWithEscaping.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == this.formatWithEscaping.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == this.formatWithEscaping.ignoreEmptyLines
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.EXCEL.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.RFC4180.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == org.apache.commons.csv.CSVFormat.TDF.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == this.formatWithEscaping.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == org.apache.commons.csv.CSVFormat.TDF.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == this.formatWithEscaping.quoteCharacter
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.EXCEL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.MYSQL.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.RFC4180.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == org.apache.commons.csv.CSVFormat.TDF.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == this.formatWithEscaping.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == org.apache.commons.csv.CSVFormat.TDF.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == this.formatWithEscaping.recordSeparator
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == this.formatWithEscaping.escapeCharacter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == org.apache.commons.csv.CSVFormat.TDF.delimiter
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID-1]
org.apache.commons.csv.QuoteMode.MINIMAL == org.apache.commons.csv.QuoteMode.$VALUES[org.apache.commons.csv.CSVFormat.serialVersionUID]
this has only one value
org.apache.commons.csv.CSVFormat.DEFAULT has only one value
org.apache.commons.csv.CSVFormat.DEFAULT != null
org.apache.commons.csv.CSVFormat.EXCEL has only one value
org.apache.commons.csv.CSVFormat.EXCEL != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV != null
org.apache.commons.csv.CSVFormat.MYSQL has only one value
org.apache.commons.csv.CSVFormat.MYSQL != null
org.apache.commons.csv.CSVFormat.RFC4180 has only one value
org.apache.commons.csv.CSVFormat.RFC4180 != null
org.apache.commons.csv.CSVFormat.TDF has only one value
org.apache.commons.csv.CSVFormat.TDF != null
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == false
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == null
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == 44
org.apache.commons.csv.CSVFormat.DEFAULT.header == null
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == true
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter != null
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator != null
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == "\r\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == 124
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator != null
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == "\n"
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator != null
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == 9
org.apache.commons.csv.CSVFormat.MYSQL.nullString has only one value
org.apache.commons.csv.CSVFormat.MYSQL.nullString != null
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == "\\N"
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator has only one value
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator != null
org.apache.commons.csv.QuoteMode.ALL has only one value
org.apache.commons.csv.QuoteMode.MINIMAL has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC has only one value
org.apache.commons.csv.QuoteMode.NON_NUMERIC != null
org.apache.commons.csv.QuoteMode.NONE has only one value
org.apache.commons.csv.QuoteMode.NONE != null
org.apache.commons.csv.QuoteMode.$VALUES has only one value
org.apache.commons.csv.QuoteMode.$VALUES != null
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == org.apache.commons.csv.QuoteMode[].class
org.apache.commons.csv.QuoteMode.$VALUES[] contains no nulls and has only one value, of length 4
org.apache.commons.csv.QuoteMode.$VALUES[] elements != null
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() == [org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode, org.apache.commons.csv.QuoteMode]
org.apache.commons.csv.QuoteMode.$VALUES[].getClass().getName() elements == org.apache.commons.csv.QuoteMode.class
size(org.apache.commons.csv.QuoteMode.$VALUES[]) == 4
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString > org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == this.formatWithEscaping.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString
org.apache.commons.csv.QuoteMode.NON_NUMERIC in org.apache.commons.csv.QuoteMode.$VALUES[]
org.apache.commons.csv.QuoteMode.NONE in org.apache.commons.csv.QuoteMode.$VALUES[]
===========================================================================
org.apache.commons.csv.LexerTest.LexerTest():::EXIT
this.formatWithEscaping == null
===========================================================================
org.apache.commons.csv.LexerTest.getLexer(java.lang.String, org.apache.commons.csv.CSVFormat):::ENTER
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trim
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == format.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == format.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == format.recordSeparator
this.formatWithEscaping has only one value
this.formatWithEscaping != null
input != null
format != null
format.delimiter one of { 9, 44, 59 }
format.quoteCharacter != null
org.apache.commons.csv.CSVFormat.serialVersionUID < format.delimiter
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < input.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == format.recordSeparator.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > format.delimiter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < input.toString
org.apache.commons.csv.CSVFormat.MYSQL.delimiter <= format.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString != input.toString
format.delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.LexerTest.getLexer(java.lang.String, org.apache.commons.csv.CSVFormat):::EXIT
this.formatWithEscaping == orig(this.formatWithEscaping)
org.apache.commons.csv.CSVFormat.DEFAULT == orig(org.apache.commons.csv.CSVFormat.DEFAULT)
org.apache.commons.csv.CSVFormat.EXCEL == orig(org.apache.commons.csv.CSVFormat.EXCEL)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV)
org.apache.commons.csv.CSVFormat.MYSQL == orig(org.apache.commons.csv.CSVFormat.MYSQL)
org.apache.commons.csv.CSVFormat.RFC4180 == orig(org.apache.commons.csv.CSVFormat.RFC4180)
org.apache.commons.csv.CSVFormat.TDF == orig(org.apache.commons.csv.CSVFormat.TDF)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.allowMissingColumnNames
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.ignoreHeaderCase
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.skipHeaderRecord
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trailingDelimiter
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == format.trim
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == return.reader.closed
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.DEFAULT.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.EXCEL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.MYSQL.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.RFC4180.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(org.apache.commons.csv.CSVFormat.TDF.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(this.formatWithEscaping.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.ignoreHeaderCase)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.skipHeaderRecord)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.trailingDelimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.allowMissingColumnNames == orig(format.trim)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.DEFAULT.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.EXCEL.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.RFC4180.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(org.apache.commons.csv.CSVFormat.TDF.escapeCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.commentMarker == orig(this.formatWithEscaping.commentMarker)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.EXCEL.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(org.apache.commons.csv.CSVFormat.RFC4180.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter == orig(this.formatWithEscaping.delimiter)
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.header
org.apache.commons.csv.CSVFormat.DEFAULT.header == format.headerComments
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.DEFAULT.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.EXCEL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.MYSQL.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.RFC4180.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(org.apache.commons.csv.CSVFormat.TDF.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.formatWithEscaping.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(this.formatWithEscaping.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(format.header)
org.apache.commons.csv.CSVFormat.DEFAULT.header == orig(format.headerComments)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.EXCEL.allowMissingColumnNames)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(org.apache.commons.csv.CSVFormat.TDF.ignoreSurroundingSpaces)
org.apache.commons.csv.CSVFormat.DEFAULT.ignoreEmptyLines == orig(this.formatWithEscaping.ignoreEmptyLines)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == format.nullString
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.EXCEL.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.RFC4180.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(org.apache.commons.csv.CSVFormat.TDF.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(this.formatWithEscaping.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.nullString == orig(format.nullString)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(org.apache.commons.csv.CSVFormat.TDF.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteCharacter == orig(this.formatWithEscaping.quoteCharacter)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == format.quoteMode
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.EXCEL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.MYSQL.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.RFC4180.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(org.apache.commons.csv.CSVFormat.TDF.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(this.formatWithEscaping.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.quoteMode == orig(format.quoteMode)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == format.recordSeparator
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(this.formatWithEscaping.recordSeparator)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator == orig(format.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(org.apache.commons.csv.CSVFormat.MYSQL.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.escapeCharacter == orig(this.formatWithEscaping.escapeCharacter)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.MYSQL.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter == orig(org.apache.commons.csv.CSVFormat.TDF.delimiter)
org.apache.commons.csv.CSVFormat.MYSQL.nullString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString)
org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.ALL)
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)-1])
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[return.reader.eolCounter]
org.apache.commons.csv.QuoteMode.ALL == org.apache.commons.csv.QuoteMode.$VALUES[return.reader.position]
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(return.reader.eolCounter)])
org.apache.commons.csv.QuoteMode.ALL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(return.reader.position)])
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.MINIMAL)
org.apache.commons.csv.QuoteMode.MINIMAL == orig(org.apache.commons.csv.QuoteMode.$VALUES[post(org.apache.commons.csv.CSVFormat.serialVersionUID)])
org.apache.commons.csv.QuoteMode.NON_NUMERIC == orig(org.apache.commons.csv.QuoteMode.NON_NUMERIC)
org.apache.commons.csv.QuoteMode.NONE == orig(org.apache.commons.csv.QuoteMode.NONE)
org.apache.commons.csv.QuoteMode.$VALUES == orig(org.apache.commons.csv.QuoteMode.$VALUES)
org.apache.commons.csv.QuoteMode.$VALUES[] == orig(org.apache.commons.csv.QuoteMode.$VALUES[])
format.commentMarker == orig(format.commentMarker)
format.delimiter == return.delimiter
format.delimiter == orig(format.delimiter)
format.escapeCharacter == orig(format.escapeCharacter)
format.ignoreEmptyLines == return.ignoreEmptyLines
format.ignoreEmptyLines == orig(format.ignoreEmptyLines)
format.ignoreSurroundingSpaces == return.ignoreSurroundingSpaces
format.ignoreSurroundingSpaces == orig(format.ignoreSurroundingSpaces)
format.quoteCharacter == orig(format.quoteCharacter)
return.reader.eolCounter == return.reader.position
this.formatWithEscaping has only one value
this.formatWithEscaping != null
format.delimiter one of { 9, 44, 59 }
format.quoteCharacter != null
return != null
return.escape one of { 33, 92, 65534 }
return.quoteChar one of { 34, 39 }
return.commentStart one of { 33, 35, 65534 }
return.reader != null
return.reader.lastChar == -2
return.reader.eolCounter == 0
org.apache.commons.csv.CSVFormat.serialVersionUID < format.delimiter
org.apache.commons.csv.CSVFormat.serialVersionUID < return.escape
org.apache.commons.csv.CSVFormat.serialVersionUID < return.quoteChar
org.apache.commons.csv.CSVFormat.serialVersionUID < return.commentStart
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter != return.escape
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter > return.quoteChar
org.apache.commons.csv.CSVFormat.DEFAULT.delimiter != return.commentStart
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString < input.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == format.recordSeparator.toString
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.EXCEL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.RFC4180.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.TDF.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(this.formatWithEscaping.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.DEFAULT.recordSeparator.toString == orig(format.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > format.delimiter
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter != return.escape
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter > return.quoteChar
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.delimiter != return.commentStart
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString < input.toString
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD_CSV.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.INFORMIX_UNLOAD.recordSeparator.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.recordSeparator.toString)
org.apache.commons.csv.CSVFormat.MYSQL.delimiter <= format.delimiter
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < return.escape
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < return.quoteChar
org.apache.commons.csv.CSVFormat.MYSQL.delimiter < return.commentStart
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString != input.toString
org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString == orig(org.apache.commons.csv.CSVFormat.MYSQL.nullString.toString)
org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName() == orig(org.apache.commons.csv.QuoteMode.$VALUES.getClass().getName())
input.toString == orig(input.toString)
format.delimiter < org.apache.commons.csv.Lexer.DISABLED
format.delimiter != return.escape
format.delimiter != return.quoteChar
format.delimiter != return.commentStart
format.delimiter > return.reader.lastChar
format.delimiter > return.reader.eolCounter
format.delimiter > size(org.apache.commons.csv.QuoteMode.$VALUES[])
org.apache.commons.csv.Lexer.DISABLED >= return.escape
org.apache.commons.csv.Lexer.DISABLED > return.quoteChar
org.apache.commons.csv.Lexer.DISABLED >= return.commentStart
return.escape != return.quoteChar
return.escape > return.reader.lastChar
return.escape > return.reader.eolCounter
return.escape > size(org.apache.commons.csv.QuoteMode.$VALUES[])
return.quoteChar != return.commentStart
return.quoteChar > return.reader.lastChar
return.quoteChar > return.reader.eolCounter
return.quoteChar > size(org.apache.commons.csv.QuoteMode.$VALUES[])
return.commentStart > return.reader.lastChar
return.commentStart > return.reader.eolCounter
return.commentStart > size(org.apache.commons.csv.QuoteMode.$VALUES[])
===========================================================================
org.apache.commons.csv.LexerTest.setUp():::ENTER
this.formatWithEscaping == null
===========================================================================
org.apache.commons.csv.LexerTest.setUp():::EXIT
this.formatWithEscaping has only one value
===========================================================================
org.apache.commons.csv.QuoteMode:::OBJECT
===========================================================================
org.apache.commons.csv.QuoteMode.QuoteMode(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.csv.QuoteMode.QuoteMode(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.csv.Token$Type:::OBJECT
===========================================================================
org.apache.commons.csv.Token$Type.Type(java.lang.String, int):::ENTER
===========================================================================
org.apache.commons.csv.Token$Type.Type(java.lang.String, int):::EXIT
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.csv.Token:::CLASS
===========================================================================
org.apache.commons.csv.Token:::OBJECT
this.type == org.apache.commons.csv.Token$Type.INVALID
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.INVALID != null
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.TOKEN != null
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EOF != null
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.EORECORD != null
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.COMMENT != null
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES != null
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[] elements != null
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
this.content != null
this.isReady == false
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Token$Type.INVALID in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.Token.Token():::EXIT
===========================================================================
org.apache.commons.csv.TokenMatchers$1:::OBJECT
this.val$expectedType == org.apache.commons.csv.Token$Type.TOKEN
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Token$Type.INVALID in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.TokenMatchers$1.(org.apache.commons.csv.Token$Type):::ENTER
$hidden$1 == org.apache.commons.csv.Token$Type.TOKEN
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Token$Type.INVALID in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.TokenMatchers$1.(org.apache.commons.csv.Token$Type):::EXIT
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.INVALID)
org.apache.commons.csv.Token$Type.TOKEN == orig($hidden$1)
org.apache.commons.csv.Token$Type.TOKEN == orig(org.apache.commons.csv.Token$Type.TOKEN)
org.apache.commons.csv.Token$Type.EOF == orig(org.apache.commons.csv.Token$Type.EOF)
org.apache.commons.csv.Token$Type.EORECORD == orig(org.apache.commons.csv.Token$Type.EORECORD)
org.apache.commons.csv.Token$Type.COMMENT == orig(org.apache.commons.csv.Token$Type.COMMENT)
org.apache.commons.csv.Token$Type.$VALUES == orig(org.apache.commons.csv.Token$Type.$VALUES)
org.apache.commons.csv.Token$Type.$VALUES[] == orig(org.apache.commons.csv.Token$Type.$VALUES[])
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == orig(org.apache.commons.csv.Token$Type.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.TokenMatchers$2:::OBJECT
this.val$expectedContent != null
===========================================================================
org.apache.commons.csv.TokenMatchers$2.(java.lang.String):::ENTER
$hidden$1 != null
===========================================================================
org.apache.commons.csv.TokenMatchers$2.(java.lang.String):::EXIT
this.val$expectedContent == orig($hidden$1)
this.val$expectedContent.toString == $hidden$1.toString
$hidden$1.toString == orig($hidden$1.toString)
===========================================================================
org.apache.commons.csv.TokenMatchers.hasContent(java.lang.String):::ENTER
expectedContent != null
===========================================================================
org.apache.commons.csv.TokenMatchers.hasContent(java.lang.String):::EXIT
return != null
return.getClass().getName() == org.apache.commons.csv.TokenMatchers$2.class
expectedContent.toString == orig(expectedContent.toString)
===========================================================================
org.apache.commons.csv.TokenMatchers.hasType(org.apache.commons.csv.Token$Type):::ENTER
expectedType == org.apache.commons.csv.Token$Type.TOKEN
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Token$Type.INVALID in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
===========================================================================
org.apache.commons.csv.TokenMatchers.hasType(org.apache.commons.csv.Token$Type):::EXIT
org.apache.commons.csv.Token$Type.INVALID == orig(org.apache.commons.csv.Token$Type.INVALID)
org.apache.commons.csv.Token$Type.TOKEN == orig(expectedType)
org.apache.commons.csv.Token$Type.TOKEN == orig(org.apache.commons.csv.Token$Type.TOKEN)
org.apache.commons.csv.Token$Type.EOF == orig(org.apache.commons.csv.Token$Type.EOF)
org.apache.commons.csv.Token$Type.EORECORD == orig(org.apache.commons.csv.Token$Type.EORECORD)
org.apache.commons.csv.Token$Type.COMMENT == orig(org.apache.commons.csv.Token$Type.COMMENT)
org.apache.commons.csv.Token$Type.$VALUES == orig(org.apache.commons.csv.Token$Type.$VALUES)
org.apache.commons.csv.Token$Type.$VALUES[] == orig(org.apache.commons.csv.Token$Type.$VALUES[])
org.apache.commons.csv.Token$Type.INVALID has only one value
org.apache.commons.csv.Token$Type.TOKEN has only one value
org.apache.commons.csv.Token$Type.EOF has only one value
org.apache.commons.csv.Token$Type.EORECORD has only one value
org.apache.commons.csv.Token$Type.COMMENT has only one value
org.apache.commons.csv.Token$Type.$VALUES has only one value
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == org.apache.commons.csv.Token$Type[].class
org.apache.commons.csv.Token$Type.$VALUES[] contains no nulls and has only one value, of length 5
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() == [org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type, org.apache.commons.csv.Token.Type]
org.apache.commons.csv.Token$Type.$VALUES[].getClass().getName() elements == org.apache.commons.csv.Token.Type.class
return.getClass().getName() == org.apache.commons.csv.TokenMatchers$1.class
size(org.apache.commons.csv.Token$Type.$VALUES[]) == 5
org.apache.commons.csv.Token$Type.INVALID in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.TOKEN in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EOF in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.EORECORD in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.COMMENT in org.apache.commons.csv.Token$Type.$VALUES[]
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() != return.getClass().getName()
org.apache.commons.csv.Token$Type.$VALUES.getClass().getName() == orig(org.apache.commons.csv.Token$Type.$VALUES.getClass().getName())
===========================================================================
org.apache.commons.csv.test.main(java.lang.String[]):::ENTER
args has only one value
args.getClass().getName() == java.lang.String[].class
args[] == []
args[].toString == []
===========================================================================
org.apache.commons.csv.test.main(java.lang.String[]):::EXIT
args[] == orig(args[])
args[] == []
args[].toString == []
===========================================================================
org.hamcrest.BaseMatcher:::OBJECT
===========================================================================
org.hamcrest.BaseMatcher.BaseMatcher():::EXIT
===========================================================================
org.hamcrest.TypeSafeDiagnosingMatcher:::CLASS
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER has only one value
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER != null
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName has only one value
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName != null
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName.toString == "matchesSafely"
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.expectedNumberOfParameters == 2
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.typedParameter == 0
===========================================================================
org.hamcrest.TypeSafeDiagnosingMatcher:::OBJECT
this.expectedType has only one value
this.expectedType != null
===========================================================================
org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher():::EXIT
===========================================================================
org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher(org.hamcrest.internal.ReflectiveTypeFinder):::ENTER
typeFinder has only one value
typeFinder != null
typeFinder.methodName has only one value
typeFinder.methodName != null
typeFinder.methodName.toString == "matchesSafely"
typeFinder.expectedNumberOfParameters == 2
typeFinder.typedParameter == 0
===========================================================================
org.hamcrest.TypeSafeDiagnosingMatcher.TypeSafeDiagnosingMatcher(org.hamcrest.internal.ReflectiveTypeFinder):::EXIT
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER == orig(typeFinder)
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName == typeFinder.methodName
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName == orig(typeFinder.methodName)
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.expectedNumberOfParameters == typeFinder.expectedNumberOfParameters
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.expectedNumberOfParameters == orig(typeFinder.expectedNumberOfParameters)
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.typedParameter == typeFinder.typedParameter
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.typedParameter == orig(typeFinder.typedParameter)
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName.toString == typeFinder.methodName.toString
org.hamcrest.TypeSafeDiagnosingMatcher.TYPE_FINDER.methodName.toString == orig(typeFinder.methodName.toString)
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder:::OBJECT
this has only one value
this.methodName has only one value
this.methodName != null
this.methodName.toString == "matchesSafely"
this.expectedNumberOfParameters == 2
this.typedParameter == 0
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.ReflectiveTypeFinder(java.lang.String, int, int):::ENTER
methodName has only one value
methodName.toString == "matchesSafely"
expectedNumberOfParameters == 2
typedParameter == 0
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.ReflectiveTypeFinder(java.lang.String, int, int):::EXIT
this.methodName == orig(methodName)
this.expectedNumberOfParameters == orig(expectedNumberOfParameters)
this.typedParameter == orig(typedParameter)
methodName.toString == "matchesSafely"
this.methodName.toString == methodName.toString
methodName.toString == orig(methodName.toString)
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.canObtainExpectedTypeFrom(java.lang.reflect.Method):::ENTER
method != null
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.canObtainExpectedTypeFrom(java.lang.reflect.Method):::EXIT
this.methodName == orig(this.methodName)
this.expectedNumberOfParameters == orig(this.expectedNumberOfParameters)
this.typedParameter == orig(this.typedParameter)
this.methodName.toString == orig(this.methodName.toString)
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.canObtainExpectedTypeFrom(java.lang.reflect.Method):::EXIT;condition="return == true"
return == true
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.canObtainExpectedTypeFrom(java.lang.reflect.Method):::EXIT;condition="not(return == true)"
return == false
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.expectedTypeFrom(java.lang.reflect.Method):::ENTER
method != null
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.expectedTypeFrom(java.lang.reflect.Method):::EXIT
this.methodName == orig(this.methodName)
this.expectedNumberOfParameters == orig(this.expectedNumberOfParameters)
this.typedParameter == orig(this.typedParameter)
return has only one value
return != null
this.methodName.toString == orig(this.methodName.toString)
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.findExpectedType(java.lang.Class):::ENTER
fromClass != null
===========================================================================
org.hamcrest.internal.ReflectiveTypeFinder.findExpectedType(java.lang.Class):::EXIT
this.methodName == orig(this.methodName)
this.expectedNumberOfParameters == orig(this.expectedNumberOfParameters)
this.typedParameter == orig(this.typedParameter)
return has only one value
return != null
this.methodName.toString == orig(this.methodName.toString)
===========================================================================
org.junit.Assert.assertFalse(boolean):::ENTER
condition == false
===========================================================================
org.junit.Assert.assertFalse(boolean):::EXIT
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::ENTER
message.toString == "Should not ignore empty lines"
condition == false
===========================================================================
org.junit.Assert.assertFalse(java.lang.String, boolean):::EXIT
message.toString == "Should not ignore empty lines"
message.toString == orig(message.toString)
===========================================================================
org.junit.Assert.assertTrue(boolean):::ENTER
condition == true
===========================================================================
org.junit.Assert.assertTrue(boolean):::EXIT
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::ENTER
message.toString == "Should not ignore empty lines"
condition == true
===========================================================================
org.junit.Assert.assertTrue(java.lang.String, boolean):::EXIT
message.toString == "Should not ignore empty lines"
message.toString == orig(message.toString)
